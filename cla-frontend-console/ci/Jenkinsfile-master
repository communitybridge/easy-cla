// Setting stage results in variables for Slack Notification
def statusDockerCLAConsole = 0
def statusDockerNGINX = 0
def statusTerraformPlan = 0
def apply = false

node {
  properties([disableConcurrentBuilds(), parameters([string(defaultValue: '', description: 'The git sha you wish to build', name: 'SHA')]), pipelineTriggers([])])

  // Wipe the workspace so we are building completely clean
  sh "sudo rm -rf *"

  // Get the Terraform tool.
  def tfHome = tool name: 'Terraform', type: 'com.cloudbees.jenkins.plugins.customtools.CustomTool'
  env.PATH = "${tfHome}:${env.PATH}"

  stage("Checkout") {
    git credentialsId: 'd78c94c4-9179-4765-9851-9907b5ef2cc4', url: "git@github.linuxfoundation.org:Engineering/cla-console.git", branch: "master"
    sh "git checkout ${params.SHA}"
  }

  wrap([$class: 'AnsiColorBuildWrapper', colorMapName: 'xterm']) {

    docker.withRegistry("https://643009352547.dkr.ecr.us-west-2.amazonaws.com", "ecr:us-west-2:production-aws") {

      stage("Docker Artifact: CLA Console") {
        try {
          sh "docker build -t cla-console/production/${params.SHA} --build-arg build_number=${env.BUILD_NUMBER} --build-arg git_hash=${params.SHA} --no-cache ."
          sh "docker tag cla-console/production/${params.SHA} 643009352547.dkr.ecr.us-west-2.amazonaws.com/cla-console/production:${params.SHA}"
          sh "docker push 643009352547.dkr.ecr.us-west-2.amazonaws.com/cla-console/production:${params.SHA}"
        } catch (err) {
          echo "Caught Exception: ${err}"
          statusDockerCLAConsole = 1
          currentBuild.result = 'FAILURE'
        }
      }
    }

    stage("Terraform Plan") {

      dir("infra/terraform/app") {

        sshagent(['d78c94c4-9179-4765-9851-9907b5ef2cc4']) {

          sh "terraform --version"
          sh "terraform get"
          sh "terraform init -force-copy"

          withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'production-terraform', usernameVariable: 'AWS_ACCESS_KEY', passwordVariable: 'AWS_SECRET_KEY']]) {
            sh "set +e; terraform plan -var access_key=${env.AWS_ACCESS_KEY} -var secret_key=${env.AWS_SECRET_KEY} -var build_hash=${params.SHA} -out=plan.out -detailed-exitcode; echo \$? > status"
          }

          statusTerraformPlan = readFile('status').trim()

          echo "Terraform Plan Exit Code: ${statusTerraformPlan}"

          if (statusTerraformPlan == "1") {
            currentBuild.result = 'FAILURE'
          } else if (statusTerraformPlan == "2") {
            stash name: "plan", includes: "plan.out"
            apply = true
          }
        }
      }
    }

    withCredentials([string(credentialsId: 'workflow-api-key', variable: 'API_KEY')]) {
      sh "curl -s -H \"x-api-key: $API_KEY\" https://workflow.eng.linuxfoundation.org/trigger/jenkins/cd_notif -d '{\
          \"steps\": {\
            \"Docker Image: CLA-Console\": \"${statusDockerCLAConsole}\",\
            \"Docker Image: NGINX\": \"${statusDockerNGINX}\",\
            \"Terraform Plan\": \"${statusTerraformPlan}\"\
          },\
          \"job_name\": \"${env.JOB_NAME}\",\
          \"build\": \"${env.BUILD_NUMBER}\",\
          \"channel\": \"#lfplatform-cla\"}'"
    }
  }
}

if (statusTerraformPlan == "2" && statusDockerCLAConsole == 0 && statusDockerNGINX == 0) {
  timeout(time: 7, unit: 'DAYS') {
    input 'Deploy to Production?'
  }

  milestone()

  lock('CLA-Console Deployment') {
    node {
      dir("infra/terraform/app") {
        wrap([$class: 'AnsiColorBuildWrapper', colorMapName: 'xterm']) {
          def tfHome = tool name: 'Terraform', type: 'com.cloudbees.jenkins.plugins.customtools.CustomTool'
          env.PATH = "${tfHome}:${env.PATH}"

          stage("Terraform Apply") {

            if (apply) {
              unstash 'plan'
              sh" terraform init"
              sh "set +e; terraform apply plan.out; echo \$? &> status.apply"

              def applyExitCode = readFile('status.apply').trim()

              if (applyExitCode == "0") {
                withCredentials([string(credentialsId: 'workflow-api-key', variable: 'API_KEY')]) {
                  sh "curl -s -H \"x-api-key: $API_KEY\" https://workflow.eng.linuxfoundation.org/trigger/slack/message -d '{\
                      \"color\": \"#008000\",\
                      \"message\": \"[CLA Console] Deployment of Build #${env.BUILD_NUMBER} (${params.SHA}) was successful. Services will be updated within 5 minutes.\",\
                      \"channel\": \"#lfplatform-cla\"}'"
                }
              } else {
                withCredentials([string(credentialsId: 'workflow-api-key', variable: 'API_KEY')]) {
                  sh "curl -s -H \"x-api-key: $API_KEY\" https://workflow.eng.linuxfoundation.org/trigger/slack/message -d '{\
                      \"color\": \"#cc0000\",\
                      \"message\": \"[CLA Console] Deployment of Build #${env.BUILD_NUMBER} failed. Details here: ${env.BUILD_URL}\", \
                      \"channel\": \"#lfplatform-cla\"}'"
                }
                currentBuild.result = 'FAILURE'
              }
            }
          }
        }
      }
    }
  }
}