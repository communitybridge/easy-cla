// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Statement Statement is entity to represent set of effect, resource, service and action that will be used in Policy
//
// swagger:model Statement
type Statement struct {

	// Array of statement action belongs to Statement
	Actions []*StatementAction `json:"actions"`

	// Effect of statement (allow, deny)
	Effect string `json:"effect,omitempty"`

	// ID reference to resource
	ResourceID string `json:"resource_id,omitempty"`

	// Resource name
	ResourceName string `json:"resource_name,omitempty"`

	// ID reference to service
	ServiceID string `json:"service_id,omitempty"`

	// Service name
	ServiceName string `json:"service_name,omitempty"`

	// Unique ID of the statement
	StatementID string `json:"statement_id,omitempty"`
}

// Validate validates this statement
func (m *Statement) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Statement) validateActions(formats strfmt.Registry) error {

	if swag.IsZero(m.Actions) { // not required
		return nil
	}

	for i := 0; i < len(m.Actions); i++ {
		if swag.IsZero(m.Actions[i]) { // not required
			continue
		}

		if m.Actions[i] != nil {
			if err := m.Actions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("actions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Statement) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Statement) UnmarshalBinary(b []byte) error {
	var res Statement
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
