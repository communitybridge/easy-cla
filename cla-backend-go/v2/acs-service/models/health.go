// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Health Health is entity to represent health status information about API
//
// swagger:model Health
type Health struct {

	// acs database
	AcsDatabase *HealthAcsDatabase `json:"acs_database,omitempty"`

	// acs service
	AcsService string `json:"acs_service,omitempty"`

	// Current date time
	// Format: date-time
	DateTime strfmt.DateTime `json:"dateTime,omitempty"`

	// heroku connnect database
	HerokuConnnectDatabase *HealthHerokuConnnectDatabase `json:"heroku_connnect_database,omitempty"`
}

// Validate validates this health
func (m *Health) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcsDatabase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHerokuConnnectDatabase(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Health) validateAcsDatabase(formats strfmt.Registry) error {

	if swag.IsZero(m.AcsDatabase) { // not required
		return nil
	}

	if m.AcsDatabase != nil {
		if err := m.AcsDatabase.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("acs_database")
			}
			return err
		}
	}

	return nil
}

func (m *Health) validateDateTime(formats strfmt.Registry) error {

	if swag.IsZero(m.DateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("dateTime", "body", "date-time", m.DateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Health) validateHerokuConnnectDatabase(formats strfmt.Registry) error {

	if swag.IsZero(m.HerokuConnnectDatabase) { // not required
		return nil
	}

	if m.HerokuConnnectDatabase != nil {
		if err := m.HerokuConnnectDatabase.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("heroku_connnect_database")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Health) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Health) UnmarshalBinary(b []byte) error {
	var res Health
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HealthAcsDatabase health acs database
//
// swagger:model HealthAcsDatabase
type HealthAcsDatabase struct {

	// message
	Message string `json:"message,omitempty"`

	// status
	Status string `json:"status,omitempty"`
}

// Validate validates this health acs database
func (m *HealthAcsDatabase) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HealthAcsDatabase) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HealthAcsDatabase) UnmarshalBinary(b []byte) error {
	var res HealthAcsDatabase
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HealthHerokuConnnectDatabase health heroku connnect database
//
// swagger:model HealthHerokuConnnectDatabase
type HealthHerokuConnnectDatabase struct {

	// message
	Message string `json:"message,omitempty"`

	// status
	Status string `json:"status,omitempty"`
}

// Validate validates this health heroku connnect database
func (m *HealthHerokuConnnectDatabase) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HealthHerokuConnnectDatabase) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HealthHerokuConnnectDatabase) UnmarshalBinary(b []byte) error {
	var res HealthHerokuConnnectDatabase
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
