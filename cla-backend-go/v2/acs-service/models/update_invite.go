// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateInvite Update Invite
//
// Update Invite
//
// swagger:model UpdateInvite
type UpdateInvite struct {

	// The email address of the user to be invited to an LFx portal
	Email string `json:"email,omitempty"`

	// The first name of the user to be invited to an LFx portal
	FirstName string `json:"first_name,omitempty"`

	// The last name of the user to be invited to an LFx portal
	LastName string `json:"last_name,omitempty"`

	// The role to be associated with the user once the user accepts the invite
	// Enum: [contributor mentor mentee company-owner company-alternate-owner company-admin contact project-manager cla-manager cla-signatory cla-manager-designee donor human-resources project-maintainer community-program-manager lf-legal lf-program-manager lf-operations lf-training lf-events lf-finance lf-executive user system-admin]
	RoleName string `json:"role_name,omitempty"`

	// The scope name. i.e project, organization, membership, training, and certification
	// Enum: [project organization admin membership training event certification community aggregate exams project|organization developer]
	Scope string `json:"scope,omitempty"`

	// The unique id based on the scope.  i.e project id, organization id etc
	ScopeID string `json:"scope_id,omitempty"`

	// Invite status
	// Enum: [accepted canceled pending]
	Status string `json:"status,omitempty"`

	// Type of invite
	// Enum: [userinvite]
	Type string `json:"type,omitempty"`
}

// Validate validates this update invite
func (m *UpdateInvite) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRoleName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateInviteTypeRoleNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["contributor","mentor","mentee","company-owner","company-alternate-owner","company-admin","contact","project-manager","cla-manager","cla-signatory","cla-manager-designee","donor","human-resources","project-maintainer","community-program-manager","lf-legal","lf-program-manager","lf-operations","lf-training","lf-events","lf-finance","lf-executive","user","system-admin"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateInviteTypeRoleNamePropEnum = append(updateInviteTypeRoleNamePropEnum, v)
	}
}

const (

	// UpdateInviteRoleNameContributor captures enum value "contributor"
	UpdateInviteRoleNameContributor string = "contributor"

	// UpdateInviteRoleNameMentor captures enum value "mentor"
	UpdateInviteRoleNameMentor string = "mentor"

	// UpdateInviteRoleNameMentee captures enum value "mentee"
	UpdateInviteRoleNameMentee string = "mentee"

	// UpdateInviteRoleNameCompanyOwner captures enum value "company-owner"
	UpdateInviteRoleNameCompanyOwner string = "company-owner"

	// UpdateInviteRoleNameCompanyAlternateOwner captures enum value "company-alternate-owner"
	UpdateInviteRoleNameCompanyAlternateOwner string = "company-alternate-owner"

	// UpdateInviteRoleNameCompanyAdmin captures enum value "company-admin"
	UpdateInviteRoleNameCompanyAdmin string = "company-admin"

	// UpdateInviteRoleNameContact captures enum value "contact"
	UpdateInviteRoleNameContact string = "contact"

	// UpdateInviteRoleNameProjectManager captures enum value "project-manager"
	UpdateInviteRoleNameProjectManager string = "project-manager"

	// UpdateInviteRoleNameClaManager captures enum value "cla-manager"
	UpdateInviteRoleNameClaManager string = "cla-manager"

	// UpdateInviteRoleNameClaSignatory captures enum value "cla-signatory"
	UpdateInviteRoleNameClaSignatory string = "cla-signatory"

	// UpdateInviteRoleNameClaManagerDesignee captures enum value "cla-manager-designee"
	UpdateInviteRoleNameClaManagerDesignee string = "cla-manager-designee"

	// UpdateInviteRoleNameDonor captures enum value "donor"
	UpdateInviteRoleNameDonor string = "donor"

	// UpdateInviteRoleNameHumanResources captures enum value "human-resources"
	UpdateInviteRoleNameHumanResources string = "human-resources"

	// UpdateInviteRoleNameProjectMaintainer captures enum value "project-maintainer"
	UpdateInviteRoleNameProjectMaintainer string = "project-maintainer"

	// UpdateInviteRoleNameCommunityProgramManager captures enum value "community-program-manager"
	UpdateInviteRoleNameCommunityProgramManager string = "community-program-manager"

	// UpdateInviteRoleNameLfLegal captures enum value "lf-legal"
	UpdateInviteRoleNameLfLegal string = "lf-legal"

	// UpdateInviteRoleNameLfProgramManager captures enum value "lf-program-manager"
	UpdateInviteRoleNameLfProgramManager string = "lf-program-manager"

	// UpdateInviteRoleNameLfOperations captures enum value "lf-operations"
	UpdateInviteRoleNameLfOperations string = "lf-operations"

	// UpdateInviteRoleNameLfTraining captures enum value "lf-training"
	UpdateInviteRoleNameLfTraining string = "lf-training"

	// UpdateInviteRoleNameLfEvents captures enum value "lf-events"
	UpdateInviteRoleNameLfEvents string = "lf-events"

	// UpdateInviteRoleNameLfFinance captures enum value "lf-finance"
	UpdateInviteRoleNameLfFinance string = "lf-finance"

	// UpdateInviteRoleNameLfExecutive captures enum value "lf-executive"
	UpdateInviteRoleNameLfExecutive string = "lf-executive"

	// UpdateInviteRoleNameUser captures enum value "user"
	UpdateInviteRoleNameUser string = "user"

	// UpdateInviteRoleNameSystemAdmin captures enum value "system-admin"
	UpdateInviteRoleNameSystemAdmin string = "system-admin"
)

// prop value enum
func (m *UpdateInvite) validateRoleNameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateInviteTypeRoleNamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpdateInvite) validateRoleName(formats strfmt.Registry) error {

	if swag.IsZero(m.RoleName) { // not required
		return nil
	}

	// value enum
	if err := m.validateRoleNameEnum("role_name", "body", m.RoleName); err != nil {
		return err
	}

	return nil
}

var updateInviteTypeScopePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["project","organization","admin","membership","training","event","certification","community","aggregate","exams","project|organization","developer"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateInviteTypeScopePropEnum = append(updateInviteTypeScopePropEnum, v)
	}
}

const (

	// UpdateInviteScopeProject captures enum value "project"
	UpdateInviteScopeProject string = "project"

	// UpdateInviteScopeOrganization captures enum value "organization"
	UpdateInviteScopeOrganization string = "organization"

	// UpdateInviteScopeAdmin captures enum value "admin"
	UpdateInviteScopeAdmin string = "admin"

	// UpdateInviteScopeMembership captures enum value "membership"
	UpdateInviteScopeMembership string = "membership"

	// UpdateInviteScopeTraining captures enum value "training"
	UpdateInviteScopeTraining string = "training"

	// UpdateInviteScopeEvent captures enum value "event"
	UpdateInviteScopeEvent string = "event"

	// UpdateInviteScopeCertification captures enum value "certification"
	UpdateInviteScopeCertification string = "certification"

	// UpdateInviteScopeCommunity captures enum value "community"
	UpdateInviteScopeCommunity string = "community"

	// UpdateInviteScopeAggregate captures enum value "aggregate"
	UpdateInviteScopeAggregate string = "aggregate"

	// UpdateInviteScopeExams captures enum value "exams"
	UpdateInviteScopeExams string = "exams"

	// UpdateInviteScopeProjectPipeOrganization captures enum value "project|organization"
	UpdateInviteScopeProjectPipeOrganization string = "project|organization"

	// UpdateInviteScopeDeveloper captures enum value "developer"
	UpdateInviteScopeDeveloper string = "developer"
)

// prop value enum
func (m *UpdateInvite) validateScopeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateInviteTypeScopePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpdateInvite) validateScope(formats strfmt.Registry) error {

	if swag.IsZero(m.Scope) { // not required
		return nil
	}

	// value enum
	if err := m.validateScopeEnum("scope", "body", m.Scope); err != nil {
		return err
	}

	return nil
}

var updateInviteTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["accepted","canceled","pending"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateInviteTypeStatusPropEnum = append(updateInviteTypeStatusPropEnum, v)
	}
}

const (

	// UpdateInviteStatusAccepted captures enum value "accepted"
	UpdateInviteStatusAccepted string = "accepted"

	// UpdateInviteStatusCanceled captures enum value "canceled"
	UpdateInviteStatusCanceled string = "canceled"

	// UpdateInviteStatusPending captures enum value "pending"
	UpdateInviteStatusPending string = "pending"
)

// prop value enum
func (m *UpdateInvite) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateInviteTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpdateInvite) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

var updateInviteTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["userinvite"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateInviteTypeTypePropEnum = append(updateInviteTypeTypePropEnum, v)
	}
}

const (

	// UpdateInviteTypeUserinvite captures enum value "userinvite"
	UpdateInviteTypeUserinvite string = "userinvite"
)

// prop value enum
func (m *UpdateInvite) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateInviteTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpdateInvite) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateInvite) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateInvite) UnmarshalBinary(b []byte) error {
	var res UpdateInvite
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
