// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Policy Policy is entity that, when it is attached to an identity or resource, defines their permissions.
//
// swagger:model Policy
type Policy struct {

	// Unix timestamp when data is created
	// Read Only: true
	CreatedAt int64 `json:"created_at,omitempty"`

	// LFID/Username of entity author/creator
	CreatedBy string `json:"created_by,omitempty"`

	// Description about the Policy
	Description string `json:"description,omitempty"`

	// Unique ID of the policy
	// Read Only: true
	PolicyID string `json:"policy_id,omitempty"`

	// Policy name
	PolicyName string `json:"policy_name,omitempty"`

	// Policy Type name
	PolicyType string `json:"policy_type,omitempty"`

	// Array of statements that belongs to policy
	Statement []*Statement `json:"statement"`

	// Unix timestamp when data is last updated
	// Read Only: true
	UpdatedAt int64 `json:"updated_at,omitempty"`

	// Username/LFID of user who updated last
	UpdatedBy string `json:"updated_by,omitempty"`
}

// Validate validates this policy
func (m *Policy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatement(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Policy) validateStatement(formats strfmt.Registry) error {

	if swag.IsZero(m.Statement) { // not required
		return nil
	}

	for i := 0; i < len(m.Statement); i++ {
		if swag.IsZero(m.Statement[i]) { // not required
			continue
		}

		if m.Statement[i] != nil {
			if err := m.Statement[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("statement" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Policy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Policy) UnmarshalBinary(b []byte) error {
	var res Policy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
