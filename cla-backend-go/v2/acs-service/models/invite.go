// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Invite Invite
//
// Invite is entity to represent identity that has set of access and permissions
//
// swagger:model Invite
type Invite struct {

	// Unix timestamp when data is created
	// Read Only: true
	CreatedAt int64 `json:"created_at,omitempty"`

	// LFID/Username of entity author
	CreatedBy string `json:"created_by,omitempty"`

	// The email address of the user to be invited to an LFx portal
	Email string `json:"email,omitempty"`

	// The first name of the user to be invited to an LFx portal
	FirstName string `json:"first_name,omitempty"`

	// The unique id (UUID) of invite in invites table
	// Read Only: true
	InviteID string `json:"invite_id,omitempty"`

	// The last name of the user to be invited to an LFx portal
	LastName string `json:"last_name,omitempty"`

	// LFId of the recipient to whom sending the invite
	Recipient string `json:"recipient,omitempty"`

	// The role to be associated with the user once the user accepts the invite
	RoleName string `json:"role_name,omitempty"`

	// The scope name. i.e project, organization, membership, training, and certification
	Scope string `json:"scope,omitempty"`

	// The unique id based on the scope.  i.e project id, organization id etc
	ScopeID string `json:"scope_id,omitempty"`

	// Invite status
	Status string `json:"status,omitempty"`

	// Type of invite
	Type string `json:"type,omitempty"`

	// Unix timestamp when data is last updated
	// Read Only: true
	UpdatedAt int64 `json:"updated_at,omitempty"`

	// LFID/Username of entity updater
	UpdatedBy string `json:"updated_by,omitempty"`
}

// Validate validates this invite
func (m *Invite) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Invite) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Invite) UnmarshalBinary(b []byte) error {
	var res Invite
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
