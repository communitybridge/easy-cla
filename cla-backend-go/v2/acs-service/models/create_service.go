// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateService CreateService is entity to represent data that is required to create service
//
// swagger:model CreateService
type CreateService struct {

	// Client/Company name
	// Required: true
	ClientID *string `json:"client_id"`

	// Service name, restricted to alphanum and these special characters: +=,.@-_. Max Length: 128.
	// Required: true
	// Pattern: ^[\w+\+=,\.@\-_]{0,128}$
	Name *string `json:"name"`

	// Unique ID reference of the Object Type
	// Required: true
	ObjectTypeID *int64 `json:"object_type_id"`
}

// Validate validates this create service
func (m *CreateService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClientID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectTypeID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateService) validateClientID(formats strfmt.Registry) error {

	if err := validate.Required("client_id", "body", m.ClientID); err != nil {
		return err
	}

	return nil
}

func (m *CreateService) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", string(*m.Name), `^[\w+\+=,\.@\-_]{0,128}$`); err != nil {
		return err
	}

	return nil
}

func (m *CreateService) validateObjectTypeID(formats strfmt.Registry) error {

	if err := validate.Required("object_type_id", "body", m.ObjectTypeID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateService) UnmarshalBinary(b []byte) error {
	var res CreateService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
