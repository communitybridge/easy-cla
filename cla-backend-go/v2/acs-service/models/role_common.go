// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RoleCommon Role Common
//
// RoleCommon is entity to represent main properties/data of Role that is used to create and update Role
//
// swagger:model RoleCommon
type RoleCommon struct {

	// The category of the role - internal, external and both
	// Enum: [internal external both]
	Category string `json:"category,omitempty"`

	// The description of the role
	Description string `json:"description,omitempty"`

	// Boolean status whether role is for admin or not
	IsAdmin *bool `json:"is_admin,omitempty"`

	// The longer detail explanation of the role
	RoleDetails string `json:"role_details,omitempty"`

	// The name of the role
	// Required: true
	RoleName *string `json:"role_name"`

	// role objects
	RoleObjects []*RoleObject `json:"role_objects"`

	// The title of the role
	// Required: true
	RoleTitle *string `json:"role_title"`
}

// Validate validates this role common
func (m *RoleCommon) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoleName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoleObjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoleTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var roleCommonTypeCategoryPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["internal","external","both"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		roleCommonTypeCategoryPropEnum = append(roleCommonTypeCategoryPropEnum, v)
	}
}

const (

	// RoleCommonCategoryInternal captures enum value "internal"
	RoleCommonCategoryInternal string = "internal"

	// RoleCommonCategoryExternal captures enum value "external"
	RoleCommonCategoryExternal string = "external"

	// RoleCommonCategoryBoth captures enum value "both"
	RoleCommonCategoryBoth string = "both"
)

// prop value enum
func (m *RoleCommon) validateCategoryEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, roleCommonTypeCategoryPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RoleCommon) validateCategory(formats strfmt.Registry) error {

	if swag.IsZero(m.Category) { // not required
		return nil
	}

	// value enum
	if err := m.validateCategoryEnum("category", "body", m.Category); err != nil {
		return err
	}

	return nil
}

func (m *RoleCommon) validateRoleName(formats strfmt.Registry) error {

	if err := validate.Required("role_name", "body", m.RoleName); err != nil {
		return err
	}

	return nil
}

func (m *RoleCommon) validateRoleObjects(formats strfmt.Registry) error {

	if swag.IsZero(m.RoleObjects) { // not required
		return nil
	}

	for i := 0; i < len(m.RoleObjects); i++ {
		if swag.IsZero(m.RoleObjects[i]) { // not required
			continue
		}

		if m.RoleObjects[i] != nil {
			if err := m.RoleObjects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("role_objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RoleCommon) validateRoleTitle(formats strfmt.Registry) error {

	if err := validate.Required("role_title", "body", m.RoleTitle); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RoleCommon) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RoleCommon) UnmarshalBinary(b []byte) error {
	var res RoleCommon
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
