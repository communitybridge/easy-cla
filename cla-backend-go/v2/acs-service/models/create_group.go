// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateGroup CreateGroup is entity to represent data that is used to create group
//
// swagger:model CreateGroup
type CreateGroup struct {

	// Description of group, Max Length: 250
	Description string `json:"description,omitempty"`

	// Name of the Group. e.g legal-group, linux_group
	// Required: true
	// Pattern: ^[\w+\+=,\.@\-_]{0,128}$
	GroupName *string `json:"group_name"`

	// Title of group, Max Length: 250
	// Required: true
	GroupTitle *string `json:"group_title"`

	// The project ID this group belongs to.
	// Required: true
	ProjectID *string `json:"project_id"`
}

// Validate validates this create group
func (m *CreateGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGroupName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroupTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateGroup) validateGroupName(formats strfmt.Registry) error {

	if err := validate.Required("group_name", "body", m.GroupName); err != nil {
		return err
	}

	if err := validate.Pattern("group_name", "body", string(*m.GroupName), `^[\w+\+=,\.@\-_]{0,128}$`); err != nil {
		return err
	}

	return nil
}

func (m *CreateGroup) validateGroupTitle(formats strfmt.Registry) error {

	if err := validate.Required("group_title", "body", m.GroupTitle); err != nil {
		return err
	}

	return nil
}

func (m *CreateGroup) validateProjectID(formats strfmt.Registry) error {

	if err := validate.Required("project_id", "body", m.ProjectID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateGroup) UnmarshalBinary(b []byte) error {
	var res CreateGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
