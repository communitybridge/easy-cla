// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Role Role
//
// Role is entity to represent identity that has set of access and permissions
//
// swagger:model Role
type Role struct {
	RoleCommon

	// Unix timestamp when data is created
	// Read Only: true
	CreatedAt int64 `json:"created_at,omitempty"`

	// LFID/Username of entity author
	CreatedBy string `json:"created_by,omitempty"`

	// The unique id (UUID) of role in role table
	// Read Only: true
	RoleID string `json:"role_id,omitempty"`

	// Unix timestamp when data is last updated
	// Read Only: true
	UpdatedAt int64 `json:"updated_at,omitempty"`

	// LFID/Username of entity updater
	UpdatedBy string `json:"updated_by,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *Role) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 RoleCommon
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.RoleCommon = aO0

	// now for regular properties
	var propsRole struct {
		CreatedAt int64 `json:"created_at,omitempty"`

		CreatedBy string `json:"created_by,omitempty"`

		RoleID string `json:"role_id,omitempty"`

		UpdatedAt int64 `json:"updated_at,omitempty"`

		UpdatedBy string `json:"updated_by,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsRole); err != nil {
		return err
	}
	m.CreatedAt = propsRole.CreatedAt

	m.CreatedBy = propsRole.CreatedBy

	m.RoleID = propsRole.RoleID

	m.UpdatedAt = propsRole.UpdatedAt

	m.UpdatedBy = propsRole.UpdatedBy

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m Role) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.RoleCommon)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsRole struct {
		CreatedAt int64 `json:"created_at,omitempty"`

		CreatedBy string `json:"created_by,omitempty"`

		RoleID string `json:"role_id,omitempty"`

		UpdatedAt int64 `json:"updated_at,omitempty"`

		UpdatedBy string `json:"updated_by,omitempty"`
	}
	propsRole.CreatedAt = m.CreatedAt

	propsRole.CreatedBy = m.CreatedBy

	propsRole.RoleID = m.RoleID

	propsRole.UpdatedAt = m.UpdatedAt

	propsRole.UpdatedBy = m.UpdatedBy

	jsonDataPropsRole, errRole := swag.WriteJSON(propsRole)
	if errRole != nil {
		return nil, errRole
	}
	_parts = append(_parts, jsonDataPropsRole)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this role
func (m *Role) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with RoleCommon
	if err := m.RoleCommon.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *Role) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Role) UnmarshalBinary(b []byte) error {
	var res Role
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
