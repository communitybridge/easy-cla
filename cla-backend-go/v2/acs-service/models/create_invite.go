// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateInvite Send Invite
//
// Send Invite is an entity to send the invitation to the user for joining the organization with a specific role
//
// swagger:model CreateInvite
type CreateInvite struct {

	// The email address of the user to be invited to an LFx portal
	// Required: true
	Email *string `json:"email"`

	// The first name of the user to be invited to an LFx portal
	FirstName string `json:"first_name,omitempty"`

	// The last name of the user to be invited to an LFx portal
	LastName string `json:"last_name,omitempty"`

	// The role to be associated with the user once the user accepts the invite
	// Enum: [contributor mentor mentee company-owner company-alternate-owner company-admin contact project-manager cla-manager cla-signatory cla-manager-designee donor human-resources project-maintainer community-program-manager lf-legal lf-program-manager lf-operations lf-training lf-events lf-finance lf-executive user system-admin]
	RoleName string `json:"role_name,omitempty"`

	// The scope name. i.e project, organization, membership, training, and certification
	// Enum: [project organization admin membership training event certification community aggregate exams project|organization developer]
	Scope string `json:"scope,omitempty"`

	// The unique id based on the scope.  i.e project id, organization id etc
	ScopeID string `json:"scope_id,omitempty"`

	// Type of invite
	// Enum: [userinvite]
	Type string `json:"type,omitempty"`
}

// Validate validates this create invite
func (m *CreateInvite) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoleName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateInvite) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	return nil
}

var createInviteTypeRoleNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["contributor","mentor","mentee","company-owner","company-alternate-owner","company-admin","contact","project-manager","cla-manager","cla-signatory","cla-manager-designee","donor","human-resources","project-maintainer","community-program-manager","lf-legal","lf-program-manager","lf-operations","lf-training","lf-events","lf-finance","lf-executive","user","system-admin"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createInviteTypeRoleNamePropEnum = append(createInviteTypeRoleNamePropEnum, v)
	}
}

const (

	// CreateInviteRoleNameContributor captures enum value "contributor"
	CreateInviteRoleNameContributor string = "contributor"

	// CreateInviteRoleNameMentor captures enum value "mentor"
	CreateInviteRoleNameMentor string = "mentor"

	// CreateInviteRoleNameMentee captures enum value "mentee"
	CreateInviteRoleNameMentee string = "mentee"

	// CreateInviteRoleNameCompanyOwner captures enum value "company-owner"
	CreateInviteRoleNameCompanyOwner string = "company-owner"

	// CreateInviteRoleNameCompanyAlternateOwner captures enum value "company-alternate-owner"
	CreateInviteRoleNameCompanyAlternateOwner string = "company-alternate-owner"

	// CreateInviteRoleNameCompanyAdmin captures enum value "company-admin"
	CreateInviteRoleNameCompanyAdmin string = "company-admin"

	// CreateInviteRoleNameContact captures enum value "contact"
	CreateInviteRoleNameContact string = "contact"

	// CreateInviteRoleNameProjectManager captures enum value "project-manager"
	CreateInviteRoleNameProjectManager string = "project-manager"

	// CreateInviteRoleNameClaManager captures enum value "cla-manager"
	CreateInviteRoleNameClaManager string = "cla-manager"

	// CreateInviteRoleNameClaSignatory captures enum value "cla-signatory"
	CreateInviteRoleNameClaSignatory string = "cla-signatory"

	// CreateInviteRoleNameClaManagerDesignee captures enum value "cla-manager-designee"
	CreateInviteRoleNameClaManagerDesignee string = "cla-manager-designee"

	// CreateInviteRoleNameDonor captures enum value "donor"
	CreateInviteRoleNameDonor string = "donor"

	// CreateInviteRoleNameHumanResources captures enum value "human-resources"
	CreateInviteRoleNameHumanResources string = "human-resources"

	// CreateInviteRoleNameProjectMaintainer captures enum value "project-maintainer"
	CreateInviteRoleNameProjectMaintainer string = "project-maintainer"

	// CreateInviteRoleNameCommunityProgramManager captures enum value "community-program-manager"
	CreateInviteRoleNameCommunityProgramManager string = "community-program-manager"

	// CreateInviteRoleNameLfLegal captures enum value "lf-legal"
	CreateInviteRoleNameLfLegal string = "lf-legal"

	// CreateInviteRoleNameLfProgramManager captures enum value "lf-program-manager"
	CreateInviteRoleNameLfProgramManager string = "lf-program-manager"

	// CreateInviteRoleNameLfOperations captures enum value "lf-operations"
	CreateInviteRoleNameLfOperations string = "lf-operations"

	// CreateInviteRoleNameLfTraining captures enum value "lf-training"
	CreateInviteRoleNameLfTraining string = "lf-training"

	// CreateInviteRoleNameLfEvents captures enum value "lf-events"
	CreateInviteRoleNameLfEvents string = "lf-events"

	// CreateInviteRoleNameLfFinance captures enum value "lf-finance"
	CreateInviteRoleNameLfFinance string = "lf-finance"

	// CreateInviteRoleNameLfExecutive captures enum value "lf-executive"
	CreateInviteRoleNameLfExecutive string = "lf-executive"

	// CreateInviteRoleNameUser captures enum value "user"
	CreateInviteRoleNameUser string = "user"

	// CreateInviteRoleNameSystemAdmin captures enum value "system-admin"
	CreateInviteRoleNameSystemAdmin string = "system-admin"
)

// prop value enum
func (m *CreateInvite) validateRoleNameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createInviteTypeRoleNamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateInvite) validateRoleName(formats strfmt.Registry) error {

	if swag.IsZero(m.RoleName) { // not required
		return nil
	}

	// value enum
	if err := m.validateRoleNameEnum("role_name", "body", m.RoleName); err != nil {
		return err
	}

	return nil
}

var createInviteTypeScopePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["project","organization","admin","membership","training","event","certification","community","aggregate","exams","project|organization","developer"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createInviteTypeScopePropEnum = append(createInviteTypeScopePropEnum, v)
	}
}

const (

	// CreateInviteScopeProject captures enum value "project"
	CreateInviteScopeProject string = "project"

	// CreateInviteScopeOrganization captures enum value "organization"
	CreateInviteScopeOrganization string = "organization"

	// CreateInviteScopeAdmin captures enum value "admin"
	CreateInviteScopeAdmin string = "admin"

	// CreateInviteScopeMembership captures enum value "membership"
	CreateInviteScopeMembership string = "membership"

	// CreateInviteScopeTraining captures enum value "training"
	CreateInviteScopeTraining string = "training"

	// CreateInviteScopeEvent captures enum value "event"
	CreateInviteScopeEvent string = "event"

	// CreateInviteScopeCertification captures enum value "certification"
	CreateInviteScopeCertification string = "certification"

	// CreateInviteScopeCommunity captures enum value "community"
	CreateInviteScopeCommunity string = "community"

	// CreateInviteScopeAggregate captures enum value "aggregate"
	CreateInviteScopeAggregate string = "aggregate"

	// CreateInviteScopeExams captures enum value "exams"
	CreateInviteScopeExams string = "exams"

	// CreateInviteScopeProjectPipeOrganization captures enum value "project|organization"
	CreateInviteScopeProjectPipeOrganization string = "project|organization"

	// CreateInviteScopeDeveloper captures enum value "developer"
	CreateInviteScopeDeveloper string = "developer"
)

// prop value enum
func (m *CreateInvite) validateScopeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createInviteTypeScopePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateInvite) validateScope(formats strfmt.Registry) error {

	if swag.IsZero(m.Scope) { // not required
		return nil
	}

	// value enum
	if err := m.validateScopeEnum("scope", "body", m.Scope); err != nil {
		return err
	}

	return nil
}

var createInviteTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["userinvite"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createInviteTypeTypePropEnum = append(createInviteTypeTypePropEnum, v)
	}
}

const (

	// CreateInviteTypeUserinvite captures enum value "userinvite"
	CreateInviteTypeUserinvite string = "userinvite"
)

// prop value enum
func (m *CreateInvite) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createInviteTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateInvite) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateInvite) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateInvite) UnmarshalBinary(b []byte) error {
	var res CreateInvite
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
