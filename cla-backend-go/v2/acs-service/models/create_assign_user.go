// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateAssignUser Create RoleScope
//
// CreateAssignUser is entity to assign user and object id to role
//
// swagger:model CreateAssignUser
type CreateAssignUser struct {

	// Unix timestamp when data is created
	// Read Only: true
	CreatedAt int64 `json:"created_at,omitempty"`

	// LFID/Username of entity author/creator
	// Read Only: true
	CreatedBy string `json:"created_by,omitempty"`

	// Unique id of the object. i.e projectId, eventId, trainingId
	// Required: true
	ObjectIds []string `json:"object_ids"`

	// Unique id of the object type
	// Required: true
	ObjectTypeID *int64 `json:"object_type_id"`

	// Unique UUID of the role
	// Required: true
	RoleID *string `json:"role_id"`

	// Unix timestamp when data is last updated
	// Read Only: true
	UpdatedAt int64 `json:"updated_at,omitempty"`

	// Username/LFID of user who updated last
	// Read Only: true
	UpdatedBy string `json:"updated_by,omitempty"`

	// usernames
	// Required: true
	Usernames []string `json:"usernames"`
}

// Validate validates this create assign user
func (m *CreateAssignUser) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateObjectIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectTypeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoleID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsernames(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateAssignUser) validateObjectIds(formats strfmt.Registry) error {

	if err := validate.Required("object_ids", "body", m.ObjectIds); err != nil {
		return err
	}

	return nil
}

func (m *CreateAssignUser) validateObjectTypeID(formats strfmt.Registry) error {

	if err := validate.Required("object_type_id", "body", m.ObjectTypeID); err != nil {
		return err
	}

	return nil
}

func (m *CreateAssignUser) validateRoleID(formats strfmt.Registry) error {

	if err := validate.Required("role_id", "body", m.RoleID); err != nil {
		return err
	}

	return nil
}

func (m *CreateAssignUser) validateUsernames(formats strfmt.Registry) error {

	if err := validate.Required("usernames", "body", m.Usernames); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateAssignUser) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateAssignUser) UnmarshalBinary(b []byte) error {
	var res CreateAssignUser
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
