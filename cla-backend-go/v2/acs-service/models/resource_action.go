// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ResourceAction ResourceAction is entity to represent set of action, resource and service
//
// swagger:model ResourceAction
type ResourceAction struct {

	// actions
	Actions []*ResourceActionActionsItems0 `json:"actions"`

	// resource
	Resource *ResourceActionResource `json:"resource,omitempty"`

	// Unique ID reference of the service
	ServiceID string `json:"service_id,omitempty"`
}

// Validate validates this resource action
func (m *ResourceAction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourceAction) validateActions(formats strfmt.Registry) error {

	if swag.IsZero(m.Actions) { // not required
		return nil
	}

	for i := 0; i < len(m.Actions); i++ {
		if swag.IsZero(m.Actions[i]) { // not required
			continue
		}

		if m.Actions[i] != nil {
			if err := m.Actions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("actions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ResourceAction) validateResource(formats strfmt.Registry) error {

	if swag.IsZero(m.Resource) { // not required
		return nil
	}

	if m.Resource != nil {
		if err := m.Resource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resource")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResourceAction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResourceAction) UnmarshalBinary(b []byte) error {
	var res ResourceAction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ResourceActionActionsItems0 resource action actions items0
//
// swagger:model ResourceActionActionsItems0
type ResourceActionActionsItems0 struct {

	// action id
	ActionID string `json:"action_id,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this resource action actions items0
func (m *ResourceActionActionsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ResourceActionActionsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResourceActionActionsItems0) UnmarshalBinary(b []byte) error {
	var res ResourceActionActionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ResourceActionResource resource action resource
//
// swagger:model ResourceActionResource
type ResourceActionResource struct {

	// Resource name
	Name string `json:"name,omitempty"`

	// API Endpoint Path to the resource
	Path string `json:"path,omitempty"`

	// Unique ID reference of the resource
	ResourceID string `json:"resource_id,omitempty"`
}

// Validate validates this resource action resource
func (m *ResourceActionResource) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ResourceActionResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResourceActionResource) UnmarshalBinary(b []byte) error {
	var res ResourceActionResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
