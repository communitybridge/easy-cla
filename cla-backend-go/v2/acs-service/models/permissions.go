// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Permissions Permissions is entity to represent list of authorized resource list with specified action and scope
//
// swagger:model Permissions
type Permissions struct {

	// Array of action name that are managed by the permission
	Actions []string `json:"actions"`

	// Allowed is true if the request is allowed and false otherwise.
	Allowed bool `json:"allowed,omitempty"`

	// Resource name
	Resource string `json:"resource,omitempty"`

	// Array of scopes that are managed by the permission
	Scopes []*PermissionsScopesItems0 `json:"scopes"`
}

// Validate validates this permissions
func (m *Permissions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateScopes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Permissions) validateScopes(formats strfmt.Registry) error {

	if swag.IsZero(m.Scopes) { // not required
		return nil
	}

	for i := 0; i < len(m.Scopes); i++ {
		if swag.IsZero(m.Scopes[i]) { // not required
			continue
		}

		if m.Scopes[i] != nil {
			if err := m.Scopes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scopes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Permissions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Permissions) UnmarshalBinary(b []byte) error {
	var res Permissions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PermissionsScopesItems0 permissions scopes items0
//
// swagger:model PermissionsScopesItems0
type PermissionsScopesItems0 struct {

	// ID reference to scope
	ID string `json:"id,omitempty"`

	// individual -- user is an individual contributor. member -- user works for the organization which has the valid membership. non-member -- user works for the organization who's membership is expired or doest have a valid membership. staff -- user having the email address e.g user@linuxfoundation.org
	// Enum: [individual member non-member staff]
	Level string `json:"level,omitempty"`

	// Role name
	Role string `json:"role,omitempty"`

	// Scope type
	Type string `json:"type,omitempty"`
}

// Validate validates this permissions scopes items0
func (m *PermissionsScopesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLevel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var permissionsScopesItems0TypeLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["individual","member","non-member","staff"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		permissionsScopesItems0TypeLevelPropEnum = append(permissionsScopesItems0TypeLevelPropEnum, v)
	}
}

const (

	// PermissionsScopesItems0LevelIndividual captures enum value "individual"
	PermissionsScopesItems0LevelIndividual string = "individual"

	// PermissionsScopesItems0LevelMember captures enum value "member"
	PermissionsScopesItems0LevelMember string = "member"

	// PermissionsScopesItems0LevelNonMember captures enum value "non-member"
	PermissionsScopesItems0LevelNonMember string = "non-member"

	// PermissionsScopesItems0LevelStaff captures enum value "staff"
	PermissionsScopesItems0LevelStaff string = "staff"
)

// prop value enum
func (m *PermissionsScopesItems0) validateLevelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, permissionsScopesItems0TypeLevelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PermissionsScopesItems0) validateLevel(formats strfmt.Registry) error {

	if swag.IsZero(m.Level) { // not required
		return nil
	}

	// value enum
	if err := m.validateLevelEnum("level", "body", m.Level); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PermissionsScopesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PermissionsScopesItems0) UnmarshalBinary(b []byte) error {
	var res PermissionsScopesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
