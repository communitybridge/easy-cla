// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateGroup UpdateGroup is entity to represent data that is used to update group
//
// swagger:model UpdateGroup
type UpdateGroup struct {

	// Guest Group, Max Length: 250
	Description string `json:"description,omitempty"`

	// Name of the Group. e.g legal-group, linux_group
	// Pattern: ^[\w+\+=,\.@\-_]{0,128}$
	GroupName string `json:"group_name,omitempty"`

	// Title of group, Max Length: 250
	GroupTitle string `json:"group_title,omitempty"`

	// The project ID this group belongs to.
	ProjectID string `json:"project_id,omitempty"`
}

// Validate validates this update group
func (m *UpdateGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGroupName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateGroup) validateGroupName(formats strfmt.Registry) error {

	if swag.IsZero(m.GroupName) { // not required
		return nil
	}

	if err := validate.Pattern("group_name", "body", string(m.GroupName), `^[\w+\+=,\.@\-_]{0,128}$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateGroup) UnmarshalBinary(b []byte) error {
	var res UpdateGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
