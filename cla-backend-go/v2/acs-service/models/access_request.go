// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AccessRequest AccessRequest is entity to represent request data to Warden to get authorization/permissions
//
// swagger:model AccessRequest
type AccessRequest struct {

	// Action is the action that is requested on the resource
	// Required: true
	Action *string `json:"action"`

	// Array of group name that are requested
	Groups []string `json:"groups"`

	// Resource is the resource that access is requested to.
	// Required: true
	Resource *string `json:"resource"`

	// Array of role name that are requested
	Roles []string `json:"roles"`

	// Subject is the subject that is requesting access.
	// Required: true
	Subject *string `json:"subject"`

	// Username is the LF-username that is requesting access.
	Username string `json:"username,omitempty"`
}

// Validate validates this access request
func (m *AccessRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubject(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccessRequest) validateAction(formats strfmt.Registry) error {

	if err := validate.Required("action", "body", m.Action); err != nil {
		return err
	}

	return nil
}

func (m *AccessRequest) validateResource(formats strfmt.Registry) error {

	if err := validate.Required("resource", "body", m.Resource); err != nil {
		return err
	}

	return nil
}

func (m *AccessRequest) validateSubject(formats strfmt.Registry) error {

	if err := validate.Required("subject", "body", m.Subject); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccessRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccessRequest) UnmarshalBinary(b []byte) error {
	var res AccessRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
