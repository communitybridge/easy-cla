// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/communitybridge/easycla/cla-backend-go/v2/acs-service/models"
)

// DeleteRolePoliciesReader is a Reader for the DeleteRolePolicies structure.
type DeleteRolePoliciesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteRolePoliciesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteRolePoliciesNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteRolePoliciesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteRolePoliciesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteRolePoliciesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteRolePoliciesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteRolePoliciesNoContent creates a DeleteRolePoliciesNoContent with default headers values
func NewDeleteRolePoliciesNoContent() *DeleteRolePoliciesNoContent {
	return &DeleteRolePoliciesNoContent{}
}

/*DeleteRolePoliciesNoContent handles this case with default header values.

An empty response
*/
type DeleteRolePoliciesNoContent struct {
}

func (o *DeleteRolePoliciesNoContent) Error() string {
	return fmt.Sprintf("[DELETE /roles/{id}/policies/{policyId}][%d] deleteRolePoliciesNoContent ", 204)
}

func (o *DeleteRolePoliciesNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteRolePoliciesBadRequest creates a DeleteRolePoliciesBadRequest with default headers values
func NewDeleteRolePoliciesBadRequest() *DeleteRolePoliciesBadRequest {
	return &DeleteRolePoliciesBadRequest{}
}

/*DeleteRolePoliciesBadRequest handles this case with default header values.

Invalid request
*/
type DeleteRolePoliciesBadRequest struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *DeleteRolePoliciesBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /roles/{id}/policies/{policyId}][%d] deleteRolePoliciesBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteRolePoliciesBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DeleteRolePoliciesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRolePoliciesUnauthorized creates a DeleteRolePoliciesUnauthorized with default headers values
func NewDeleteRolePoliciesUnauthorized() *DeleteRolePoliciesUnauthorized {
	return &DeleteRolePoliciesUnauthorized{}
}

/*DeleteRolePoliciesUnauthorized handles this case with default header values.

Unauthorized
*/
type DeleteRolePoliciesUnauthorized struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *DeleteRolePoliciesUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /roles/{id}/policies/{policyId}][%d] deleteRolePoliciesUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteRolePoliciesUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DeleteRolePoliciesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRolePoliciesForbidden creates a DeleteRolePoliciesForbidden with default headers values
func NewDeleteRolePoliciesForbidden() *DeleteRolePoliciesForbidden {
	return &DeleteRolePoliciesForbidden{}
}

/*DeleteRolePoliciesForbidden handles this case with default header values.

Insufficient privilege to execute action
*/
type DeleteRolePoliciesForbidden struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *DeleteRolePoliciesForbidden) Error() string {
	return fmt.Sprintf("[DELETE /roles/{id}/policies/{policyId}][%d] deleteRolePoliciesForbidden  %+v", 403, o.Payload)
}

func (o *DeleteRolePoliciesForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DeleteRolePoliciesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRolePoliciesNotFound creates a DeleteRolePoliciesNotFound with default headers values
func NewDeleteRolePoliciesNotFound() *DeleteRolePoliciesNotFound {
	return &DeleteRolePoliciesNotFound{}
}

/*DeleteRolePoliciesNotFound handles this case with default header values.

Not found
*/
type DeleteRolePoliciesNotFound struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *DeleteRolePoliciesNotFound) Error() string {
	return fmt.Sprintf("[DELETE /roles/{id}/policies/{policyId}][%d] deleteRolePoliciesNotFound  %+v", 404, o.Payload)
}

func (o *DeleteRolePoliciesNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DeleteRolePoliciesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
