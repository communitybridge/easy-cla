// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new policy API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for policy API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreatePolicy(params *CreatePolicyParams, authInfo runtime.ClientAuthInfoWriter) (*CreatePolicyCreated, error)

	CreatePolicyStatement(params *CreatePolicyStatementParams, authInfo runtime.ClientAuthInfoWriter) (*CreatePolicyStatementCreated, error)

	CreateRolePolicy(params *CreateRolePolicyParams, authInfo runtime.ClientAuthInfoWriter) (*CreateRolePolicyCreated, error)

	DeletePolicy(params *DeletePolicyParams, authInfo runtime.ClientAuthInfoWriter) (*DeletePolicyNoContent, error)

	DeletePolicyStatement(params *DeletePolicyStatementParams, authInfo runtime.ClientAuthInfoWriter) (*DeletePolicyStatementNoContent, error)

	DeleteRolePolicies(params *DeleteRolePoliciesParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteRolePoliciesNoContent, error)

	GetPoliciesList(params *GetPoliciesListParams, authInfo runtime.ClientAuthInfoWriter) (*GetPoliciesListOK, error)

	GetPolicy(params *GetPolicyParams, authInfo runtime.ClientAuthInfoWriter) (*GetPolicyOK, error)

	GetRolePolicyList(params *GetRolePolicyListParams, authInfo runtime.ClientAuthInfoWriter) (*GetRolePolicyListOK, error)

	UpdatePolicy(params *UpdatePolicyParams, authInfo runtime.ClientAuthInfoWriter) (*UpdatePolicyOK, error)

	UpdatePolicyStatement(params *UpdatePolicyStatementParams, authInfo runtime.ClientAuthInfoWriter) (*UpdatePolicyStatementOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreatePolicy creates policy p r i v a t e

  Create an Access Control Policy. A policy is an entity that, when attached to an identity or resource, defines their permissions. Used by `MyAccount UI, ACS-CLI`
*/
func (a *Client) CreatePolicy(params *CreatePolicyParams, authInfo runtime.ClientAuthInfoWriter) (*CreatePolicyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createPolicy",
		Method:             "POST",
		PathPattern:        "/policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreatePolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePolicyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreatePolicyStatement creates policy statement p r i v a t e

  Create a single statement for a specified policy. Used by `MyAccount UI, ACS-CLI`
*/
func (a *Client) CreatePolicyStatement(params *CreatePolicyStatementParams, authInfo runtime.ClientAuthInfoWriter) (*CreatePolicyStatementCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePolicyStatementParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createPolicyStatement",
		Method:             "POST",
		PathPattern:        "/policies/{policyId}/statements/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreatePolicyStatementReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePolicyStatementCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createPolicyStatement: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateRolePolicy creates role policy p r i v a t e

  Attach a policy to a role. Used by `MyAccount UI, ACS-CLI`
*/
func (a *Client) CreateRolePolicy(params *CreateRolePolicyParams, authInfo runtime.ClientAuthInfoWriter) (*CreateRolePolicyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRolePolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createRolePolicy",
		Method:             "POST",
		PathPattern:        "/roles/{id}/policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateRolePolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRolePolicyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRolePolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeletePolicy deletes policy p r i v a t e and p r i v a t e

  Delete an Access Control Policy
*/
func (a *Client) DeletePolicy(params *DeletePolicyParams, authInfo runtime.ClientAuthInfoWriter) (*DeletePolicyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deletePolicy",
		Method:             "DELETE",
		PathPattern:        "/policies/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePolicyNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deletePolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeletePolicyStatement deletes policy statement p r i v a t e

  Delete a single statement for a specified policy. Used by `MyAccount UI, ACS-CLI`
*/
func (a *Client) DeletePolicyStatement(params *DeletePolicyStatementParams, authInfo runtime.ClientAuthInfoWriter) (*DeletePolicyStatementNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePolicyStatementParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deletePolicyStatement",
		Method:             "DELETE",
		PathPattern:        "/policies/{policyId}/statements/{statementId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePolicyStatementReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePolicyStatementNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deletePolicyStatement: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteRolePolicies deletes role policies p r i v a t e

  Removing policy from the role. Used by `MyAccount UI, ACS-CLI`
*/
func (a *Client) DeleteRolePolicies(params *DeleteRolePoliciesParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteRolePoliciesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRolePoliciesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRolePolicies",
		Method:             "DELETE",
		PathPattern:        "/roles/{id}/policies/{policyId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRolePoliciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRolePoliciesNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteRolePolicies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPoliciesList gets policies list p r i v a t e

  List Access Control Policies. Used by `MyAccount UI, ACS-CLI`
*/
func (a *Client) GetPoliciesList(params *GetPoliciesListParams, authInfo runtime.ClientAuthInfoWriter) (*GetPoliciesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPoliciesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPoliciesList",
		Method:             "GET",
		PathPattern:        "/policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPoliciesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPoliciesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPoliciesList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPolicy gets policy p r i v a t e

  Get an Access Control Policy from policy id (uuid) or policy name. Used by `MyAccount UI, ACS-CLI`
*/
func (a *Client) GetPolicy(params *GetPolicyParams, authInfo runtime.ClientAuthInfoWriter) (*GetPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPolicy",
		Method:             "GET",
		PathPattern:        "/policies/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRolePolicyList gets role policy list p r i v a t e

  Get list of policies attached to the role. Used by `MyAccount UI, ACS-CLI`
*/
func (a *Client) GetRolePolicyList(params *GetRolePolicyListParams, authInfo runtime.ClientAuthInfoWriter) (*GetRolePolicyListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRolePolicyListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRolePolicyList",
		Method:             "GET",
		PathPattern:        "/roles/{id}/policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRolePolicyListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRolePolicyListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRolePolicyList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdatePolicy updates policy p r i v a t e

  Update an Access Control Policy
*/
func (a *Client) UpdatePolicy(params *UpdatePolicyParams, authInfo runtime.ClientAuthInfoWriter) (*UpdatePolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updatePolicy",
		Method:             "PUT",
		PathPattern:        "/policies/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdatePolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdatePolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updatePolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdatePolicyStatement updates policy statement p r i v a t e

  Update a single statement for a specified policy. Used by `MyAccount UI, ACS-CLI`
*/
func (a *Client) UpdatePolicyStatement(params *UpdatePolicyStatementParams, authInfo runtime.ClientAuthInfoWriter) (*UpdatePolicyStatementOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePolicyStatementParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updatePolicyStatement",
		Method:             "PUT",
		PathPattern:        "/policies/{policyId}/statements/{statementId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdatePolicyStatementReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdatePolicyStatementOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updatePolicyStatement: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
