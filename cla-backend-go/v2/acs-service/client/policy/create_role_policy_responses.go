// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/communitybridge/easycla/cla-backend-go/v2/acs-service/models"
)

// CreateRolePolicyReader is a Reader for the CreateRolePolicy structure.
type CreateRolePolicyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateRolePolicyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateRolePolicyCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateRolePolicyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreateRolePolicyUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateRolePolicyForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateRolePolicyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateRolePolicyConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCreateRolePolicyCreated creates a CreateRolePolicyCreated with default headers values
func NewCreateRolePolicyCreated() *CreateRolePolicyCreated {
	return &CreateRolePolicyCreated{}
}

/*CreateRolePolicyCreated handles this case with default header values.

Created
*/
type CreateRolePolicyCreated struct {
	Payload []*models.AttachPolicy
}

func (o *CreateRolePolicyCreated) Error() string {
	return fmt.Sprintf("[POST /roles/{id}/policies][%d] createRolePolicyCreated  %+v", 201, o.Payload)
}

func (o *CreateRolePolicyCreated) GetPayload() []*models.AttachPolicy {
	return o.Payload
}

func (o *CreateRolePolicyCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRolePolicyBadRequest creates a CreateRolePolicyBadRequest with default headers values
func NewCreateRolePolicyBadRequest() *CreateRolePolicyBadRequest {
	return &CreateRolePolicyBadRequest{}
}

/*CreateRolePolicyBadRequest handles this case with default header values.

Invalid request
*/
type CreateRolePolicyBadRequest struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *CreateRolePolicyBadRequest) Error() string {
	return fmt.Sprintf("[POST /roles/{id}/policies][%d] createRolePolicyBadRequest  %+v", 400, o.Payload)
}

func (o *CreateRolePolicyBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateRolePolicyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRolePolicyUnauthorized creates a CreateRolePolicyUnauthorized with default headers values
func NewCreateRolePolicyUnauthorized() *CreateRolePolicyUnauthorized {
	return &CreateRolePolicyUnauthorized{}
}

/*CreateRolePolicyUnauthorized handles this case with default header values.

Unauthorized
*/
type CreateRolePolicyUnauthorized struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *CreateRolePolicyUnauthorized) Error() string {
	return fmt.Sprintf("[POST /roles/{id}/policies][%d] createRolePolicyUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateRolePolicyUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateRolePolicyUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRolePolicyForbidden creates a CreateRolePolicyForbidden with default headers values
func NewCreateRolePolicyForbidden() *CreateRolePolicyForbidden {
	return &CreateRolePolicyForbidden{}
}

/*CreateRolePolicyForbidden handles this case with default header values.

Insufficient privilege to execute action
*/
type CreateRolePolicyForbidden struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *CreateRolePolicyForbidden) Error() string {
	return fmt.Sprintf("[POST /roles/{id}/policies][%d] createRolePolicyForbidden  %+v", 403, o.Payload)
}

func (o *CreateRolePolicyForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateRolePolicyForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRolePolicyNotFound creates a CreateRolePolicyNotFound with default headers values
func NewCreateRolePolicyNotFound() *CreateRolePolicyNotFound {
	return &CreateRolePolicyNotFound{}
}

/*CreateRolePolicyNotFound handles this case with default header values.

Not found
*/
type CreateRolePolicyNotFound struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *CreateRolePolicyNotFound) Error() string {
	return fmt.Sprintf("[POST /roles/{id}/policies][%d] createRolePolicyNotFound  %+v", 404, o.Payload)
}

func (o *CreateRolePolicyNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateRolePolicyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRolePolicyConflict creates a CreateRolePolicyConflict with default headers values
func NewCreateRolePolicyConflict() *CreateRolePolicyConflict {
	return &CreateRolePolicyConflict{}
}

/*CreateRolePolicyConflict handles this case with default header values.

Duplicate Resource
*/
type CreateRolePolicyConflict struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *CreateRolePolicyConflict) Error() string {
	return fmt.Sprintf("[POST /roles/{id}/policies][%d] createRolePolicyConflict  %+v", 409, o.Payload)
}

func (o *CreateRolePolicyConflict) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateRolePolicyConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
