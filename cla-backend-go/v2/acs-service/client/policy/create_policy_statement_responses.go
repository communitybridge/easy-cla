// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/communitybridge/easycla/cla-backend-go/v2/acs-service/models"
)

// CreatePolicyStatementReader is a Reader for the CreatePolicyStatement structure.
type CreatePolicyStatementReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreatePolicyStatementReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreatePolicyStatementCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreatePolicyStatementBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreatePolicyStatementUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreatePolicyStatementForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreatePolicyStatementNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreatePolicyStatementConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCreatePolicyStatementCreated creates a CreatePolicyStatementCreated with default headers values
func NewCreatePolicyStatementCreated() *CreatePolicyStatementCreated {
	return &CreatePolicyStatementCreated{}
}

/*CreatePolicyStatementCreated handles this case with default header values.

Created
*/
type CreatePolicyStatementCreated struct {
	Payload *models.Statement
}

func (o *CreatePolicyStatementCreated) Error() string {
	return fmt.Sprintf("[POST /policies/{policyId}/statements/][%d] createPolicyStatementCreated  %+v", 201, o.Payload)
}

func (o *CreatePolicyStatementCreated) GetPayload() *models.Statement {
	return o.Payload
}

func (o *CreatePolicyStatementCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Statement)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreatePolicyStatementBadRequest creates a CreatePolicyStatementBadRequest with default headers values
func NewCreatePolicyStatementBadRequest() *CreatePolicyStatementBadRequest {
	return &CreatePolicyStatementBadRequest{}
}

/*CreatePolicyStatementBadRequest handles this case with default header values.

Invalid request
*/
type CreatePolicyStatementBadRequest struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *CreatePolicyStatementBadRequest) Error() string {
	return fmt.Sprintf("[POST /policies/{policyId}/statements/][%d] createPolicyStatementBadRequest  %+v", 400, o.Payload)
}

func (o *CreatePolicyStatementBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreatePolicyStatementBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreatePolicyStatementUnauthorized creates a CreatePolicyStatementUnauthorized with default headers values
func NewCreatePolicyStatementUnauthorized() *CreatePolicyStatementUnauthorized {
	return &CreatePolicyStatementUnauthorized{}
}

/*CreatePolicyStatementUnauthorized handles this case with default header values.

Unauthorized
*/
type CreatePolicyStatementUnauthorized struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *CreatePolicyStatementUnauthorized) Error() string {
	return fmt.Sprintf("[POST /policies/{policyId}/statements/][%d] createPolicyStatementUnauthorized  %+v", 401, o.Payload)
}

func (o *CreatePolicyStatementUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreatePolicyStatementUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreatePolicyStatementForbidden creates a CreatePolicyStatementForbidden with default headers values
func NewCreatePolicyStatementForbidden() *CreatePolicyStatementForbidden {
	return &CreatePolicyStatementForbidden{}
}

/*CreatePolicyStatementForbidden handles this case with default header values.

Insufficient privilege to execute action
*/
type CreatePolicyStatementForbidden struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *CreatePolicyStatementForbidden) Error() string {
	return fmt.Sprintf("[POST /policies/{policyId}/statements/][%d] createPolicyStatementForbidden  %+v", 403, o.Payload)
}

func (o *CreatePolicyStatementForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreatePolicyStatementForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreatePolicyStatementNotFound creates a CreatePolicyStatementNotFound with default headers values
func NewCreatePolicyStatementNotFound() *CreatePolicyStatementNotFound {
	return &CreatePolicyStatementNotFound{}
}

/*CreatePolicyStatementNotFound handles this case with default header values.

Not found
*/
type CreatePolicyStatementNotFound struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *CreatePolicyStatementNotFound) Error() string {
	return fmt.Sprintf("[POST /policies/{policyId}/statements/][%d] createPolicyStatementNotFound  %+v", 404, o.Payload)
}

func (o *CreatePolicyStatementNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreatePolicyStatementNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreatePolicyStatementConflict creates a CreatePolicyStatementConflict with default headers values
func NewCreatePolicyStatementConflict() *CreatePolicyStatementConflict {
	return &CreatePolicyStatementConflict{}
}

/*CreatePolicyStatementConflict handles this case with default header values.

Duplicate Resource
*/
type CreatePolicyStatementConflict struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *CreatePolicyStatementConflict) Error() string {
	return fmt.Sprintf("[POST /policies/{policyId}/statements/][%d] createPolicyStatementConflict  %+v", 409, o.Payload)
}

func (o *CreatePolicyStatementConflict) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreatePolicyStatementConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
