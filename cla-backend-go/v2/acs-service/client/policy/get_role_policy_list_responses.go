// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/communitybridge/easycla/cla-backend-go/v2/acs-service/models"
)

// GetRolePolicyListReader is a Reader for the GetRolePolicyList structure.
type GetRolePolicyListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRolePolicyListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRolePolicyListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetRolePolicyListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetRolePolicyListUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetRolePolicyListForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRolePolicyListNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetRolePolicyListOK creates a GetRolePolicyListOK with default headers values
func NewGetRolePolicyListOK() *GetRolePolicyListOK {
	return &GetRolePolicyListOK{}
}

/*GetRolePolicyListOK handles this case with default header values.

Success
*/
type GetRolePolicyListOK struct {
	Payload []*models.AttachPolicy
}

func (o *GetRolePolicyListOK) Error() string {
	return fmt.Sprintf("[GET /roles/{id}/policies][%d] getRolePolicyListOK  %+v", 200, o.Payload)
}

func (o *GetRolePolicyListOK) GetPayload() []*models.AttachPolicy {
	return o.Payload
}

func (o *GetRolePolicyListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRolePolicyListBadRequest creates a GetRolePolicyListBadRequest with default headers values
func NewGetRolePolicyListBadRequest() *GetRolePolicyListBadRequest {
	return &GetRolePolicyListBadRequest{}
}

/*GetRolePolicyListBadRequest handles this case with default header values.

Invalid request
*/
type GetRolePolicyListBadRequest struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetRolePolicyListBadRequest) Error() string {
	return fmt.Sprintf("[GET /roles/{id}/policies][%d] getRolePolicyListBadRequest  %+v", 400, o.Payload)
}

func (o *GetRolePolicyListBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetRolePolicyListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRolePolicyListUnauthorized creates a GetRolePolicyListUnauthorized with default headers values
func NewGetRolePolicyListUnauthorized() *GetRolePolicyListUnauthorized {
	return &GetRolePolicyListUnauthorized{}
}

/*GetRolePolicyListUnauthorized handles this case with default header values.

Unauthorized
*/
type GetRolePolicyListUnauthorized struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetRolePolicyListUnauthorized) Error() string {
	return fmt.Sprintf("[GET /roles/{id}/policies][%d] getRolePolicyListUnauthorized  %+v", 401, o.Payload)
}

func (o *GetRolePolicyListUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetRolePolicyListUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRolePolicyListForbidden creates a GetRolePolicyListForbidden with default headers values
func NewGetRolePolicyListForbidden() *GetRolePolicyListForbidden {
	return &GetRolePolicyListForbidden{}
}

/*GetRolePolicyListForbidden handles this case with default header values.

Insufficient privilege to execute action
*/
type GetRolePolicyListForbidden struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetRolePolicyListForbidden) Error() string {
	return fmt.Sprintf("[GET /roles/{id}/policies][%d] getRolePolicyListForbidden  %+v", 403, o.Payload)
}

func (o *GetRolePolicyListForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetRolePolicyListForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRolePolicyListNotFound creates a GetRolePolicyListNotFound with default headers values
func NewGetRolePolicyListNotFound() *GetRolePolicyListNotFound {
	return &GetRolePolicyListNotFound{}
}

/*GetRolePolicyListNotFound handles this case with default header values.

Not found
*/
type GetRolePolicyListNotFound struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetRolePolicyListNotFound) Error() string {
	return fmt.Sprintf("[GET /roles/{id}/policies][%d] getRolePolicyListNotFound  %+v", 404, o.Payload)
}

func (o *GetRolePolicyListNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetRolePolicyListNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
