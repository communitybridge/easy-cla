// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/communitybridge/easycla/cla-backend-go/v2/acs-service/models"
)

// CreatePolicyReader is a Reader for the CreatePolicy structure.
type CreatePolicyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreatePolicyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreatePolicyCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreatePolicyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreatePolicyUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreatePolicyForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreatePolicyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreatePolicyConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCreatePolicyCreated creates a CreatePolicyCreated with default headers values
func NewCreatePolicyCreated() *CreatePolicyCreated {
	return &CreatePolicyCreated{}
}

/*CreatePolicyCreated handles this case with default header values.

Created
*/
type CreatePolicyCreated struct {
	Payload *models.Policy
}

func (o *CreatePolicyCreated) Error() string {
	return fmt.Sprintf("[POST /policies][%d] createPolicyCreated  %+v", 201, o.Payload)
}

func (o *CreatePolicyCreated) GetPayload() *models.Policy {
	return o.Payload
}

func (o *CreatePolicyCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Policy)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreatePolicyBadRequest creates a CreatePolicyBadRequest with default headers values
func NewCreatePolicyBadRequest() *CreatePolicyBadRequest {
	return &CreatePolicyBadRequest{}
}

/*CreatePolicyBadRequest handles this case with default header values.

Invalid request
*/
type CreatePolicyBadRequest struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *CreatePolicyBadRequest) Error() string {
	return fmt.Sprintf("[POST /policies][%d] createPolicyBadRequest  %+v", 400, o.Payload)
}

func (o *CreatePolicyBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreatePolicyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreatePolicyUnauthorized creates a CreatePolicyUnauthorized with default headers values
func NewCreatePolicyUnauthorized() *CreatePolicyUnauthorized {
	return &CreatePolicyUnauthorized{}
}

/*CreatePolicyUnauthorized handles this case with default header values.

Unauthorized
*/
type CreatePolicyUnauthorized struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *CreatePolicyUnauthorized) Error() string {
	return fmt.Sprintf("[POST /policies][%d] createPolicyUnauthorized  %+v", 401, o.Payload)
}

func (o *CreatePolicyUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreatePolicyUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreatePolicyForbidden creates a CreatePolicyForbidden with default headers values
func NewCreatePolicyForbidden() *CreatePolicyForbidden {
	return &CreatePolicyForbidden{}
}

/*CreatePolicyForbidden handles this case with default header values.

Insufficient privilege to execute action
*/
type CreatePolicyForbidden struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *CreatePolicyForbidden) Error() string {
	return fmt.Sprintf("[POST /policies][%d] createPolicyForbidden  %+v", 403, o.Payload)
}

func (o *CreatePolicyForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreatePolicyForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreatePolicyNotFound creates a CreatePolicyNotFound with default headers values
func NewCreatePolicyNotFound() *CreatePolicyNotFound {
	return &CreatePolicyNotFound{}
}

/*CreatePolicyNotFound handles this case with default header values.

Not found
*/
type CreatePolicyNotFound struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *CreatePolicyNotFound) Error() string {
	return fmt.Sprintf("[POST /policies][%d] createPolicyNotFound  %+v", 404, o.Payload)
}

func (o *CreatePolicyNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreatePolicyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreatePolicyConflict creates a CreatePolicyConflict with default headers values
func NewCreatePolicyConflict() *CreatePolicyConflict {
	return &CreatePolicyConflict{}
}

/*CreatePolicyConflict handles this case with default header values.

Duplicate Resource
*/
type CreatePolicyConflict struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *CreatePolicyConflict) Error() string {
	return fmt.Sprintf("[POST /policies][%d] createPolicyConflict  %+v", 409, o.Payload)
}

func (o *CreatePolicyConflict) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreatePolicyConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
