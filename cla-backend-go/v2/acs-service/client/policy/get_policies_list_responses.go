// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/communitybridge/easycla/cla-backend-go/v2/acs-service/models"
)

// GetPoliciesListReader is a Reader for the GetPoliciesList structure.
type GetPoliciesListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPoliciesListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetPoliciesListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetPoliciesListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetPoliciesListUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetPoliciesListForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetPoliciesListNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetPoliciesListOK creates a GetPoliciesListOK with default headers values
func NewGetPoliciesListOK() *GetPoliciesListOK {
	return &GetPoliciesListOK{}
}

/*GetPoliciesListOK handles this case with default header values.

List of Policy
*/
type GetPoliciesListOK struct {
}

func (o *GetPoliciesListOK) Error() string {
	return fmt.Sprintf("[GET /policies][%d] getPoliciesListOK ", 200)
}

func (o *GetPoliciesListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPoliciesListBadRequest creates a GetPoliciesListBadRequest with default headers values
func NewGetPoliciesListBadRequest() *GetPoliciesListBadRequest {
	return &GetPoliciesListBadRequest{}
}

/*GetPoliciesListBadRequest handles this case with default header values.

Invalid request
*/
type GetPoliciesListBadRequest struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetPoliciesListBadRequest) Error() string {
	return fmt.Sprintf("[GET /policies][%d] getPoliciesListBadRequest  %+v", 400, o.Payload)
}

func (o *GetPoliciesListBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetPoliciesListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPoliciesListUnauthorized creates a GetPoliciesListUnauthorized with default headers values
func NewGetPoliciesListUnauthorized() *GetPoliciesListUnauthorized {
	return &GetPoliciesListUnauthorized{}
}

/*GetPoliciesListUnauthorized handles this case with default header values.

Unauthorized
*/
type GetPoliciesListUnauthorized struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetPoliciesListUnauthorized) Error() string {
	return fmt.Sprintf("[GET /policies][%d] getPoliciesListUnauthorized  %+v", 401, o.Payload)
}

func (o *GetPoliciesListUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetPoliciesListUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPoliciesListForbidden creates a GetPoliciesListForbidden with default headers values
func NewGetPoliciesListForbidden() *GetPoliciesListForbidden {
	return &GetPoliciesListForbidden{}
}

/*GetPoliciesListForbidden handles this case with default header values.

Insufficient privilege to execute action
*/
type GetPoliciesListForbidden struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetPoliciesListForbidden) Error() string {
	return fmt.Sprintf("[GET /policies][%d] getPoliciesListForbidden  %+v", 403, o.Payload)
}

func (o *GetPoliciesListForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetPoliciesListForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPoliciesListNotFound creates a GetPoliciesListNotFound with default headers values
func NewGetPoliciesListNotFound() *GetPoliciesListNotFound {
	return &GetPoliciesListNotFound{}
}

/*GetPoliciesListNotFound handles this case with default header values.

Not found
*/
type GetPoliciesListNotFound struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetPoliciesListNotFound) Error() string {
	return fmt.Sprintf("[GET /policies][%d] getPoliciesListNotFound  %+v", 404, o.Payload)
}

func (o *GetPoliciesListNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetPoliciesListNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
