// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/communitybridge/easycla/cla-backend-go/v2/acs-service/models"
)

// UpdatePolicyStatementReader is a Reader for the UpdatePolicyStatement structure.
type UpdatePolicyStatementReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdatePolicyStatementReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdatePolicyStatementOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdatePolicyStatementBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdatePolicyStatementUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdatePolicyStatementForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdatePolicyStatementNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdatePolicyStatementOK creates a UpdatePolicyStatementOK with default headers values
func NewUpdatePolicyStatementOK() *UpdatePolicyStatementOK {
	return &UpdatePolicyStatementOK{}
}

/*UpdatePolicyStatementOK handles this case with default header values.

statement
*/
type UpdatePolicyStatementOK struct {
	Payload *models.Statement
}

func (o *UpdatePolicyStatementOK) Error() string {
	return fmt.Sprintf("[PUT /policies/{policyId}/statements/{statementId}][%d] updatePolicyStatementOK  %+v", 200, o.Payload)
}

func (o *UpdatePolicyStatementOK) GetPayload() *models.Statement {
	return o.Payload
}

func (o *UpdatePolicyStatementOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Statement)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePolicyStatementBadRequest creates a UpdatePolicyStatementBadRequest with default headers values
func NewUpdatePolicyStatementBadRequest() *UpdatePolicyStatementBadRequest {
	return &UpdatePolicyStatementBadRequest{}
}

/*UpdatePolicyStatementBadRequest handles this case with default header values.

Invalid request
*/
type UpdatePolicyStatementBadRequest struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *UpdatePolicyStatementBadRequest) Error() string {
	return fmt.Sprintf("[PUT /policies/{policyId}/statements/{statementId}][%d] updatePolicyStatementBadRequest  %+v", 400, o.Payload)
}

func (o *UpdatePolicyStatementBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdatePolicyStatementBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePolicyStatementUnauthorized creates a UpdatePolicyStatementUnauthorized with default headers values
func NewUpdatePolicyStatementUnauthorized() *UpdatePolicyStatementUnauthorized {
	return &UpdatePolicyStatementUnauthorized{}
}

/*UpdatePolicyStatementUnauthorized handles this case with default header values.

Unauthorized
*/
type UpdatePolicyStatementUnauthorized struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *UpdatePolicyStatementUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /policies/{policyId}/statements/{statementId}][%d] updatePolicyStatementUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdatePolicyStatementUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdatePolicyStatementUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePolicyStatementForbidden creates a UpdatePolicyStatementForbidden with default headers values
func NewUpdatePolicyStatementForbidden() *UpdatePolicyStatementForbidden {
	return &UpdatePolicyStatementForbidden{}
}

/*UpdatePolicyStatementForbidden handles this case with default header values.

Insufficient privilege to execute action
*/
type UpdatePolicyStatementForbidden struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *UpdatePolicyStatementForbidden) Error() string {
	return fmt.Sprintf("[PUT /policies/{policyId}/statements/{statementId}][%d] updatePolicyStatementForbidden  %+v", 403, o.Payload)
}

func (o *UpdatePolicyStatementForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdatePolicyStatementForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePolicyStatementNotFound creates a UpdatePolicyStatementNotFound with default headers values
func NewUpdatePolicyStatementNotFound() *UpdatePolicyStatementNotFound {
	return &UpdatePolicyStatementNotFound{}
}

/*UpdatePolicyStatementNotFound handles this case with default header values.

Not found
*/
type UpdatePolicyStatementNotFound struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *UpdatePolicyStatementNotFound) Error() string {
	return fmt.Sprintf("[PUT /policies/{policyId}/statements/{statementId}][%d] updatePolicyStatementNotFound  %+v", 404, o.Payload)
}

func (o *UpdatePolicyStatementNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdatePolicyStatementNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
