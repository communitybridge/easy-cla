// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package invite

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/communitybridge/easycla/cla-backend-go/v2/acs-service/models"
)

// CreateResendInviteReader is a Reader for the CreateResendInvite structure.
type CreateResendInviteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateResendInviteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateResendInviteCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateResendInviteBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreateResendInviteUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateResendInviteForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateResendInviteNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateResendInviteConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCreateResendInviteCreated creates a CreateResendInviteCreated with default headers values
func NewCreateResendInviteCreated() *CreateResendInviteCreated {
	return &CreateResendInviteCreated{}
}

/*CreateResendInviteCreated handles this case with default header values.

Created
*/
type CreateResendInviteCreated struct {
	Payload *models.Invite
}

func (o *CreateResendInviteCreated) Error() string {
	return fmt.Sprintf("[POST /invites/{id}/resend][%d] createResendInviteCreated  %+v", 201, o.Payload)
}

func (o *CreateResendInviteCreated) GetPayload() *models.Invite {
	return o.Payload
}

func (o *CreateResendInviteCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Invite)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateResendInviteBadRequest creates a CreateResendInviteBadRequest with default headers values
func NewCreateResendInviteBadRequest() *CreateResendInviteBadRequest {
	return &CreateResendInviteBadRequest{}
}

/*CreateResendInviteBadRequest handles this case with default header values.

Invalid request
*/
type CreateResendInviteBadRequest struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *CreateResendInviteBadRequest) Error() string {
	return fmt.Sprintf("[POST /invites/{id}/resend][%d] createResendInviteBadRequest  %+v", 400, o.Payload)
}

func (o *CreateResendInviteBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateResendInviteBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateResendInviteUnauthorized creates a CreateResendInviteUnauthorized with default headers values
func NewCreateResendInviteUnauthorized() *CreateResendInviteUnauthorized {
	return &CreateResendInviteUnauthorized{}
}

/*CreateResendInviteUnauthorized handles this case with default header values.

Unauthorized
*/
type CreateResendInviteUnauthorized struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *CreateResendInviteUnauthorized) Error() string {
	return fmt.Sprintf("[POST /invites/{id}/resend][%d] createResendInviteUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateResendInviteUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateResendInviteUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateResendInviteForbidden creates a CreateResendInviteForbidden with default headers values
func NewCreateResendInviteForbidden() *CreateResendInviteForbidden {
	return &CreateResendInviteForbidden{}
}

/*CreateResendInviteForbidden handles this case with default header values.

Insufficient privilege to execute action
*/
type CreateResendInviteForbidden struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *CreateResendInviteForbidden) Error() string {
	return fmt.Sprintf("[POST /invites/{id}/resend][%d] createResendInviteForbidden  %+v", 403, o.Payload)
}

func (o *CreateResendInviteForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateResendInviteForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateResendInviteNotFound creates a CreateResendInviteNotFound with default headers values
func NewCreateResendInviteNotFound() *CreateResendInviteNotFound {
	return &CreateResendInviteNotFound{}
}

/*CreateResendInviteNotFound handles this case with default header values.

Not found
*/
type CreateResendInviteNotFound struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *CreateResendInviteNotFound) Error() string {
	return fmt.Sprintf("[POST /invites/{id}/resend][%d] createResendInviteNotFound  %+v", 404, o.Payload)
}

func (o *CreateResendInviteNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateResendInviteNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateResendInviteConflict creates a CreateResendInviteConflict with default headers values
func NewCreateResendInviteConflict() *CreateResendInviteConflict {
	return &CreateResendInviteConflict{}
}

/*CreateResendInviteConflict handles this case with default header values.

Duplicate Resource
*/
type CreateResendInviteConflict struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *CreateResendInviteConflict) Error() string {
	return fmt.Sprintf("[POST /invites/{id}/resend][%d] createResendInviteConflict  %+v", 409, o.Payload)
}

func (o *CreateResendInviteConflict) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateResendInviteConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
