// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package invite

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new invite API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for invite API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateResendInvite(params *CreateResendInviteParams, authInfo runtime.ClientAuthInfoWriter) (*CreateResendInviteCreated, error)

	CreateUserInvite(params *CreateUserInviteParams, authInfo runtime.ClientAuthInfoWriter) (*CreateUserInviteCreated, error)

	GetInvite(params *GetInviteParams, authInfo runtime.ClientAuthInfoWriter) (*GetInviteOK, error)

	GetInvites(params *GetInvitesParams, authInfo runtime.ClientAuthInfoWriter) (*GetInvitesOK, error)

	PartialUpdate(params *PartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*PartialUpdateNoContent, error)

	UpdateInvite(params *UpdateInviteParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateInviteOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateResendInvite resends the user invite

  Admins can invite users to the portal through automated email(s) created by the platform services so  that guest users can access platform resources.
*/
func (a *Client) CreateResendInvite(params *CreateResendInviteParams, authInfo runtime.ClientAuthInfoWriter) (*CreateResendInviteCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateResendInviteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createResendInvite",
		Method:             "POST",
		PathPattern:        "/invites/{id}/resend",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateResendInviteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateResendInviteCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createResendInvite: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateUserInvite sends user invite

  Admins can invite users to the portal through automated email(s) created by the platform services so  that guest users can access platform resources.
### When contact NOT exists in Salesforce:
- Create a contact in Salesforce before sending the invite (email, org, if the name is not provided then use unknown)
- Send an email to join LFx platform
- On User acceptance, create record in ACS
### When contact already exists in Salesforce and ACS:
- Give user direct access without any email invite
- Update user and account association in Salesforce if needed
*/
func (a *Client) CreateUserInvite(params *CreateUserInviteParams, authInfo runtime.ClientAuthInfoWriter) (*CreateUserInviteCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUserInviteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createUserInvite",
		Method:             "POST",
		PathPattern:        "/invites/sendinvite",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateUserInviteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateUserInviteCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createUserInvite: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetInvite gets user invite

  Get a single invite details by invite id.
*/
func (a *Client) GetInvite(params *GetInviteParams, authInfo runtime.ClientAuthInfoWriter) (*GetInviteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInviteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInvite",
		Method:             "GET",
		PathPattern:        "/invites/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInviteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInviteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getInvite: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetInvites gets user invites list

  Get List the user invites by Organization.
*/
func (a *Client) GetInvites(params *GetInvitesParams, authInfo runtime.ClientAuthInfoWriter) (*GetInvitesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInvitesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInvites",
		Method:             "GET",
		PathPattern:        "/invites",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInvitesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInvitesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getInvites: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PartialUpdate updates partial user invite

  Partial update an existing invite
*/
func (a *Client) PartialUpdate(params *PartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*PartialUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "partialUpdate",
		Method:             "PATCH",
		PathPattern:        "/invites/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PartialUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for partialUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateInvite updates user invite

  Update an existing invite
*/
func (a *Client) UpdateInvite(params *UpdateInviteParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateInviteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateInviteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateInvite",
		Method:             "PUT",
		PathPattern:        "/invites/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateInviteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateInviteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateInvite: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
