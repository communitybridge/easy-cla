// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package invite

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/communitybridge/easycla/cla-backend-go/v2/acs-service/models"
)

// UpdateInviteReader is a Reader for the UpdateInvite structure.
type UpdateInviteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateInviteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateInviteOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateInviteBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateInviteUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateInviteForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateInviteNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateInviteOK creates a UpdateInviteOK with default headers values
func NewUpdateInviteOK() *UpdateInviteOK {
	return &UpdateInviteOK{}
}

/*UpdateInviteOK handles this case with default header values.

Success
*/
type UpdateInviteOK struct {
	Payload *models.Invite
}

func (o *UpdateInviteOK) Error() string {
	return fmt.Sprintf("[PUT /invites/{id}][%d] updateInviteOK  %+v", 200, o.Payload)
}

func (o *UpdateInviteOK) GetPayload() *models.Invite {
	return o.Payload
}

func (o *UpdateInviteOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Invite)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInviteBadRequest creates a UpdateInviteBadRequest with default headers values
func NewUpdateInviteBadRequest() *UpdateInviteBadRequest {
	return &UpdateInviteBadRequest{}
}

/*UpdateInviteBadRequest handles this case with default header values.

Invalid request
*/
type UpdateInviteBadRequest struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *UpdateInviteBadRequest) Error() string {
	return fmt.Sprintf("[PUT /invites/{id}][%d] updateInviteBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateInviteBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateInviteBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInviteUnauthorized creates a UpdateInviteUnauthorized with default headers values
func NewUpdateInviteUnauthorized() *UpdateInviteUnauthorized {
	return &UpdateInviteUnauthorized{}
}

/*UpdateInviteUnauthorized handles this case with default header values.

Unauthorized
*/
type UpdateInviteUnauthorized struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *UpdateInviteUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /invites/{id}][%d] updateInviteUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateInviteUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateInviteUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInviteForbidden creates a UpdateInviteForbidden with default headers values
func NewUpdateInviteForbidden() *UpdateInviteForbidden {
	return &UpdateInviteForbidden{}
}

/*UpdateInviteForbidden handles this case with default header values.

Insufficient privilege to execute action
*/
type UpdateInviteForbidden struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *UpdateInviteForbidden) Error() string {
	return fmt.Sprintf("[PUT /invites/{id}][%d] updateInviteForbidden  %+v", 403, o.Payload)
}

func (o *UpdateInviteForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateInviteForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInviteNotFound creates a UpdateInviteNotFound with default headers values
func NewUpdateInviteNotFound() *UpdateInviteNotFound {
	return &UpdateInviteNotFound{}
}

/*UpdateInviteNotFound handles this case with default header values.

Not found
*/
type UpdateInviteNotFound struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *UpdateInviteNotFound) Error() string {
	return fmt.Sprintf("[PUT /invites/{id}][%d] updateInviteNotFound  %+v", 404, o.Payload)
}

func (o *UpdateInviteNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateInviteNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
