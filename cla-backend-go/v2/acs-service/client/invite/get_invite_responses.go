// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package invite

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/communitybridge/easycla/cla-backend-go/v2/acs-service/models"
)

// GetInviteReader is a Reader for the GetInvite structure.
type GetInviteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetInviteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetInviteOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetInviteBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetInviteUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetInviteForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetInviteNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetInviteOK creates a GetInviteOK with default headers values
func NewGetInviteOK() *GetInviteOK {
	return &GetInviteOK{}
}

/*GetInviteOK handles this case with default header values.

Success
*/
type GetInviteOK struct {
	Payload *models.Invite
}

func (o *GetInviteOK) Error() string {
	return fmt.Sprintf("[GET /invites/{id}][%d] getInviteOK  %+v", 200, o.Payload)
}

func (o *GetInviteOK) GetPayload() *models.Invite {
	return o.Payload
}

func (o *GetInviteOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Invite)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInviteBadRequest creates a GetInviteBadRequest with default headers values
func NewGetInviteBadRequest() *GetInviteBadRequest {
	return &GetInviteBadRequest{}
}

/*GetInviteBadRequest handles this case with default header values.

Invalid request
*/
type GetInviteBadRequest struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetInviteBadRequest) Error() string {
	return fmt.Sprintf("[GET /invites/{id}][%d] getInviteBadRequest  %+v", 400, o.Payload)
}

func (o *GetInviteBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetInviteBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInviteUnauthorized creates a GetInviteUnauthorized with default headers values
func NewGetInviteUnauthorized() *GetInviteUnauthorized {
	return &GetInviteUnauthorized{}
}

/*GetInviteUnauthorized handles this case with default header values.

Unauthorized
*/
type GetInviteUnauthorized struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetInviteUnauthorized) Error() string {
	return fmt.Sprintf("[GET /invites/{id}][%d] getInviteUnauthorized  %+v", 401, o.Payload)
}

func (o *GetInviteUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetInviteUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInviteForbidden creates a GetInviteForbidden with default headers values
func NewGetInviteForbidden() *GetInviteForbidden {
	return &GetInviteForbidden{}
}

/*GetInviteForbidden handles this case with default header values.

Insufficient privilege to execute action
*/
type GetInviteForbidden struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetInviteForbidden) Error() string {
	return fmt.Sprintf("[GET /invites/{id}][%d] getInviteForbidden  %+v", 403, o.Payload)
}

func (o *GetInviteForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetInviteForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInviteNotFound creates a GetInviteNotFound with default headers values
func NewGetInviteNotFound() *GetInviteNotFound {
	return &GetInviteNotFound{}
}

/*GetInviteNotFound handles this case with default header values.

Not found
*/
type GetInviteNotFound struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetInviteNotFound) Error() string {
	return fmt.Sprintf("[GET /invites/{id}][%d] getInviteNotFound  %+v", 404, o.Payload)
}

func (o *GetInviteNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetInviteNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
