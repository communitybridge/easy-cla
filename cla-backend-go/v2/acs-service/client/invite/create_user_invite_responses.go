// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package invite

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/communitybridge/easycla/cla-backend-go/v2/acs-service/models"
)

// CreateUserInviteReader is a Reader for the CreateUserInvite structure.
type CreateUserInviteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateUserInviteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateUserInviteCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateUserInviteBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreateUserInviteUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateUserInviteForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateUserInviteNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateUserInviteConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCreateUserInviteCreated creates a CreateUserInviteCreated with default headers values
func NewCreateUserInviteCreated() *CreateUserInviteCreated {
	return &CreateUserInviteCreated{}
}

/*CreateUserInviteCreated handles this case with default header values.

Created
*/
type CreateUserInviteCreated struct {
	Payload *models.Invite
}

func (o *CreateUserInviteCreated) Error() string {
	return fmt.Sprintf("[POST /invites/sendinvite][%d] createUserInviteCreated  %+v", 201, o.Payload)
}

func (o *CreateUserInviteCreated) GetPayload() *models.Invite {
	return o.Payload
}

func (o *CreateUserInviteCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Invite)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateUserInviteBadRequest creates a CreateUserInviteBadRequest with default headers values
func NewCreateUserInviteBadRequest() *CreateUserInviteBadRequest {
	return &CreateUserInviteBadRequest{}
}

/*CreateUserInviteBadRequest handles this case with default header values.

Invalid request
*/
type CreateUserInviteBadRequest struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *CreateUserInviteBadRequest) Error() string {
	return fmt.Sprintf("[POST /invites/sendinvite][%d] createUserInviteBadRequest  %+v", 400, o.Payload)
}

func (o *CreateUserInviteBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateUserInviteBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateUserInviteUnauthorized creates a CreateUserInviteUnauthorized with default headers values
func NewCreateUserInviteUnauthorized() *CreateUserInviteUnauthorized {
	return &CreateUserInviteUnauthorized{}
}

/*CreateUserInviteUnauthorized handles this case with default header values.

Unauthorized
*/
type CreateUserInviteUnauthorized struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *CreateUserInviteUnauthorized) Error() string {
	return fmt.Sprintf("[POST /invites/sendinvite][%d] createUserInviteUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateUserInviteUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateUserInviteUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateUserInviteForbidden creates a CreateUserInviteForbidden with default headers values
func NewCreateUserInviteForbidden() *CreateUserInviteForbidden {
	return &CreateUserInviteForbidden{}
}

/*CreateUserInviteForbidden handles this case with default header values.

Insufficient privilege to execute action
*/
type CreateUserInviteForbidden struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *CreateUserInviteForbidden) Error() string {
	return fmt.Sprintf("[POST /invites/sendinvite][%d] createUserInviteForbidden  %+v", 403, o.Payload)
}

func (o *CreateUserInviteForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateUserInviteForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateUserInviteNotFound creates a CreateUserInviteNotFound with default headers values
func NewCreateUserInviteNotFound() *CreateUserInviteNotFound {
	return &CreateUserInviteNotFound{}
}

/*CreateUserInviteNotFound handles this case with default header values.

Not found
*/
type CreateUserInviteNotFound struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *CreateUserInviteNotFound) Error() string {
	return fmt.Sprintf("[POST /invites/sendinvite][%d] createUserInviteNotFound  %+v", 404, o.Payload)
}

func (o *CreateUserInviteNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateUserInviteNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateUserInviteConflict creates a CreateUserInviteConflict with default headers values
func NewCreateUserInviteConflict() *CreateUserInviteConflict {
	return &CreateUserInviteConflict{}
}

/*CreateUserInviteConflict handles this case with default header values.

Duplicate Resource
*/
type CreateUserInviteConflict struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *CreateUserInviteConflict) Error() string {
	return fmt.Sprintf("[POST /invites/sendinvite][%d] createUserInviteConflict  %+v", 409, o.Payload)
}

func (o *CreateUserInviteConflict) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateUserInviteConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
