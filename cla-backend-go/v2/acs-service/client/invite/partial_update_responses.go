// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package invite

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/communitybridge/easycla/cla-backend-go/v2/acs-service/models"
)

// PartialUpdateReader is a Reader for the PartialUpdate structure.
type PartialUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PartialUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPartialUpdateNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPartialUpdateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPartialUpdateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPartialUpdateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPartialUpdateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPartialUpdateNoContent creates a PartialUpdateNoContent with default headers values
func NewPartialUpdateNoContent() *PartialUpdateNoContent {
	return &PartialUpdateNoContent{}
}

/*PartialUpdateNoContent handles this case with default header values.

Invite is entity to represent identity that has set of access and permissions
*/
type PartialUpdateNoContent struct {
}

func (o *PartialUpdateNoContent) Error() string {
	return fmt.Sprintf("[PATCH /invites/{id}][%d] partialUpdateNoContent ", 204)
}

func (o *PartialUpdateNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPartialUpdateBadRequest creates a PartialUpdateBadRequest with default headers values
func NewPartialUpdateBadRequest() *PartialUpdateBadRequest {
	return &PartialUpdateBadRequest{}
}

/*PartialUpdateBadRequest handles this case with default header values.

Invalid request
*/
type PartialUpdateBadRequest struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *PartialUpdateBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /invites/{id}][%d] partialUpdateBadRequest  %+v", 400, o.Payload)
}

func (o *PartialUpdateBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PartialUpdateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPartialUpdateUnauthorized creates a PartialUpdateUnauthorized with default headers values
func NewPartialUpdateUnauthorized() *PartialUpdateUnauthorized {
	return &PartialUpdateUnauthorized{}
}

/*PartialUpdateUnauthorized handles this case with default header values.

Unauthorized
*/
type PartialUpdateUnauthorized struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *PartialUpdateUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /invites/{id}][%d] partialUpdateUnauthorized  %+v", 401, o.Payload)
}

func (o *PartialUpdateUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PartialUpdateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPartialUpdateForbidden creates a PartialUpdateForbidden with default headers values
func NewPartialUpdateForbidden() *PartialUpdateForbidden {
	return &PartialUpdateForbidden{}
}

/*PartialUpdateForbidden handles this case with default header values.

Insufficient privilege to execute action
*/
type PartialUpdateForbidden struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *PartialUpdateForbidden) Error() string {
	return fmt.Sprintf("[PATCH /invites/{id}][%d] partialUpdateForbidden  %+v", 403, o.Payload)
}

func (o *PartialUpdateForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PartialUpdateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPartialUpdateNotFound creates a PartialUpdateNotFound with default headers values
func NewPartialUpdateNotFound() *PartialUpdateNotFound {
	return &PartialUpdateNotFound{}
}

/*PartialUpdateNotFound handles this case with default header values.

Not found
*/
type PartialUpdateNotFound struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *PartialUpdateNotFound) Error() string {
	return fmt.Sprintf("[PATCH /invites/{id}][%d] partialUpdateNotFound  %+v", 404, o.Payload)
}

func (o *PartialUpdateNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PartialUpdateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
