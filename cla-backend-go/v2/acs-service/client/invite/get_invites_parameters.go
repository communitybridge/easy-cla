// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package invite

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetInvitesParams creates a new GetInvitesParams object
// with the default values initialized.
func NewGetInvitesParams() *GetInvitesParams {
	var ()
	return &GetInvitesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetInvitesParamsWithTimeout creates a new GetInvitesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetInvitesParamsWithTimeout(timeout time.Duration) *GetInvitesParams {
	var ()
	return &GetInvitesParams{

		timeout: timeout,
	}
}

// NewGetInvitesParamsWithContext creates a new GetInvitesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetInvitesParamsWithContext(ctx context.Context) *GetInvitesParams {
	var ()
	return &GetInvitesParams{

		Context: ctx,
	}
}

// NewGetInvitesParamsWithHTTPClient creates a new GetInvitesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetInvitesParamsWithHTTPClient(client *http.Client) *GetInvitesParams {
	var ()
	return &GetInvitesParams{
		HTTPClient: client,
	}
}

/*GetInvitesParams contains all the parameters to send to the API endpoint
for the get invites operation typically these are written to a http.Request
*/
type GetInvitesParams struct {

	/*EmptyHeader
	  The access control list header value encoded as base64 - assigned by the API Gateway based on user/request permissions

	*/
	EmptyHeader string
	/*XEMAIL
	  Email of the person who is requesting an access

	*/
	XEMAIL *string
	/*XREQUESTID
	  The unique request ID value - assigned/set by the API Gateway based on the login session

	*/
	XREQUESTID *string
	/*XUSERNAME
	  Username of the person who is requesting an access

	*/
	XUSERNAME *string
	/*Limit
	  The maximum amount of invites returned, like 100

	*/
	Limit *int64
	/*Offset
	  The offset from where to start looking, like 0.

	*/
	Offset *int64
	/*Orgid
	  OrganizationID (references salesforce ID)

	*/
	Orgid *string
	/*Status
	  Invite approval status. Pending - Invite is just created and its waiting for approval/cancel Accepted - Invite has been accepted Canceled - Invite has been Canceled

	*/
	Status *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get invites params
func (o *GetInvitesParams) WithTimeout(timeout time.Duration) *GetInvitesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get invites params
func (o *GetInvitesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get invites params
func (o *GetInvitesParams) WithContext(ctx context.Context) *GetInvitesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get invites params
func (o *GetInvitesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get invites params
func (o *GetInvitesParams) WithHTTPClient(client *http.Client) *GetInvitesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get invites params
func (o *GetInvitesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEmptyHeader adds the emptyHeader to the get invites params
func (o *GetInvitesParams) WithEmptyHeader(emptyHeader string) *GetInvitesParams {
	o.SetEmptyHeader(emptyHeader)
	return o
}

// SetEmptyHeader adds the emptyHeader to the get invites params
func (o *GetInvitesParams) SetEmptyHeader(emptyHeader string) {
	o.EmptyHeader = emptyHeader
}

// WithXEMAIL adds the xEMAIL to the get invites params
func (o *GetInvitesParams) WithXEMAIL(xEMAIL *string) *GetInvitesParams {
	o.SetXEMAIL(xEMAIL)
	return o
}

// SetXEMAIL adds the xEMAIL to the get invites params
func (o *GetInvitesParams) SetXEMAIL(xEMAIL *string) {
	o.XEMAIL = xEMAIL
}

// WithXREQUESTID adds the xREQUESTID to the get invites params
func (o *GetInvitesParams) WithXREQUESTID(xREQUESTID *string) *GetInvitesParams {
	o.SetXREQUESTID(xREQUESTID)
	return o
}

// SetXREQUESTID adds the xREQUESTId to the get invites params
func (o *GetInvitesParams) SetXREQUESTID(xREQUESTID *string) {
	o.XREQUESTID = xREQUESTID
}

// WithXUSERNAME adds the xUSERNAME to the get invites params
func (o *GetInvitesParams) WithXUSERNAME(xUSERNAME *string) *GetInvitesParams {
	o.SetXUSERNAME(xUSERNAME)
	return o
}

// SetXUSERNAME adds the xUSERNAME to the get invites params
func (o *GetInvitesParams) SetXUSERNAME(xUSERNAME *string) {
	o.XUSERNAME = xUSERNAME
}

// WithLimit adds the limit to the get invites params
func (o *GetInvitesParams) WithLimit(limit *int64) *GetInvitesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get invites params
func (o *GetInvitesParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the get invites params
func (o *GetInvitesParams) WithOffset(offset *int64) *GetInvitesParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get invites params
func (o *GetInvitesParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithOrgid adds the orgid to the get invites params
func (o *GetInvitesParams) WithOrgid(orgid *string) *GetInvitesParams {
	o.SetOrgid(orgid)
	return o
}

// SetOrgid adds the orgid to the get invites params
func (o *GetInvitesParams) SetOrgid(orgid *string) {
	o.Orgid = orgid
}

// WithStatus adds the status to the get invites params
func (o *GetInvitesParams) WithStatus(status *string) *GetInvitesParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the get invites params
func (o *GetInvitesParams) SetStatus(status *string) {
	o.Status = status
}

// WriteToRequest writes these params to a swagger request
func (o *GetInvitesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Empty-Header
	if err := r.SetHeaderParam("Empty-Header", o.EmptyHeader); err != nil {
		return err
	}

	if o.XEMAIL != nil {

		// header param X-EMAIL
		if err := r.SetHeaderParam("X-EMAIL", *o.XEMAIL); err != nil {
			return err
		}

	}

	if o.XREQUESTID != nil {

		// header param X-REQUEST-ID
		if err := r.SetHeaderParam("X-REQUEST-ID", *o.XREQUESTID); err != nil {
			return err
		}

	}

	if o.XUSERNAME != nil {

		// header param X-USERNAME
		if err := r.SetHeaderParam("X-USERNAME", *o.XUSERNAME); err != nil {
			return err
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.Orgid != nil {

		// query param orgid
		var qrOrgid string
		if o.Orgid != nil {
			qrOrgid = *o.Orgid
		}
		qOrgid := qrOrgid
		if qOrgid != "" {
			if err := r.SetQueryParam("orgid", qOrgid); err != nil {
				return err
			}
		}

	}

	if o.Status != nil {

		// query param status
		var qrStatus string
		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {
			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
