// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package invite

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/communitybridge/easycla/cla-backend-go/v2/acs-service/models"
)

// GetInvitesReader is a Reader for the GetInvites structure.
type GetInvitesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetInvitesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetInvitesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetInvitesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetInvitesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetInvitesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetInvitesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetInvitesOK creates a GetInvitesOK with default headers values
func NewGetInvitesOK() *GetInvitesOK {
	return &GetInvitesOK{}
}

/*GetInvitesOK handles this case with default header values.

Success
*/
type GetInvitesOK struct {
	Payload *models.Invites
}

func (o *GetInvitesOK) Error() string {
	return fmt.Sprintf("[GET /invites][%d] getInvitesOK  %+v", 200, o.Payload)
}

func (o *GetInvitesOK) GetPayload() *models.Invites {
	return o.Payload
}

func (o *GetInvitesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Invites)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInvitesBadRequest creates a GetInvitesBadRequest with default headers values
func NewGetInvitesBadRequest() *GetInvitesBadRequest {
	return &GetInvitesBadRequest{}
}

/*GetInvitesBadRequest handles this case with default header values.

Invalid request
*/
type GetInvitesBadRequest struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetInvitesBadRequest) Error() string {
	return fmt.Sprintf("[GET /invites][%d] getInvitesBadRequest  %+v", 400, o.Payload)
}

func (o *GetInvitesBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetInvitesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInvitesUnauthorized creates a GetInvitesUnauthorized with default headers values
func NewGetInvitesUnauthorized() *GetInvitesUnauthorized {
	return &GetInvitesUnauthorized{}
}

/*GetInvitesUnauthorized handles this case with default header values.

Unauthorized
*/
type GetInvitesUnauthorized struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetInvitesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /invites][%d] getInvitesUnauthorized  %+v", 401, o.Payload)
}

func (o *GetInvitesUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetInvitesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInvitesForbidden creates a GetInvitesForbidden with default headers values
func NewGetInvitesForbidden() *GetInvitesForbidden {
	return &GetInvitesForbidden{}
}

/*GetInvitesForbidden handles this case with default header values.

Insufficient privilege to execute action
*/
type GetInvitesForbidden struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetInvitesForbidden) Error() string {
	return fmt.Sprintf("[GET /invites][%d] getInvitesForbidden  %+v", 403, o.Payload)
}

func (o *GetInvitesForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetInvitesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInvitesNotFound creates a GetInvitesNotFound with default headers values
func NewGetInvitesNotFound() *GetInvitesNotFound {
	return &GetInvitesNotFound{}
}

/*GetInvitesNotFound handles this case with default header values.

Not found
*/
type GetInvitesNotFound struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetInvitesNotFound) Error() string {
	return fmt.Sprintf("[GET /invites][%d] getInvitesNotFound  %+v", 404, o.Payload)
}

func (o *GetInvitesNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetInvitesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
