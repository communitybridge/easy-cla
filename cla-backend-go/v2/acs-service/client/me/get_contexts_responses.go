// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package me

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/communitybridge/easycla/cla-backend-go/v2/acs-service/models"
)

// GetContextsReader is a Reader for the GetContexts structure.
type GetContextsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetContextsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetContextsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetContextsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetContextsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetContextsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetContextsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetContextsOK creates a GetContextsOK with default headers values
func NewGetContextsOK() *GetContextsOK {
	return &GetContextsOK{}
}

/*GetContextsOK handles this case with default header values.

Success
*/
type GetContextsOK struct {
	Payload *models.Contexts
}

func (o *GetContextsOK) Error() string {
	return fmt.Sprintf("[GET /me/contexts][%d] getContextsOK  %+v", 200, o.Payload)
}

func (o *GetContextsOK) GetPayload() *models.Contexts {
	return o.Payload
}

func (o *GetContextsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Contexts)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetContextsBadRequest creates a GetContextsBadRequest with default headers values
func NewGetContextsBadRequest() *GetContextsBadRequest {
	return &GetContextsBadRequest{}
}

/*GetContextsBadRequest handles this case with default header values.

Invalid request
*/
type GetContextsBadRequest struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetContextsBadRequest) Error() string {
	return fmt.Sprintf("[GET /me/contexts][%d] getContextsBadRequest  %+v", 400, o.Payload)
}

func (o *GetContextsBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetContextsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetContextsUnauthorized creates a GetContextsUnauthorized with default headers values
func NewGetContextsUnauthorized() *GetContextsUnauthorized {
	return &GetContextsUnauthorized{}
}

/*GetContextsUnauthorized handles this case with default header values.

Unauthorized
*/
type GetContextsUnauthorized struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetContextsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /me/contexts][%d] getContextsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetContextsUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetContextsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetContextsForbidden creates a GetContextsForbidden with default headers values
func NewGetContextsForbidden() *GetContextsForbidden {
	return &GetContextsForbidden{}
}

/*GetContextsForbidden handles this case with default header values.

Insufficient privilege to execute action
*/
type GetContextsForbidden struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetContextsForbidden) Error() string {
	return fmt.Sprintf("[GET /me/contexts][%d] getContextsForbidden  %+v", 403, o.Payload)
}

func (o *GetContextsForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetContextsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetContextsNotFound creates a GetContextsNotFound with default headers values
func NewGetContextsNotFound() *GetContextsNotFound {
	return &GetContextsNotFound{}
}

/*GetContextsNotFound handles this case with default header values.

Not found
*/
type GetContextsNotFound struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetContextsNotFound) Error() string {
	return fmt.Sprintf("[GET /me/contexts][%d] getContextsNotFound  %+v", 404, o.Payload)
}

func (o *GetContextsNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetContextsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
