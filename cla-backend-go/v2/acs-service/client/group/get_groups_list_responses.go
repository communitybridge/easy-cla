// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/communitybridge/easycla/cla-backend-go/v2/acs-service/models"
)

// GetGroupsListReader is a Reader for the GetGroupsList structure.
type GetGroupsListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetGroupsListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetGroupsListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetGroupsListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetGroupsListUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetGroupsListForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetGroupsListNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetGroupsListOK creates a GetGroupsListOK with default headers values
func NewGetGroupsListOK() *GetGroupsListOK {
	return &GetGroupsListOK{}
}

/*GetGroupsListOK handles this case with default header values.

Success
*/
type GetGroupsListOK struct {
	/*Unique HttpRequest ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.Groups
}

func (o *GetGroupsListOK) Error() string {
	return fmt.Sprintf("[GET /groups][%d] getGroupsListOK  %+v", 200, o.Payload)
}

func (o *GetGroupsListOK) GetPayload() *models.Groups {
	return o.Payload
}

func (o *GetGroupsListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.Groups)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGroupsListBadRequest creates a GetGroupsListBadRequest with default headers values
func NewGetGroupsListBadRequest() *GetGroupsListBadRequest {
	return &GetGroupsListBadRequest{}
}

/*GetGroupsListBadRequest handles this case with default header values.

Invalid request
*/
type GetGroupsListBadRequest struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetGroupsListBadRequest) Error() string {
	return fmt.Sprintf("[GET /groups][%d] getGroupsListBadRequest  %+v", 400, o.Payload)
}

func (o *GetGroupsListBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetGroupsListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGroupsListUnauthorized creates a GetGroupsListUnauthorized with default headers values
func NewGetGroupsListUnauthorized() *GetGroupsListUnauthorized {
	return &GetGroupsListUnauthorized{}
}

/*GetGroupsListUnauthorized handles this case with default header values.

Unauthorized
*/
type GetGroupsListUnauthorized struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetGroupsListUnauthorized) Error() string {
	return fmt.Sprintf("[GET /groups][%d] getGroupsListUnauthorized  %+v", 401, o.Payload)
}

func (o *GetGroupsListUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetGroupsListUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGroupsListForbidden creates a GetGroupsListForbidden with default headers values
func NewGetGroupsListForbidden() *GetGroupsListForbidden {
	return &GetGroupsListForbidden{}
}

/*GetGroupsListForbidden handles this case with default header values.

Insufficient privilege to execute action
*/
type GetGroupsListForbidden struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetGroupsListForbidden) Error() string {
	return fmt.Sprintf("[GET /groups][%d] getGroupsListForbidden  %+v", 403, o.Payload)
}

func (o *GetGroupsListForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetGroupsListForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGroupsListNotFound creates a GetGroupsListNotFound with default headers values
func NewGetGroupsListNotFound() *GetGroupsListNotFound {
	return &GetGroupsListNotFound{}
}

/*GetGroupsListNotFound handles this case with default header values.

Not found
*/
type GetGroupsListNotFound struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetGroupsListNotFound) Error() string {
	return fmt.Sprintf("[GET /groups][%d] getGroupsListNotFound  %+v", 404, o.Payload)
}

func (o *GetGroupsListNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetGroupsListNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
