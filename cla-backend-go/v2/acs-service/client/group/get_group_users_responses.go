// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/communitybridge/easycla/cla-backend-go/v2/acs-service/models"
)

// GetGroupUsersReader is a Reader for the GetGroupUsers structure.
type GetGroupUsersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetGroupUsersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetGroupUsersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetGroupUsersBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetGroupUsersUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetGroupUsersForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetGroupUsersNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetGroupUsersOK creates a GetGroupUsersOK with default headers values
func NewGetGroupUsersOK() *GetGroupUsersOK {
	return &GetGroupUsersOK{}
}

/*GetGroupUsersOK handles this case with default header values.

Success
*/
type GetGroupUsersOK struct {
	/*Unique HttpRequest ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.GroupUsers
}

func (o *GetGroupUsersOK) Error() string {
	return fmt.Sprintf("[GET /groups/{id}/users][%d] getGroupUsersOK  %+v", 200, o.Payload)
}

func (o *GetGroupUsersOK) GetPayload() *models.GroupUsers {
	return o.Payload
}

func (o *GetGroupUsersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.GroupUsers)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGroupUsersBadRequest creates a GetGroupUsersBadRequest with default headers values
func NewGetGroupUsersBadRequest() *GetGroupUsersBadRequest {
	return &GetGroupUsersBadRequest{}
}

/*GetGroupUsersBadRequest handles this case with default header values.

Invalid request
*/
type GetGroupUsersBadRequest struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetGroupUsersBadRequest) Error() string {
	return fmt.Sprintf("[GET /groups/{id}/users][%d] getGroupUsersBadRequest  %+v", 400, o.Payload)
}

func (o *GetGroupUsersBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetGroupUsersBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGroupUsersUnauthorized creates a GetGroupUsersUnauthorized with default headers values
func NewGetGroupUsersUnauthorized() *GetGroupUsersUnauthorized {
	return &GetGroupUsersUnauthorized{}
}

/*GetGroupUsersUnauthorized handles this case with default header values.

Unauthorized
*/
type GetGroupUsersUnauthorized struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetGroupUsersUnauthorized) Error() string {
	return fmt.Sprintf("[GET /groups/{id}/users][%d] getGroupUsersUnauthorized  %+v", 401, o.Payload)
}

func (o *GetGroupUsersUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetGroupUsersUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGroupUsersForbidden creates a GetGroupUsersForbidden with default headers values
func NewGetGroupUsersForbidden() *GetGroupUsersForbidden {
	return &GetGroupUsersForbidden{}
}

/*GetGroupUsersForbidden handles this case with default header values.

Insufficient privilege to execute action
*/
type GetGroupUsersForbidden struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetGroupUsersForbidden) Error() string {
	return fmt.Sprintf("[GET /groups/{id}/users][%d] getGroupUsersForbidden  %+v", 403, o.Payload)
}

func (o *GetGroupUsersForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetGroupUsersForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGroupUsersNotFound creates a GetGroupUsersNotFound with default headers values
func NewGetGroupUsersNotFound() *GetGroupUsersNotFound {
	return &GetGroupUsersNotFound{}
}

/*GetGroupUsersNotFound handles this case with default header values.

Not found
*/
type GetGroupUsersNotFound struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetGroupUsersNotFound) Error() string {
	return fmt.Sprintf("[GET /groups/{id}/users][%d] getGroupUsersNotFound  %+v", 404, o.Payload)
}

func (o *GetGroupUsersNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetGroupUsersNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
