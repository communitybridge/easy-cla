// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/communitybridge/easycla/cla-backend-go/v2/acs-service/models"
)

// CreateGroupUsersReader is a Reader for the CreateGroupUsers structure.
type CreateGroupUsersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateGroupUsersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateGroupUsersCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateGroupUsersBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreateGroupUsersUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateGroupUsersForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateGroupUsersNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateGroupUsersConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCreateGroupUsersCreated creates a CreateGroupUsersCreated with default headers values
func NewCreateGroupUsersCreated() *CreateGroupUsersCreated {
	return &CreateGroupUsersCreated{}
}

/*CreateGroupUsersCreated handles this case with default header values.

Created
*/
type CreateGroupUsersCreated struct {
	/*Unique HttpRequest ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload []*models.GroupUser
}

func (o *CreateGroupUsersCreated) Error() string {
	return fmt.Sprintf("[POST /groups/{id}/users][%d] createGroupUsersCreated  %+v", 201, o.Payload)
}

func (o *CreateGroupUsersCreated) GetPayload() []*models.GroupUser {
	return o.Payload
}

func (o *CreateGroupUsersCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateGroupUsersBadRequest creates a CreateGroupUsersBadRequest with default headers values
func NewCreateGroupUsersBadRequest() *CreateGroupUsersBadRequest {
	return &CreateGroupUsersBadRequest{}
}

/*CreateGroupUsersBadRequest handles this case with default header values.

Invalid request
*/
type CreateGroupUsersBadRequest struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *CreateGroupUsersBadRequest) Error() string {
	return fmt.Sprintf("[POST /groups/{id}/users][%d] createGroupUsersBadRequest  %+v", 400, o.Payload)
}

func (o *CreateGroupUsersBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateGroupUsersBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateGroupUsersUnauthorized creates a CreateGroupUsersUnauthorized with default headers values
func NewCreateGroupUsersUnauthorized() *CreateGroupUsersUnauthorized {
	return &CreateGroupUsersUnauthorized{}
}

/*CreateGroupUsersUnauthorized handles this case with default header values.

Unauthorized
*/
type CreateGroupUsersUnauthorized struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *CreateGroupUsersUnauthorized) Error() string {
	return fmt.Sprintf("[POST /groups/{id}/users][%d] createGroupUsersUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateGroupUsersUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateGroupUsersUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateGroupUsersForbidden creates a CreateGroupUsersForbidden with default headers values
func NewCreateGroupUsersForbidden() *CreateGroupUsersForbidden {
	return &CreateGroupUsersForbidden{}
}

/*CreateGroupUsersForbidden handles this case with default header values.

Insufficient privilege to execute action
*/
type CreateGroupUsersForbidden struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *CreateGroupUsersForbidden) Error() string {
	return fmt.Sprintf("[POST /groups/{id}/users][%d] createGroupUsersForbidden  %+v", 403, o.Payload)
}

func (o *CreateGroupUsersForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateGroupUsersForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateGroupUsersNotFound creates a CreateGroupUsersNotFound with default headers values
func NewCreateGroupUsersNotFound() *CreateGroupUsersNotFound {
	return &CreateGroupUsersNotFound{}
}

/*CreateGroupUsersNotFound handles this case with default header values.

Not found
*/
type CreateGroupUsersNotFound struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *CreateGroupUsersNotFound) Error() string {
	return fmt.Sprintf("[POST /groups/{id}/users][%d] createGroupUsersNotFound  %+v", 404, o.Payload)
}

func (o *CreateGroupUsersNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateGroupUsersNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateGroupUsersConflict creates a CreateGroupUsersConflict with default headers values
func NewCreateGroupUsersConflict() *CreateGroupUsersConflict {
	return &CreateGroupUsersConflict{}
}

/*CreateGroupUsersConflict handles this case with default header values.

Duplicate Resource
*/
type CreateGroupUsersConflict struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *CreateGroupUsersConflict) Error() string {
	return fmt.Sprintf("[POST /groups/{id}/users][%d] createGroupUsersConflict  %+v", 409, o.Payload)
}

func (o *CreateGroupUsersConflict) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateGroupUsersConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
