// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package group_role

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new group role API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for group role API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateRolesGroup(params *CreateRolesGroupParams, authInfo runtime.ClientAuthInfoWriter) (*CreateRolesGroupCreated, error)

	DeleteGroupGrant(params *DeleteGroupGrantParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteGroupGrantNoContent, error)

	DeleteGroupRoleGrant(params *DeleteGroupRoleGrantParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteGroupRoleGrantNoContent, error)

	GetRoleGroup(params *GetRoleGroupParams, authInfo runtime.ClientAuthInfoWriter) (*GetRoleGroupOK, error)

	GetRolesGroupList(params *GetRolesGroupListParams, authInfo runtime.ClientAuthInfoWriter) (*GetRolesGroupListOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateRolesGroup creates group role association

  Assign an existing groups to list of roles.
*/
func (a *Client) CreateRolesGroup(params *CreateRolesGroupParams, authInfo runtime.ClientAuthInfoWriter) (*CreateRolesGroupCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRolesGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createRolesGroup",
		Method:             "POST",
		PathPattern:        "/groups/{id}/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateRolesGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRolesGroupCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRolesGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteGroupGrant deletes group grants

  Removing all grants of specific group
*/
func (a *Client) DeleteGroupGrant(params *DeleteGroupGrantParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteGroupGrantNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteGroupGrantParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteGroupGrant",
		Method:             "DELETE",
		PathPattern:        "/groups/{id}/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteGroupGrantReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteGroupGrantNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteGroupGrant: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteGroupRoleGrant deletes group role grant

  Remove the group grant by roleID
*/
func (a *Client) DeleteGroupRoleGrant(params *DeleteGroupRoleGrantParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteGroupRoleGrantNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteGroupRoleGrantParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteGroupRoleGrant",
		Method:             "DELETE",
		PathPattern:        "/groups/{id}/roles/{roleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteGroupRoleGrantReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteGroupRoleGrantNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteGroupRoleGrant: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRoleGroup gets group role

  Get the Role attached to the Group.
*/
func (a *Client) GetRoleGroup(params *GetRoleGroupParams, authInfo runtime.ClientAuthInfoWriter) (*GetRoleGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRoleGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRoleGroup",
		Method:             "GET",
		PathPattern:        "/groups/{id}/roles/{roleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRoleGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRoleGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRoleGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRolesGroupList gets group role list

  Get list of Roles attached to the Group.
*/
func (a *Client) GetRolesGroupList(params *GetRolesGroupListParams, authInfo runtime.ClientAuthInfoWriter) (*GetRolesGroupListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRolesGroupListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRolesGroupList",
		Method:             "GET",
		PathPattern:        "/groups/{id}/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRolesGroupListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRolesGroupListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRolesGroupList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
