// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package group_role

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/communitybridge/easycla/cla-backend-go/v2/acs-service/models"
)

// DeleteGroupGrantReader is a Reader for the DeleteGroupGrant structure.
type DeleteGroupGrantReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteGroupGrantReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteGroupGrantNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteGroupGrantBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteGroupGrantUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteGroupGrantForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteGroupGrantNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteGroupGrantNoContent creates a DeleteGroupGrantNoContent with default headers values
func NewDeleteGroupGrantNoContent() *DeleteGroupGrantNoContent {
	return &DeleteGroupGrantNoContent{}
}

/*DeleteGroupGrantNoContent handles this case with default header values.

Delete group grants is successful
*/
type DeleteGroupGrantNoContent struct {
	/*Unique HttpRequest ID to help in tracing and debugging
	 */
	XREQUESTID string
}

func (o *DeleteGroupGrantNoContent) Error() string {
	return fmt.Sprintf("[DELETE /groups/{id}/roles][%d] deleteGroupGrantNoContent ", 204)
}

func (o *DeleteGroupGrantNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	return nil
}

// NewDeleteGroupGrantBadRequest creates a DeleteGroupGrantBadRequest with default headers values
func NewDeleteGroupGrantBadRequest() *DeleteGroupGrantBadRequest {
	return &DeleteGroupGrantBadRequest{}
}

/*DeleteGroupGrantBadRequest handles this case with default header values.

Invalid request
*/
type DeleteGroupGrantBadRequest struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *DeleteGroupGrantBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /groups/{id}/roles][%d] deleteGroupGrantBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteGroupGrantBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DeleteGroupGrantBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteGroupGrantUnauthorized creates a DeleteGroupGrantUnauthorized with default headers values
func NewDeleteGroupGrantUnauthorized() *DeleteGroupGrantUnauthorized {
	return &DeleteGroupGrantUnauthorized{}
}

/*DeleteGroupGrantUnauthorized handles this case with default header values.

Unauthorized
*/
type DeleteGroupGrantUnauthorized struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *DeleteGroupGrantUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /groups/{id}/roles][%d] deleteGroupGrantUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteGroupGrantUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DeleteGroupGrantUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteGroupGrantForbidden creates a DeleteGroupGrantForbidden with default headers values
func NewDeleteGroupGrantForbidden() *DeleteGroupGrantForbidden {
	return &DeleteGroupGrantForbidden{}
}

/*DeleteGroupGrantForbidden handles this case with default header values.

Insufficient privilege to execute action
*/
type DeleteGroupGrantForbidden struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *DeleteGroupGrantForbidden) Error() string {
	return fmt.Sprintf("[DELETE /groups/{id}/roles][%d] deleteGroupGrantForbidden  %+v", 403, o.Payload)
}

func (o *DeleteGroupGrantForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DeleteGroupGrantForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteGroupGrantNotFound creates a DeleteGroupGrantNotFound with default headers values
func NewDeleteGroupGrantNotFound() *DeleteGroupGrantNotFound {
	return &DeleteGroupGrantNotFound{}
}

/*DeleteGroupGrantNotFound handles this case with default header values.

Not found
*/
type DeleteGroupGrantNotFound struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *DeleteGroupGrantNotFound) Error() string {
	return fmt.Sprintf("[DELETE /groups/{id}/roles][%d] deleteGroupGrantNotFound  %+v", 404, o.Payload)
}

func (o *DeleteGroupGrantNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DeleteGroupGrantNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
