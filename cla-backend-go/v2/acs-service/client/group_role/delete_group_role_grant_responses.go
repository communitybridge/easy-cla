// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package group_role

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/communitybridge/easycla/cla-backend-go/v2/acs-service/models"
)

// DeleteGroupRoleGrantReader is a Reader for the DeleteGroupRoleGrant structure.
type DeleteGroupRoleGrantReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteGroupRoleGrantReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteGroupRoleGrantNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteGroupRoleGrantBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteGroupRoleGrantUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteGroupRoleGrantForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteGroupRoleGrantNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteGroupRoleGrantNoContent creates a DeleteGroupRoleGrantNoContent with default headers values
func NewDeleteGroupRoleGrantNoContent() *DeleteGroupRoleGrantNoContent {
	return &DeleteGroupRoleGrantNoContent{}
}

/*DeleteGroupRoleGrantNoContent handles this case with default header values.

Delete group role grant is successful
*/
type DeleteGroupRoleGrantNoContent struct {
	/*Unique HttpRequest ID to help in tracing and debugging
	 */
	XREQUESTID string
}

func (o *DeleteGroupRoleGrantNoContent) Error() string {
	return fmt.Sprintf("[DELETE /groups/{id}/roles/{roleId}][%d] deleteGroupRoleGrantNoContent ", 204)
}

func (o *DeleteGroupRoleGrantNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	return nil
}

// NewDeleteGroupRoleGrantBadRequest creates a DeleteGroupRoleGrantBadRequest with default headers values
func NewDeleteGroupRoleGrantBadRequest() *DeleteGroupRoleGrantBadRequest {
	return &DeleteGroupRoleGrantBadRequest{}
}

/*DeleteGroupRoleGrantBadRequest handles this case with default header values.

Invalid request
*/
type DeleteGroupRoleGrantBadRequest struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *DeleteGroupRoleGrantBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /groups/{id}/roles/{roleId}][%d] deleteGroupRoleGrantBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteGroupRoleGrantBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DeleteGroupRoleGrantBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteGroupRoleGrantUnauthorized creates a DeleteGroupRoleGrantUnauthorized with default headers values
func NewDeleteGroupRoleGrantUnauthorized() *DeleteGroupRoleGrantUnauthorized {
	return &DeleteGroupRoleGrantUnauthorized{}
}

/*DeleteGroupRoleGrantUnauthorized handles this case with default header values.

Unauthorized
*/
type DeleteGroupRoleGrantUnauthorized struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *DeleteGroupRoleGrantUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /groups/{id}/roles/{roleId}][%d] deleteGroupRoleGrantUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteGroupRoleGrantUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DeleteGroupRoleGrantUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteGroupRoleGrantForbidden creates a DeleteGroupRoleGrantForbidden with default headers values
func NewDeleteGroupRoleGrantForbidden() *DeleteGroupRoleGrantForbidden {
	return &DeleteGroupRoleGrantForbidden{}
}

/*DeleteGroupRoleGrantForbidden handles this case with default header values.

Insufficient privilege to execute action
*/
type DeleteGroupRoleGrantForbidden struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *DeleteGroupRoleGrantForbidden) Error() string {
	return fmt.Sprintf("[DELETE /groups/{id}/roles/{roleId}][%d] deleteGroupRoleGrantForbidden  %+v", 403, o.Payload)
}

func (o *DeleteGroupRoleGrantForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DeleteGroupRoleGrantForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteGroupRoleGrantNotFound creates a DeleteGroupRoleGrantNotFound with default headers values
func NewDeleteGroupRoleGrantNotFound() *DeleteGroupRoleGrantNotFound {
	return &DeleteGroupRoleGrantNotFound{}
}

/*DeleteGroupRoleGrantNotFound handles this case with default header values.

Not found
*/
type DeleteGroupRoleGrantNotFound struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *DeleteGroupRoleGrantNotFound) Error() string {
	return fmt.Sprintf("[DELETE /groups/{id}/roles/{roleId}][%d] deleteGroupRoleGrantNotFound  %+v", 404, o.Payload)
}

func (o *DeleteGroupRoleGrantNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DeleteGroupRoleGrantNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
