// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package group_role

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/communitybridge/easycla/cla-backend-go/v2/acs-service/models"
)

// CreateRolesGroupReader is a Reader for the CreateRolesGroup structure.
type CreateRolesGroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateRolesGroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateRolesGroupCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateRolesGroupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreateRolesGroupUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateRolesGroupForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateRolesGroupNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateRolesGroupConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCreateRolesGroupCreated creates a CreateRolesGroupCreated with default headers values
func NewCreateRolesGroupCreated() *CreateRolesGroupCreated {
	return &CreateRolesGroupCreated{}
}

/*CreateRolesGroupCreated handles this case with default header values.

Created
*/
type CreateRolesGroupCreated struct {
	/*Unique HttpRequest ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload []*models.GroupRoles
}

func (o *CreateRolesGroupCreated) Error() string {
	return fmt.Sprintf("[POST /groups/{id}/roles][%d] createRolesGroupCreated  %+v", 201, o.Payload)
}

func (o *CreateRolesGroupCreated) GetPayload() []*models.GroupRoles {
	return o.Payload
}

func (o *CreateRolesGroupCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRolesGroupBadRequest creates a CreateRolesGroupBadRequest with default headers values
func NewCreateRolesGroupBadRequest() *CreateRolesGroupBadRequest {
	return &CreateRolesGroupBadRequest{}
}

/*CreateRolesGroupBadRequest handles this case with default header values.

Invalid request
*/
type CreateRolesGroupBadRequest struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *CreateRolesGroupBadRequest) Error() string {
	return fmt.Sprintf("[POST /groups/{id}/roles][%d] createRolesGroupBadRequest  %+v", 400, o.Payload)
}

func (o *CreateRolesGroupBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateRolesGroupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRolesGroupUnauthorized creates a CreateRolesGroupUnauthorized with default headers values
func NewCreateRolesGroupUnauthorized() *CreateRolesGroupUnauthorized {
	return &CreateRolesGroupUnauthorized{}
}

/*CreateRolesGroupUnauthorized handles this case with default header values.

Unauthorized
*/
type CreateRolesGroupUnauthorized struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *CreateRolesGroupUnauthorized) Error() string {
	return fmt.Sprintf("[POST /groups/{id}/roles][%d] createRolesGroupUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateRolesGroupUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateRolesGroupUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRolesGroupForbidden creates a CreateRolesGroupForbidden with default headers values
func NewCreateRolesGroupForbidden() *CreateRolesGroupForbidden {
	return &CreateRolesGroupForbidden{}
}

/*CreateRolesGroupForbidden handles this case with default header values.

Insufficient privilege to execute action
*/
type CreateRolesGroupForbidden struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *CreateRolesGroupForbidden) Error() string {
	return fmt.Sprintf("[POST /groups/{id}/roles][%d] createRolesGroupForbidden  %+v", 403, o.Payload)
}

func (o *CreateRolesGroupForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateRolesGroupForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRolesGroupNotFound creates a CreateRolesGroupNotFound with default headers values
func NewCreateRolesGroupNotFound() *CreateRolesGroupNotFound {
	return &CreateRolesGroupNotFound{}
}

/*CreateRolesGroupNotFound handles this case with default header values.

Not found
*/
type CreateRolesGroupNotFound struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *CreateRolesGroupNotFound) Error() string {
	return fmt.Sprintf("[POST /groups/{id}/roles][%d] createRolesGroupNotFound  %+v", 404, o.Payload)
}

func (o *CreateRolesGroupNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateRolesGroupNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRolesGroupConflict creates a CreateRolesGroupConflict with default headers values
func NewCreateRolesGroupConflict() *CreateRolesGroupConflict {
	return &CreateRolesGroupConflict{}
}

/*CreateRolesGroupConflict handles this case with default header values.

Duplicate Resource
*/
type CreateRolesGroupConflict struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *CreateRolesGroupConflict) Error() string {
	return fmt.Sprintf("[POST /groups/{id}/roles][%d] createRolesGroupConflict  %+v", 409, o.Payload)
}

func (o *CreateRolesGroupConflict) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateRolesGroupConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
