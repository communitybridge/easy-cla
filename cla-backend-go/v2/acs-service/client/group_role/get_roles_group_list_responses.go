// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package group_role

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/communitybridge/easycla/cla-backend-go/v2/acs-service/models"
)

// GetRolesGroupListReader is a Reader for the GetRolesGroupList structure.
type GetRolesGroupListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRolesGroupListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRolesGroupListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetRolesGroupListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetRolesGroupListUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetRolesGroupListForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRolesGroupListNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetRolesGroupListOK creates a GetRolesGroupListOK with default headers values
func NewGetRolesGroupListOK() *GetRolesGroupListOK {
	return &GetRolesGroupListOK{}
}

/*GetRolesGroupListOK handles this case with default header values.

Success
*/
type GetRolesGroupListOK struct {
	/*Unique HttpRequest ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload []*models.GroupRoles
}

func (o *GetRolesGroupListOK) Error() string {
	return fmt.Sprintf("[GET /groups/{id}/roles][%d] getRolesGroupListOK  %+v", 200, o.Payload)
}

func (o *GetRolesGroupListOK) GetPayload() []*models.GroupRoles {
	return o.Payload
}

func (o *GetRolesGroupListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRolesGroupListBadRequest creates a GetRolesGroupListBadRequest with default headers values
func NewGetRolesGroupListBadRequest() *GetRolesGroupListBadRequest {
	return &GetRolesGroupListBadRequest{}
}

/*GetRolesGroupListBadRequest handles this case with default header values.

Invalid request
*/
type GetRolesGroupListBadRequest struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetRolesGroupListBadRequest) Error() string {
	return fmt.Sprintf("[GET /groups/{id}/roles][%d] getRolesGroupListBadRequest  %+v", 400, o.Payload)
}

func (o *GetRolesGroupListBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetRolesGroupListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRolesGroupListUnauthorized creates a GetRolesGroupListUnauthorized with default headers values
func NewGetRolesGroupListUnauthorized() *GetRolesGroupListUnauthorized {
	return &GetRolesGroupListUnauthorized{}
}

/*GetRolesGroupListUnauthorized handles this case with default header values.

Unauthorized
*/
type GetRolesGroupListUnauthorized struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetRolesGroupListUnauthorized) Error() string {
	return fmt.Sprintf("[GET /groups/{id}/roles][%d] getRolesGroupListUnauthorized  %+v", 401, o.Payload)
}

func (o *GetRolesGroupListUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetRolesGroupListUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRolesGroupListForbidden creates a GetRolesGroupListForbidden with default headers values
func NewGetRolesGroupListForbidden() *GetRolesGroupListForbidden {
	return &GetRolesGroupListForbidden{}
}

/*GetRolesGroupListForbidden handles this case with default header values.

Insufficient privilege to execute action
*/
type GetRolesGroupListForbidden struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetRolesGroupListForbidden) Error() string {
	return fmt.Sprintf("[GET /groups/{id}/roles][%d] getRolesGroupListForbidden  %+v", 403, o.Payload)
}

func (o *GetRolesGroupListForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetRolesGroupListForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRolesGroupListNotFound creates a GetRolesGroupListNotFound with default headers values
func NewGetRolesGroupListNotFound() *GetRolesGroupListNotFound {
	return &GetRolesGroupListNotFound{}
}

/*GetRolesGroupListNotFound handles this case with default header values.

Not found
*/
type GetRolesGroupListNotFound struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetRolesGroupListNotFound) Error() string {
	return fmt.Sprintf("[GET /groups/{id}/roles][%d] getRolesGroupListNotFound  %+v", 404, o.Payload)
}

func (o *GetRolesGroupListNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetRolesGroupListNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
