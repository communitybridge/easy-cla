// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package group_role

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/communitybridge/easycla/cla-backend-go/v2/acs-service/models"
)

// GetRoleGroupReader is a Reader for the GetRoleGroup structure.
type GetRoleGroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRoleGroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRoleGroupOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetRoleGroupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetRoleGroupUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetRoleGroupForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRoleGroupNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetRoleGroupOK creates a GetRoleGroupOK with default headers values
func NewGetRoleGroupOK() *GetRoleGroupOK {
	return &GetRoleGroupOK{}
}

/*GetRoleGroupOK handles this case with default header values.

Success
*/
type GetRoleGroupOK struct {
	/*Unique HttpRequest ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.GroupRoles
}

func (o *GetRoleGroupOK) Error() string {
	return fmt.Sprintf("[GET /groups/{id}/roles/{roleId}][%d] getRoleGroupOK  %+v", 200, o.Payload)
}

func (o *GetRoleGroupOK) GetPayload() *models.GroupRoles {
	return o.Payload
}

func (o *GetRoleGroupOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.GroupRoles)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoleGroupBadRequest creates a GetRoleGroupBadRequest with default headers values
func NewGetRoleGroupBadRequest() *GetRoleGroupBadRequest {
	return &GetRoleGroupBadRequest{}
}

/*GetRoleGroupBadRequest handles this case with default header values.

Invalid request
*/
type GetRoleGroupBadRequest struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetRoleGroupBadRequest) Error() string {
	return fmt.Sprintf("[GET /groups/{id}/roles/{roleId}][%d] getRoleGroupBadRequest  %+v", 400, o.Payload)
}

func (o *GetRoleGroupBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetRoleGroupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoleGroupUnauthorized creates a GetRoleGroupUnauthorized with default headers values
func NewGetRoleGroupUnauthorized() *GetRoleGroupUnauthorized {
	return &GetRoleGroupUnauthorized{}
}

/*GetRoleGroupUnauthorized handles this case with default header values.

Unauthorized
*/
type GetRoleGroupUnauthorized struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetRoleGroupUnauthorized) Error() string {
	return fmt.Sprintf("[GET /groups/{id}/roles/{roleId}][%d] getRoleGroupUnauthorized  %+v", 401, o.Payload)
}

func (o *GetRoleGroupUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetRoleGroupUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoleGroupForbidden creates a GetRoleGroupForbidden with default headers values
func NewGetRoleGroupForbidden() *GetRoleGroupForbidden {
	return &GetRoleGroupForbidden{}
}

/*GetRoleGroupForbidden handles this case with default header values.

Insufficient privilege to execute action
*/
type GetRoleGroupForbidden struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetRoleGroupForbidden) Error() string {
	return fmt.Sprintf("[GET /groups/{id}/roles/{roleId}][%d] getRoleGroupForbidden  %+v", 403, o.Payload)
}

func (o *GetRoleGroupForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetRoleGroupForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoleGroupNotFound creates a GetRoleGroupNotFound with default headers values
func NewGetRoleGroupNotFound() *GetRoleGroupNotFound {
	return &GetRoleGroupNotFound{}
}

/*GetRoleGroupNotFound handles this case with default header values.

Not found
*/
type GetRoleGroupNotFound struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetRoleGroupNotFound) Error() string {
	return fmt.Sprintf("[GET /groups/{id}/roles/{roleId}][%d] getRoleGroupNotFound  %+v", 404, o.Payload)
}

func (o *GetRoleGroupNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetRoleGroupNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
