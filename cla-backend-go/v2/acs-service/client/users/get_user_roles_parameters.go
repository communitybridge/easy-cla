// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetUserRolesParams creates a new GetUserRolesParams object
// with the default values initialized.
func NewGetUserRolesParams() *GetUserRolesParams {
	var ()
	return &GetUserRolesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetUserRolesParamsWithTimeout creates a new GetUserRolesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetUserRolesParamsWithTimeout(timeout time.Duration) *GetUserRolesParams {
	var ()
	return &GetUserRolesParams{

		timeout: timeout,
	}
}

// NewGetUserRolesParamsWithContext creates a new GetUserRolesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetUserRolesParamsWithContext(ctx context.Context) *GetUserRolesParams {
	var ()
	return &GetUserRolesParams{

		Context: ctx,
	}
}

// NewGetUserRolesParamsWithHTTPClient creates a new GetUserRolesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetUserRolesParamsWithHTTPClient(client *http.Client) *GetUserRolesParams {
	var ()
	return &GetUserRolesParams{
		HTTPClient: client,
	}
}

/*GetUserRolesParams contains all the parameters to send to the API endpoint
for the get user roles operation typically these are written to a http.Request
*/
type GetUserRolesParams struct {

	/*EmptyHeader
	  The access control list header value encoded as base64 - assigned by the API Gateway based on user/request permissions

	*/
	EmptyHeader string
	/*XEMAIL
	  Email of the person who is requesting an access

	*/
	XEMAIL *string
	/*XREQUESTID
	  The unique request ID value - assigned/set by the API Gateway based on the login session

	*/
	XREQUESTID *string
	/*XUSERNAME
	  Username of the person who is requesting an access

	*/
	XUSERNAME *string
	/*Usernames
	  The user name or user names as comma separated values, example: linus,npatel

	*/
	Usernames *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get user roles params
func (o *GetUserRolesParams) WithTimeout(timeout time.Duration) *GetUserRolesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get user roles params
func (o *GetUserRolesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get user roles params
func (o *GetUserRolesParams) WithContext(ctx context.Context) *GetUserRolesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get user roles params
func (o *GetUserRolesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get user roles params
func (o *GetUserRolesParams) WithHTTPClient(client *http.Client) *GetUserRolesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get user roles params
func (o *GetUserRolesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEmptyHeader adds the emptyHeader to the get user roles params
func (o *GetUserRolesParams) WithEmptyHeader(emptyHeader string) *GetUserRolesParams {
	o.SetEmptyHeader(emptyHeader)
	return o
}

// SetEmptyHeader adds the emptyHeader to the get user roles params
func (o *GetUserRolesParams) SetEmptyHeader(emptyHeader string) {
	o.EmptyHeader = emptyHeader
}

// WithXEMAIL adds the xEMAIL to the get user roles params
func (o *GetUserRolesParams) WithXEMAIL(xEMAIL *string) *GetUserRolesParams {
	o.SetXEMAIL(xEMAIL)
	return o
}

// SetXEMAIL adds the xEMAIL to the get user roles params
func (o *GetUserRolesParams) SetXEMAIL(xEMAIL *string) {
	o.XEMAIL = xEMAIL
}

// WithXREQUESTID adds the xREQUESTID to the get user roles params
func (o *GetUserRolesParams) WithXREQUESTID(xREQUESTID *string) *GetUserRolesParams {
	o.SetXREQUESTID(xREQUESTID)
	return o
}

// SetXREQUESTID adds the xREQUESTId to the get user roles params
func (o *GetUserRolesParams) SetXREQUESTID(xREQUESTID *string) {
	o.XREQUESTID = xREQUESTID
}

// WithXUSERNAME adds the xUSERNAME to the get user roles params
func (o *GetUserRolesParams) WithXUSERNAME(xUSERNAME *string) *GetUserRolesParams {
	o.SetXUSERNAME(xUSERNAME)
	return o
}

// SetXUSERNAME adds the xUSERNAME to the get user roles params
func (o *GetUserRolesParams) SetXUSERNAME(xUSERNAME *string) {
	o.XUSERNAME = xUSERNAME
}

// WithUsernames adds the usernames to the get user roles params
func (o *GetUserRolesParams) WithUsernames(usernames *string) *GetUserRolesParams {
	o.SetUsernames(usernames)
	return o
}

// SetUsernames adds the usernames to the get user roles params
func (o *GetUserRolesParams) SetUsernames(usernames *string) {
	o.Usernames = usernames
}

// WriteToRequest writes these params to a swagger request
func (o *GetUserRolesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Empty-Header
	if err := r.SetHeaderParam("Empty-Header", o.EmptyHeader); err != nil {
		return err
	}

	if o.XEMAIL != nil {

		// header param X-EMAIL
		if err := r.SetHeaderParam("X-EMAIL", *o.XEMAIL); err != nil {
			return err
		}

	}

	if o.XREQUESTID != nil {

		// header param X-REQUEST-ID
		if err := r.SetHeaderParam("X-REQUEST-ID", *o.XREQUESTID); err != nil {
			return err
		}

	}

	if o.XUSERNAME != nil {

		// header param X-USERNAME
		if err := r.SetHeaderParam("X-USERNAME", *o.XUSERNAME); err != nil {
			return err
		}

	}

	if o.Usernames != nil {

		// query param usernames
		var qrUsernames string
		if o.Usernames != nil {
			qrUsernames = *o.Usernames
		}
		qUsernames := qrUsernames
		if qUsernames != "" {
			if err := r.SetQueryParam("usernames", qUsernames); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
