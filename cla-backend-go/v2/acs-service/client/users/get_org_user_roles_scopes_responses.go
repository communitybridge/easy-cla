// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/communitybridge/easycla/cla-backend-go/v2/acs-service/models"
)

// GetOrgUserRolesScopesReader is a Reader for the GetOrgUserRolesScopes structure.
type GetOrgUserRolesScopesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOrgUserRolesScopesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetOrgUserRolesScopesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetOrgUserRolesScopesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetOrgUserRolesScopesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetOrgUserRolesScopesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetOrgUserRolesScopesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetOrgUserRolesScopesOK creates a GetOrgUserRolesScopesOK with default headers values
func NewGetOrgUserRolesScopesOK() *GetOrgUserRolesScopesOK {
	return &GetOrgUserRolesScopesOK{}
}

/*GetOrgUserRolesScopesOK handles this case with default header values.

Success
*/
type GetOrgUserRolesScopesOK struct {
	Payload *models.OrgUsernameRoleScope
}

func (o *GetOrgUserRolesScopesOK) Error() string {
	return fmt.Sprintf("[GET /users/rolescopes/organization][%d] getOrgUserRolesScopesOK  %+v", 200, o.Payload)
}

func (o *GetOrgUserRolesScopesOK) GetPayload() *models.OrgUsernameRoleScope {
	return o.Payload
}

func (o *GetOrgUserRolesScopesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OrgUsernameRoleScope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOrgUserRolesScopesBadRequest creates a GetOrgUserRolesScopesBadRequest with default headers values
func NewGetOrgUserRolesScopesBadRequest() *GetOrgUserRolesScopesBadRequest {
	return &GetOrgUserRolesScopesBadRequest{}
}

/*GetOrgUserRolesScopesBadRequest handles this case with default header values.

Invalid request
*/
type GetOrgUserRolesScopesBadRequest struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetOrgUserRolesScopesBadRequest) Error() string {
	return fmt.Sprintf("[GET /users/rolescopes/organization][%d] getOrgUserRolesScopesBadRequest  %+v", 400, o.Payload)
}

func (o *GetOrgUserRolesScopesBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetOrgUserRolesScopesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOrgUserRolesScopesUnauthorized creates a GetOrgUserRolesScopesUnauthorized with default headers values
func NewGetOrgUserRolesScopesUnauthorized() *GetOrgUserRolesScopesUnauthorized {
	return &GetOrgUserRolesScopesUnauthorized{}
}

/*GetOrgUserRolesScopesUnauthorized handles this case with default header values.

Unauthorized
*/
type GetOrgUserRolesScopesUnauthorized struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetOrgUserRolesScopesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /users/rolescopes/organization][%d] getOrgUserRolesScopesUnauthorized  %+v", 401, o.Payload)
}

func (o *GetOrgUserRolesScopesUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetOrgUserRolesScopesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOrgUserRolesScopesForbidden creates a GetOrgUserRolesScopesForbidden with default headers values
func NewGetOrgUserRolesScopesForbidden() *GetOrgUserRolesScopesForbidden {
	return &GetOrgUserRolesScopesForbidden{}
}

/*GetOrgUserRolesScopesForbidden handles this case with default header values.

Insufficient privilege to execute action
*/
type GetOrgUserRolesScopesForbidden struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetOrgUserRolesScopesForbidden) Error() string {
	return fmt.Sprintf("[GET /users/rolescopes/organization][%d] getOrgUserRolesScopesForbidden  %+v", 403, o.Payload)
}

func (o *GetOrgUserRolesScopesForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetOrgUserRolesScopesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOrgUserRolesScopesNotFound creates a GetOrgUserRolesScopesNotFound with default headers values
func NewGetOrgUserRolesScopesNotFound() *GetOrgUserRolesScopesNotFound {
	return &GetOrgUserRolesScopesNotFound{}
}

/*GetOrgUserRolesScopesNotFound handles this case with default header values.

Not found
*/
type GetOrgUserRolesScopesNotFound struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetOrgUserRolesScopesNotFound) Error() string {
	return fmt.Sprintf("[GET /users/rolescopes/organization][%d] getOrgUserRolesScopesNotFound  %+v", 404, o.Payload)
}

func (o *GetOrgUserRolesScopesNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetOrgUserRolesScopesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
