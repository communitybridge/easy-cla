// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/communitybridge/easycla/cla-backend-go/v2/acs-service/models"
)

// GetUserDetailReader is a Reader for the GetUserDetail structure.
type GetUserDetailReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetUserDetailReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetUserDetailOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetUserDetailBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetUserDetailUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetUserDetailForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetUserDetailNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetUserDetailOK creates a GetUserDetailOK with default headers values
func NewGetUserDetailOK() *GetUserDetailOK {
	return &GetUserDetailOK{}
}

/*GetUserDetailOK handles this case with default header values.

Success
*/
type GetUserDetailOK struct {
	Payload *models.User
}

func (o *GetUserDetailOK) Error() string {
	return fmt.Sprintf("[GET /users/{username}][%d] getUserDetailOK  %+v", 200, o.Payload)
}

func (o *GetUserDetailOK) GetPayload() *models.User {
	return o.Payload
}

func (o *GetUserDetailOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.User)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserDetailBadRequest creates a GetUserDetailBadRequest with default headers values
func NewGetUserDetailBadRequest() *GetUserDetailBadRequest {
	return &GetUserDetailBadRequest{}
}

/*GetUserDetailBadRequest handles this case with default header values.

Invalid request
*/
type GetUserDetailBadRequest struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetUserDetailBadRequest) Error() string {
	return fmt.Sprintf("[GET /users/{username}][%d] getUserDetailBadRequest  %+v", 400, o.Payload)
}

func (o *GetUserDetailBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetUserDetailBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserDetailUnauthorized creates a GetUserDetailUnauthorized with default headers values
func NewGetUserDetailUnauthorized() *GetUserDetailUnauthorized {
	return &GetUserDetailUnauthorized{}
}

/*GetUserDetailUnauthorized handles this case with default header values.

Unauthorized
*/
type GetUserDetailUnauthorized struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetUserDetailUnauthorized) Error() string {
	return fmt.Sprintf("[GET /users/{username}][%d] getUserDetailUnauthorized  %+v", 401, o.Payload)
}

func (o *GetUserDetailUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetUserDetailUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserDetailForbidden creates a GetUserDetailForbidden with default headers values
func NewGetUserDetailForbidden() *GetUserDetailForbidden {
	return &GetUserDetailForbidden{}
}

/*GetUserDetailForbidden handles this case with default header values.

Insufficient privilege to execute action
*/
type GetUserDetailForbidden struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetUserDetailForbidden) Error() string {
	return fmt.Sprintf("[GET /users/{username}][%d] getUserDetailForbidden  %+v", 403, o.Payload)
}

func (o *GetUserDetailForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetUserDetailForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserDetailNotFound creates a GetUserDetailNotFound with default headers values
func NewGetUserDetailNotFound() *GetUserDetailNotFound {
	return &GetUserDetailNotFound{}
}

/*GetUserDetailNotFound handles this case with default header values.

Not found
*/
type GetUserDetailNotFound struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetUserDetailNotFound) Error() string {
	return fmt.Sprintf("[GET /users/{username}][%d] getUserDetailNotFound  %+v", 404, o.Payload)
}

func (o *GetUserDetailNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetUserDetailNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
