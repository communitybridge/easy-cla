// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/communitybridge/easycla/cla-backend-go/v2/acs-service/models"
)

// UpdateUserRoleScopeReader is a Reader for the UpdateUserRoleScope structure.
type UpdateUserRoleScopeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateUserRoleScopeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateUserRoleScopeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateUserRoleScopeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateUserRoleScopeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateUserRoleScopeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateUserRoleScopeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateUserRoleScopeOK creates a UpdateUserRoleScopeOK with default headers values
func NewUpdateUserRoleScopeOK() *UpdateUserRoleScopeOK {
	return &UpdateUserRoleScopeOK{}
}

/*UpdateUserRoleScopeOK handles this case with default header values.

Success
*/
type UpdateUserRoleScopeOK struct {
	Payload *models.UserRoleScope
}

func (o *UpdateUserRoleScopeOK) Error() string {
	return fmt.Sprintf("[PUT /users/roles/grants/{grantID}][%d] updateUserRoleScopeOK  %+v", 200, o.Payload)
}

func (o *UpdateUserRoleScopeOK) GetPayload() *models.UserRoleScope {
	return o.Payload
}

func (o *UpdateUserRoleScopeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UserRoleScope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUserRoleScopeBadRequest creates a UpdateUserRoleScopeBadRequest with default headers values
func NewUpdateUserRoleScopeBadRequest() *UpdateUserRoleScopeBadRequest {
	return &UpdateUserRoleScopeBadRequest{}
}

/*UpdateUserRoleScopeBadRequest handles this case with default header values.

Invalid request
*/
type UpdateUserRoleScopeBadRequest struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *UpdateUserRoleScopeBadRequest) Error() string {
	return fmt.Sprintf("[PUT /users/roles/grants/{grantID}][%d] updateUserRoleScopeBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateUserRoleScopeBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateUserRoleScopeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUserRoleScopeUnauthorized creates a UpdateUserRoleScopeUnauthorized with default headers values
func NewUpdateUserRoleScopeUnauthorized() *UpdateUserRoleScopeUnauthorized {
	return &UpdateUserRoleScopeUnauthorized{}
}

/*UpdateUserRoleScopeUnauthorized handles this case with default header values.

Unauthorized
*/
type UpdateUserRoleScopeUnauthorized struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *UpdateUserRoleScopeUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /users/roles/grants/{grantID}][%d] updateUserRoleScopeUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateUserRoleScopeUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateUserRoleScopeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUserRoleScopeForbidden creates a UpdateUserRoleScopeForbidden with default headers values
func NewUpdateUserRoleScopeForbidden() *UpdateUserRoleScopeForbidden {
	return &UpdateUserRoleScopeForbidden{}
}

/*UpdateUserRoleScopeForbidden handles this case with default header values.

Insufficient privilege to execute action
*/
type UpdateUserRoleScopeForbidden struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *UpdateUserRoleScopeForbidden) Error() string {
	return fmt.Sprintf("[PUT /users/roles/grants/{grantID}][%d] updateUserRoleScopeForbidden  %+v", 403, o.Payload)
}

func (o *UpdateUserRoleScopeForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateUserRoleScopeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUserRoleScopeNotFound creates a UpdateUserRoleScopeNotFound with default headers values
func NewUpdateUserRoleScopeNotFound() *UpdateUserRoleScopeNotFound {
	return &UpdateUserRoleScopeNotFound{}
}

/*UpdateUserRoleScopeNotFound handles this case with default header values.

Not found
*/
type UpdateUserRoleScopeNotFound struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *UpdateUserRoleScopeNotFound) Error() string {
	return fmt.Sprintf("[PUT /users/roles/grants/{grantID}][%d] updateUserRoleScopeNotFound  %+v", 404, o.Payload)
}

func (o *UpdateUserRoleScopeNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateUserRoleScopeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
