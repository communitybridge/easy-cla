// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/communitybridge/easycla/cla-backend-go/v2/acs-service/models"
)

// GetUserListReader is a Reader for the GetUserList structure.
type GetUserListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetUserListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetUserListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetUserListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetUserListUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetUserListForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetUserListNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetUserListOK creates a GetUserListOK with default headers values
func NewGetUserListOK() *GetUserListOK {
	return &GetUserListOK{}
}

/*GetUserListOK handles this case with default header values.

Success
*/
type GetUserListOK struct {
	Payload []*models.User
}

func (o *GetUserListOK) Error() string {
	return fmt.Sprintf("[GET /users][%d] getUserListOK  %+v", 200, o.Payload)
}

func (o *GetUserListOK) GetPayload() []*models.User {
	return o.Payload
}

func (o *GetUserListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserListBadRequest creates a GetUserListBadRequest with default headers values
func NewGetUserListBadRequest() *GetUserListBadRequest {
	return &GetUserListBadRequest{}
}

/*GetUserListBadRequest handles this case with default header values.

Invalid request
*/
type GetUserListBadRequest struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetUserListBadRequest) Error() string {
	return fmt.Sprintf("[GET /users][%d] getUserListBadRequest  %+v", 400, o.Payload)
}

func (o *GetUserListBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetUserListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserListUnauthorized creates a GetUserListUnauthorized with default headers values
func NewGetUserListUnauthorized() *GetUserListUnauthorized {
	return &GetUserListUnauthorized{}
}

/*GetUserListUnauthorized handles this case with default header values.

Unauthorized
*/
type GetUserListUnauthorized struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetUserListUnauthorized) Error() string {
	return fmt.Sprintf("[GET /users][%d] getUserListUnauthorized  %+v", 401, o.Payload)
}

func (o *GetUserListUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetUserListUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserListForbidden creates a GetUserListForbidden with default headers values
func NewGetUserListForbidden() *GetUserListForbidden {
	return &GetUserListForbidden{}
}

/*GetUserListForbidden handles this case with default header values.

Insufficient privilege to execute action
*/
type GetUserListForbidden struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetUserListForbidden) Error() string {
	return fmt.Sprintf("[GET /users][%d] getUserListForbidden  %+v", 403, o.Payload)
}

func (o *GetUserListForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetUserListForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserListNotFound creates a GetUserListNotFound with default headers values
func NewGetUserListNotFound() *GetUserListNotFound {
	return &GetUserListNotFound{}
}

/*GetUserListNotFound handles this case with default header values.

Not found
*/
type GetUserListNotFound struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetUserListNotFound) Error() string {
	return fmt.Sprintf("[GET /users][%d] getUserListNotFound  %+v", 404, o.Payload)
}

func (o *GetUserListNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetUserListNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
