// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new users API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for users API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateUserRoles(params *CreateUserRolesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateUserRolesCreated, error)

	GetOrgUserRolesScopes(params *GetOrgUserRolesScopesParams, authInfo runtime.ClientAuthInfoWriter) (*GetOrgUserRolesScopesOK, error)

	GetUserDetail(params *GetUserDetailParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserDetailOK, error)

	GetUserList(params *GetUserListParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserListOK, error)

	GetUserRoles(params *GetUserRolesParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserRolesOK, error)

	GetUsersRolesScopes(params *GetUsersRolesScopesParams, authInfo runtime.ClientAuthInfoWriter) (*GetUsersRolesScopesOK, error)

	UpdateUserRoleScope(params *UpdateUserRoleScopeParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateUserRoleScopeOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateUserRoles creates user roles association

  Assign a User to list of roles.
*/
func (a *Client) CreateUserRoles(params *CreateUserRolesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateUserRolesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUserRolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createUserRoles",
		Method:             "POST",
		PathPattern:        "/users/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateUserRolesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateUserRolesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createUserRoles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrgUserRolesScopes gets organization user roles scopes

  Get role scopes of username(or multiple username, if parameter is comma separated values) that returns map with username as key and array of role and scopes
*/
func (a *Client) GetOrgUserRolesScopes(params *GetOrgUserRolesScopesParams, authInfo runtime.ClientAuthInfoWriter) (*GetOrgUserRolesScopesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrgUserRolesScopesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOrgUserRolesScopes",
		Method:             "GET",
		PathPattern:        "/users/rolescopes/organization",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrgUserRolesScopesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrgUserRolesScopesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrgUserRolesScopes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUserDetail gets user details p r i v a t e

  Get a single user from user service. Used by `MyAccount UI`
*/
func (a *Client) GetUserDetail(params *GetUserDetailParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserDetailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserDetailParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserDetail",
		Method:             "GET",
		PathPattern:        "/users/{username}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserDetailReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserDetailOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUserDetail: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUserList gets user list p r i v a t e

  List the current users from user service. Used by `MyAccount UI`
*/
func (a *Client) GetUserList(params *GetUserListParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserList",
		Method:             "GET",
		PathPattern:        "/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUserList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUserRoles gets user roles

  Get roles of username or multiple usernames (comma separated) that returns map with username as key and array of roles as value
*/
func (a *Client) GetUserRoles(params *GetUserRolesParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserRolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserRoles",
		Method:             "GET",
		PathPattern:        "/users/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserRolesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUserRoles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUsersRolesScopes gets users roles scopes association

  Get role scopes of username(or multiple username, if parameter is comma separated values) that returns map with username as key and array of role and scopes
*/
func (a *Client) GetUsersRolesScopes(params *GetUsersRolesScopesParams, authInfo runtime.ClientAuthInfoWriter) (*GetUsersRolesScopesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersRolesScopesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUsersRolesScopes",
		Method:             "GET",
		PathPattern:        "/users/rolescopes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUsersRolesScopesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUsersRolesScopesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUsersRolesScopes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateUserRoleScope updates user role scope association

  Update the user scopes by grantID
*/
func (a *Client) UpdateUserRoleScope(params *UpdateUserRoleScopeParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateUserRoleScopeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUserRoleScopeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateUserRoleScope",
		Method:             "PUT",
		PathPattern:        "/users/roles/grants/{grantID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateUserRoleScopeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateUserRoleScopeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateUserRoleScope: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
