// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/communitybridge/easycla/cla-backend-go/v2/acs-service/models"
)

// GetUserRolesReader is a Reader for the GetUserRoles structure.
type GetUserRolesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetUserRolesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetUserRolesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetUserRolesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetUserRolesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetUserRolesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetUserRolesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetUserRolesOK creates a GetUserRolesOK with default headers values
func NewGetUserRolesOK() *GetUserRolesOK {
	return &GetUserRolesOK{}
}

/*GetUserRolesOK handles this case with default header values.

Success
*/
type GetUserRolesOK struct {
	Payload map[string][]models.RoleOnly
}

func (o *GetUserRolesOK) Error() string {
	return fmt.Sprintf("[GET /users/roles][%d] getUserRolesOK  %+v", 200, o.Payload)
}

func (o *GetUserRolesOK) GetPayload() map[string][]models.RoleOnly {
	return o.Payload
}

func (o *GetUserRolesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserRolesBadRequest creates a GetUserRolesBadRequest with default headers values
func NewGetUserRolesBadRequest() *GetUserRolesBadRequest {
	return &GetUserRolesBadRequest{}
}

/*GetUserRolesBadRequest handles this case with default header values.

Invalid request
*/
type GetUserRolesBadRequest struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetUserRolesBadRequest) Error() string {
	return fmt.Sprintf("[GET /users/roles][%d] getUserRolesBadRequest  %+v", 400, o.Payload)
}

func (o *GetUserRolesBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetUserRolesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserRolesUnauthorized creates a GetUserRolesUnauthorized with default headers values
func NewGetUserRolesUnauthorized() *GetUserRolesUnauthorized {
	return &GetUserRolesUnauthorized{}
}

/*GetUserRolesUnauthorized handles this case with default header values.

Unauthorized
*/
type GetUserRolesUnauthorized struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetUserRolesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /users/roles][%d] getUserRolesUnauthorized  %+v", 401, o.Payload)
}

func (o *GetUserRolesUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetUserRolesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserRolesForbidden creates a GetUserRolesForbidden with default headers values
func NewGetUserRolesForbidden() *GetUserRolesForbidden {
	return &GetUserRolesForbidden{}
}

/*GetUserRolesForbidden handles this case with default header values.

Insufficient privilege to execute action
*/
type GetUserRolesForbidden struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetUserRolesForbidden) Error() string {
	return fmt.Sprintf("[GET /users/roles][%d] getUserRolesForbidden  %+v", 403, o.Payload)
}

func (o *GetUserRolesForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetUserRolesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserRolesNotFound creates a GetUserRolesNotFound with default headers values
func NewGetUserRolesNotFound() *GetUserRolesNotFound {
	return &GetUserRolesNotFound{}
}

/*GetUserRolesNotFound handles this case with default header values.

Not found
*/
type GetUserRolesNotFound struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetUserRolesNotFound) Error() string {
	return fmt.Sprintf("[GET /users/roles][%d] getUserRolesNotFound  %+v", 404, o.Payload)
}

func (o *GetUserRolesNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetUserRolesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
