// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/communitybridge/easycla/cla-backend-go/v2/acs-service/models"
)

// GetServiceListReader is a Reader for the GetServiceList structure.
type GetServiceListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetServiceListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetServiceListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetServiceListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetServiceListUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetServiceListForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetServiceListNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetServiceListOK creates a GetServiceListOK with default headers values
func NewGetServiceListOK() *GetServiceListOK {
	return &GetServiceListOK{}
}

/*GetServiceListOK handles this case with default header values.

Success
*/
type GetServiceListOK struct {
	Payload []*models.Service
}

func (o *GetServiceListOK) Error() string {
	return fmt.Sprintf("[GET /services][%d] getServiceListOK  %+v", 200, o.Payload)
}

func (o *GetServiceListOK) GetPayload() []*models.Service {
	return o.Payload
}

func (o *GetServiceListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServiceListBadRequest creates a GetServiceListBadRequest with default headers values
func NewGetServiceListBadRequest() *GetServiceListBadRequest {
	return &GetServiceListBadRequest{}
}

/*GetServiceListBadRequest handles this case with default header values.

Invalid request
*/
type GetServiceListBadRequest struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetServiceListBadRequest) Error() string {
	return fmt.Sprintf("[GET /services][%d] getServiceListBadRequest  %+v", 400, o.Payload)
}

func (o *GetServiceListBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetServiceListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServiceListUnauthorized creates a GetServiceListUnauthorized with default headers values
func NewGetServiceListUnauthorized() *GetServiceListUnauthorized {
	return &GetServiceListUnauthorized{}
}

/*GetServiceListUnauthorized handles this case with default header values.

Unauthorized
*/
type GetServiceListUnauthorized struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetServiceListUnauthorized) Error() string {
	return fmt.Sprintf("[GET /services][%d] getServiceListUnauthorized  %+v", 401, o.Payload)
}

func (o *GetServiceListUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetServiceListUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServiceListForbidden creates a GetServiceListForbidden with default headers values
func NewGetServiceListForbidden() *GetServiceListForbidden {
	return &GetServiceListForbidden{}
}

/*GetServiceListForbidden handles this case with default header values.

Insufficient privilege to execute action
*/
type GetServiceListForbidden struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetServiceListForbidden) Error() string {
	return fmt.Sprintf("[GET /services][%d] getServiceListForbidden  %+v", 403, o.Payload)
}

func (o *GetServiceListForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetServiceListForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServiceListNotFound creates a GetServiceListNotFound with default headers values
func NewGetServiceListNotFound() *GetServiceListNotFound {
	return &GetServiceListNotFound{}
}

/*GetServiceListNotFound handles this case with default header values.

Not found
*/
type GetServiceListNotFound struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetServiceListNotFound) Error() string {
	return fmt.Sprintf("[GET /services][%d] getServiceListNotFound  %+v", 404, o.Payload)
}

func (o *GetServiceListNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetServiceListNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
