// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/communitybridge/easycla/cla-backend-go/v2/acs-service/models"
)

// GetServiceResourceActionsReader is a Reader for the GetServiceResourceActions structure.
type GetServiceResourceActionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetServiceResourceActionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetServiceResourceActionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetServiceResourceActionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetServiceResourceActionsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetServiceResourceActionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetServiceResourceActionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetServiceResourceActionsOK creates a GetServiceResourceActionsOK with default headers values
func NewGetServiceResourceActionsOK() *GetServiceResourceActionsOK {
	return &GetServiceResourceActionsOK{}
}

/*GetServiceResourceActionsOK handles this case with default header values.

Success
*/
type GetServiceResourceActionsOK struct {
	Payload []*models.ServiceResourceAction
}

func (o *GetServiceResourceActionsOK) Error() string {
	return fmt.Sprintf("[GET /services/{serviceId}/resource-actions][%d] getServiceResourceActionsOK  %+v", 200, o.Payload)
}

func (o *GetServiceResourceActionsOK) GetPayload() []*models.ServiceResourceAction {
	return o.Payload
}

func (o *GetServiceResourceActionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServiceResourceActionsBadRequest creates a GetServiceResourceActionsBadRequest with default headers values
func NewGetServiceResourceActionsBadRequest() *GetServiceResourceActionsBadRequest {
	return &GetServiceResourceActionsBadRequest{}
}

/*GetServiceResourceActionsBadRequest handles this case with default header values.

Invalid request
*/
type GetServiceResourceActionsBadRequest struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetServiceResourceActionsBadRequest) Error() string {
	return fmt.Sprintf("[GET /services/{serviceId}/resource-actions][%d] getServiceResourceActionsBadRequest  %+v", 400, o.Payload)
}

func (o *GetServiceResourceActionsBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetServiceResourceActionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServiceResourceActionsUnauthorized creates a GetServiceResourceActionsUnauthorized with default headers values
func NewGetServiceResourceActionsUnauthorized() *GetServiceResourceActionsUnauthorized {
	return &GetServiceResourceActionsUnauthorized{}
}

/*GetServiceResourceActionsUnauthorized handles this case with default header values.

Unauthorized
*/
type GetServiceResourceActionsUnauthorized struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetServiceResourceActionsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /services/{serviceId}/resource-actions][%d] getServiceResourceActionsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetServiceResourceActionsUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetServiceResourceActionsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServiceResourceActionsForbidden creates a GetServiceResourceActionsForbidden with default headers values
func NewGetServiceResourceActionsForbidden() *GetServiceResourceActionsForbidden {
	return &GetServiceResourceActionsForbidden{}
}

/*GetServiceResourceActionsForbidden handles this case with default header values.

Insufficient privilege to execute action
*/
type GetServiceResourceActionsForbidden struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetServiceResourceActionsForbidden) Error() string {
	return fmt.Sprintf("[GET /services/{serviceId}/resource-actions][%d] getServiceResourceActionsForbidden  %+v", 403, o.Payload)
}

func (o *GetServiceResourceActionsForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetServiceResourceActionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServiceResourceActionsNotFound creates a GetServiceResourceActionsNotFound with default headers values
func NewGetServiceResourceActionsNotFound() *GetServiceResourceActionsNotFound {
	return &GetServiceResourceActionsNotFound{}
}

/*GetServiceResourceActionsNotFound handles this case with default header values.

Not found
*/
type GetServiceResourceActionsNotFound struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetServiceResourceActionsNotFound) Error() string {
	return fmt.Sprintf("[GET /services/{serviceId}/resource-actions][%d] getServiceResourceActionsNotFound  %+v", 404, o.Payload)
}

func (o *GetServiceResourceActionsNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetServiceResourceActionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
