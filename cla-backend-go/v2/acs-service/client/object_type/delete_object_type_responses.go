// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package object_type

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/communitybridge/easycla/cla-backend-go/v2/acs-service/models"
)

// DeleteObjectTypeReader is a Reader for the DeleteObjectType structure.
type DeleteObjectTypeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteObjectTypeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteObjectTypeNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteObjectTypeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteObjectTypeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteObjectTypeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteObjectTypeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteObjectTypeNoContent creates a DeleteObjectTypeNoContent with default headers values
func NewDeleteObjectTypeNoContent() *DeleteObjectTypeNoContent {
	return &DeleteObjectTypeNoContent{}
}

/*DeleteObjectTypeNoContent handles this case with default header values.

An empty response
*/
type DeleteObjectTypeNoContent struct {
}

func (o *DeleteObjectTypeNoContent) Error() string {
	return fmt.Sprintf("[DELETE /object-types/{id}][%d] deleteObjectTypeNoContent ", 204)
}

func (o *DeleteObjectTypeNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteObjectTypeBadRequest creates a DeleteObjectTypeBadRequest with default headers values
func NewDeleteObjectTypeBadRequest() *DeleteObjectTypeBadRequest {
	return &DeleteObjectTypeBadRequest{}
}

/*DeleteObjectTypeBadRequest handles this case with default header values.

Invalid request
*/
type DeleteObjectTypeBadRequest struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *DeleteObjectTypeBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /object-types/{id}][%d] deleteObjectTypeBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteObjectTypeBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DeleteObjectTypeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteObjectTypeUnauthorized creates a DeleteObjectTypeUnauthorized with default headers values
func NewDeleteObjectTypeUnauthorized() *DeleteObjectTypeUnauthorized {
	return &DeleteObjectTypeUnauthorized{}
}

/*DeleteObjectTypeUnauthorized handles this case with default header values.

Unauthorized
*/
type DeleteObjectTypeUnauthorized struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *DeleteObjectTypeUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /object-types/{id}][%d] deleteObjectTypeUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteObjectTypeUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DeleteObjectTypeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteObjectTypeForbidden creates a DeleteObjectTypeForbidden with default headers values
func NewDeleteObjectTypeForbidden() *DeleteObjectTypeForbidden {
	return &DeleteObjectTypeForbidden{}
}

/*DeleteObjectTypeForbidden handles this case with default header values.

Insufficient privilege to execute action
*/
type DeleteObjectTypeForbidden struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *DeleteObjectTypeForbidden) Error() string {
	return fmt.Sprintf("[DELETE /object-types/{id}][%d] deleteObjectTypeForbidden  %+v", 403, o.Payload)
}

func (o *DeleteObjectTypeForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DeleteObjectTypeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteObjectTypeNotFound creates a DeleteObjectTypeNotFound with default headers values
func NewDeleteObjectTypeNotFound() *DeleteObjectTypeNotFound {
	return &DeleteObjectTypeNotFound{}
}

/*DeleteObjectTypeNotFound handles this case with default header values.

Not found
*/
type DeleteObjectTypeNotFound struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *DeleteObjectTypeNotFound) Error() string {
	return fmt.Sprintf("[DELETE /object-types/{id}][%d] deleteObjectTypeNotFound  %+v", 404, o.Payload)
}

func (o *DeleteObjectTypeNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DeleteObjectTypeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
