// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package object_type

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new object type API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for object type API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateObjectType(params *CreateObjectTypeParams, authInfo runtime.ClientAuthInfoWriter) (*CreateObjectTypeCreated, error)

	DeleteObjectType(params *DeleteObjectTypeParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteObjectTypeNoContent, error)

	GetObjectType(params *GetObjectTypeParams, authInfo runtime.ClientAuthInfoWriter) (*GetObjectTypeOK, error)

	GetObjectTypeList(params *GetObjectTypeListParams, authInfo runtime.ClientAuthInfoWriter) (*GetObjectTypeListOK, error)

	UpdateObjectType(params *UpdateObjectTypeParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateObjectTypeOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateObjectType creates object type p r i v a t e

  Create a new object type (Scope Type). e.g. Project, Organization, Traning. Used by `ACS-CLI`
*/
func (a *Client) CreateObjectType(params *CreateObjectTypeParams, authInfo runtime.ClientAuthInfoWriter) (*CreateObjectTypeCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateObjectTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createObjectType",
		Method:             "POST",
		PathPattern:        "/object-types",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateObjectTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateObjectTypeCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createObjectType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteObjectType deletes object type p r i v a t e

  Delete an existing object type. Used by `ACS-CLI`
*/
func (a *Client) DeleteObjectType(params *DeleteObjectTypeParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteObjectTypeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteObjectTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteObjectType",
		Method:             "DELETE",
		PathPattern:        "/object-types/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteObjectTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteObjectTypeNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteObjectType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetObjectType gets object type

  Get object type by type id or type name
*/
func (a *Client) GetObjectType(params *GetObjectTypeParams, authInfo runtime.ClientAuthInfoWriter) (*GetObjectTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetObjectTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getObjectType",
		Method:             "GET",
		PathPattern:        "/object-types/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetObjectTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetObjectTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getObjectType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetObjectTypeList gets object type list

  List the object types
*/
func (a *Client) GetObjectTypeList(params *GetObjectTypeListParams, authInfo runtime.ClientAuthInfoWriter) (*GetObjectTypeListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetObjectTypeListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getObjectTypeList",
		Method:             "GET",
		PathPattern:        "/object-types",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetObjectTypeListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetObjectTypeListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getObjectTypeList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateObjectType updates object type p r i v a t e

  Update an existing object type. Used by `ACS-CLI`
*/
func (a *Client) UpdateObjectType(params *UpdateObjectTypeParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateObjectTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateObjectTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateObjectType",
		Method:             "PUT",
		PathPattern:        "/object-types/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateObjectTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateObjectTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateObjectType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
