// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package object_type

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/communitybridge/easycla/cla-backend-go/v2/acs-service/models"
)

// CreateObjectTypeReader is a Reader for the CreateObjectType structure.
type CreateObjectTypeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateObjectTypeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateObjectTypeCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateObjectTypeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreateObjectTypeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateObjectTypeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateObjectTypeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateObjectTypeConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCreateObjectTypeCreated creates a CreateObjectTypeCreated with default headers values
func NewCreateObjectTypeCreated() *CreateObjectTypeCreated {
	return &CreateObjectTypeCreated{}
}

/*CreateObjectTypeCreated handles this case with default header values.

Created
*/
type CreateObjectTypeCreated struct {
	Payload *models.ObjectType
}

func (o *CreateObjectTypeCreated) Error() string {
	return fmt.Sprintf("[POST /object-types][%d] createObjectTypeCreated  %+v", 201, o.Payload)
}

func (o *CreateObjectTypeCreated) GetPayload() *models.ObjectType {
	return o.Payload
}

func (o *CreateObjectTypeCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ObjectType)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateObjectTypeBadRequest creates a CreateObjectTypeBadRequest with default headers values
func NewCreateObjectTypeBadRequest() *CreateObjectTypeBadRequest {
	return &CreateObjectTypeBadRequest{}
}

/*CreateObjectTypeBadRequest handles this case with default header values.

Invalid request
*/
type CreateObjectTypeBadRequest struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *CreateObjectTypeBadRequest) Error() string {
	return fmt.Sprintf("[POST /object-types][%d] createObjectTypeBadRequest  %+v", 400, o.Payload)
}

func (o *CreateObjectTypeBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateObjectTypeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateObjectTypeUnauthorized creates a CreateObjectTypeUnauthorized with default headers values
func NewCreateObjectTypeUnauthorized() *CreateObjectTypeUnauthorized {
	return &CreateObjectTypeUnauthorized{}
}

/*CreateObjectTypeUnauthorized handles this case with default header values.

Unauthorized
*/
type CreateObjectTypeUnauthorized struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *CreateObjectTypeUnauthorized) Error() string {
	return fmt.Sprintf("[POST /object-types][%d] createObjectTypeUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateObjectTypeUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateObjectTypeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateObjectTypeForbidden creates a CreateObjectTypeForbidden with default headers values
func NewCreateObjectTypeForbidden() *CreateObjectTypeForbidden {
	return &CreateObjectTypeForbidden{}
}

/*CreateObjectTypeForbidden handles this case with default header values.

Insufficient privilege to execute action
*/
type CreateObjectTypeForbidden struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *CreateObjectTypeForbidden) Error() string {
	return fmt.Sprintf("[POST /object-types][%d] createObjectTypeForbidden  %+v", 403, o.Payload)
}

func (o *CreateObjectTypeForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateObjectTypeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateObjectTypeNotFound creates a CreateObjectTypeNotFound with default headers values
func NewCreateObjectTypeNotFound() *CreateObjectTypeNotFound {
	return &CreateObjectTypeNotFound{}
}

/*CreateObjectTypeNotFound handles this case with default header values.

Not found
*/
type CreateObjectTypeNotFound struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *CreateObjectTypeNotFound) Error() string {
	return fmt.Sprintf("[POST /object-types][%d] createObjectTypeNotFound  %+v", 404, o.Payload)
}

func (o *CreateObjectTypeNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateObjectTypeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateObjectTypeConflict creates a CreateObjectTypeConflict with default headers values
func NewCreateObjectTypeConflict() *CreateObjectTypeConflict {
	return &CreateObjectTypeConflict{}
}

/*CreateObjectTypeConflict handles this case with default header values.

Duplicate Resource
*/
type CreateObjectTypeConflict struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *CreateObjectTypeConflict) Error() string {
	return fmt.Sprintf("[POST /object-types][%d] createObjectTypeConflict  %+v", 409, o.Payload)
}

func (o *CreateObjectTypeConflict) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateObjectTypeConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
