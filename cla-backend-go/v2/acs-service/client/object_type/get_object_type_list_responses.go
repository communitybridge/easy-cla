// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package object_type

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/communitybridge/easycla/cla-backend-go/v2/acs-service/models"
)

// GetObjectTypeListReader is a Reader for the GetObjectTypeList structure.
type GetObjectTypeListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetObjectTypeListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetObjectTypeListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetObjectTypeListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetObjectTypeListUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetObjectTypeListForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetObjectTypeListNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetObjectTypeListOK creates a GetObjectTypeListOK with default headers values
func NewGetObjectTypeListOK() *GetObjectTypeListOK {
	return &GetObjectTypeListOK{}
}

/*GetObjectTypeListOK handles this case with default header values.

Success
*/
type GetObjectTypeListOK struct {
	Payload []*models.ObjectType
}

func (o *GetObjectTypeListOK) Error() string {
	return fmt.Sprintf("[GET /object-types][%d] getObjectTypeListOK  %+v", 200, o.Payload)
}

func (o *GetObjectTypeListOK) GetPayload() []*models.ObjectType {
	return o.Payload
}

func (o *GetObjectTypeListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetObjectTypeListBadRequest creates a GetObjectTypeListBadRequest with default headers values
func NewGetObjectTypeListBadRequest() *GetObjectTypeListBadRequest {
	return &GetObjectTypeListBadRequest{}
}

/*GetObjectTypeListBadRequest handles this case with default header values.

Invalid request
*/
type GetObjectTypeListBadRequest struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetObjectTypeListBadRequest) Error() string {
	return fmt.Sprintf("[GET /object-types][%d] getObjectTypeListBadRequest  %+v", 400, o.Payload)
}

func (o *GetObjectTypeListBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetObjectTypeListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetObjectTypeListUnauthorized creates a GetObjectTypeListUnauthorized with default headers values
func NewGetObjectTypeListUnauthorized() *GetObjectTypeListUnauthorized {
	return &GetObjectTypeListUnauthorized{}
}

/*GetObjectTypeListUnauthorized handles this case with default header values.

Unauthorized
*/
type GetObjectTypeListUnauthorized struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetObjectTypeListUnauthorized) Error() string {
	return fmt.Sprintf("[GET /object-types][%d] getObjectTypeListUnauthorized  %+v", 401, o.Payload)
}

func (o *GetObjectTypeListUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetObjectTypeListUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetObjectTypeListForbidden creates a GetObjectTypeListForbidden with default headers values
func NewGetObjectTypeListForbidden() *GetObjectTypeListForbidden {
	return &GetObjectTypeListForbidden{}
}

/*GetObjectTypeListForbidden handles this case with default header values.

Insufficient privilege to execute action
*/
type GetObjectTypeListForbidden struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetObjectTypeListForbidden) Error() string {
	return fmt.Sprintf("[GET /object-types][%d] getObjectTypeListForbidden  %+v", 403, o.Payload)
}

func (o *GetObjectTypeListForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetObjectTypeListForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetObjectTypeListNotFound creates a GetObjectTypeListNotFound with default headers values
func NewGetObjectTypeListNotFound() *GetObjectTypeListNotFound {
	return &GetObjectTypeListNotFound{}
}

/*GetObjectTypeListNotFound handles this case with default header values.

Not found
*/
type GetObjectTypeListNotFound struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetObjectTypeListNotFound) Error() string {
	return fmt.Sprintf("[GET /object-types][%d] getObjectTypeListNotFound  %+v", 404, o.Payload)
}

func (o *GetObjectTypeListNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetObjectTypeListNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
