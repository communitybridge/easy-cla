// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package object_type

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/communitybridge/easycla/cla-backend-go/v2/acs-service/models"
)

// UpdateObjectTypeReader is a Reader for the UpdateObjectType structure.
type UpdateObjectTypeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateObjectTypeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateObjectTypeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateObjectTypeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateObjectTypeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateObjectTypeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateObjectTypeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateObjectTypeOK creates a UpdateObjectTypeOK with default headers values
func NewUpdateObjectTypeOK() *UpdateObjectTypeOK {
	return &UpdateObjectTypeOK{}
}

/*UpdateObjectTypeOK handles this case with default header values.

Success
*/
type UpdateObjectTypeOK struct {
	Payload *models.ObjectType
}

func (o *UpdateObjectTypeOK) Error() string {
	return fmt.Sprintf("[PUT /object-types/{id}][%d] updateObjectTypeOK  %+v", 200, o.Payload)
}

func (o *UpdateObjectTypeOK) GetPayload() *models.ObjectType {
	return o.Payload
}

func (o *UpdateObjectTypeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ObjectType)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateObjectTypeBadRequest creates a UpdateObjectTypeBadRequest with default headers values
func NewUpdateObjectTypeBadRequest() *UpdateObjectTypeBadRequest {
	return &UpdateObjectTypeBadRequest{}
}

/*UpdateObjectTypeBadRequest handles this case with default header values.

Invalid request
*/
type UpdateObjectTypeBadRequest struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *UpdateObjectTypeBadRequest) Error() string {
	return fmt.Sprintf("[PUT /object-types/{id}][%d] updateObjectTypeBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateObjectTypeBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateObjectTypeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateObjectTypeUnauthorized creates a UpdateObjectTypeUnauthorized with default headers values
func NewUpdateObjectTypeUnauthorized() *UpdateObjectTypeUnauthorized {
	return &UpdateObjectTypeUnauthorized{}
}

/*UpdateObjectTypeUnauthorized handles this case with default header values.

Unauthorized
*/
type UpdateObjectTypeUnauthorized struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *UpdateObjectTypeUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /object-types/{id}][%d] updateObjectTypeUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateObjectTypeUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateObjectTypeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateObjectTypeForbidden creates a UpdateObjectTypeForbidden with default headers values
func NewUpdateObjectTypeForbidden() *UpdateObjectTypeForbidden {
	return &UpdateObjectTypeForbidden{}
}

/*UpdateObjectTypeForbidden handles this case with default header values.

Insufficient privilege to execute action
*/
type UpdateObjectTypeForbidden struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *UpdateObjectTypeForbidden) Error() string {
	return fmt.Sprintf("[PUT /object-types/{id}][%d] updateObjectTypeForbidden  %+v", 403, o.Payload)
}

func (o *UpdateObjectTypeForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateObjectTypeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateObjectTypeNotFound creates a UpdateObjectTypeNotFound with default headers values
func NewUpdateObjectTypeNotFound() *UpdateObjectTypeNotFound {
	return &UpdateObjectTypeNotFound{}
}

/*UpdateObjectTypeNotFound handles this case with default header values.

Not found
*/
type UpdateObjectTypeNotFound struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *UpdateObjectTypeNotFound) Error() string {
	return fmt.Sprintf("[PUT /object-types/{id}][%d] updateObjectTypeNotFound  %+v", 404, o.Payload)
}

func (o *UpdateObjectTypeNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateObjectTypeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
