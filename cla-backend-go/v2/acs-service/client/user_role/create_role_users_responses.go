// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package user_role

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/communitybridge/easycla/cla-backend-go/v2/acs-service/models"
)

// CreateRoleUsersReader is a Reader for the CreateRoleUsers structure.
type CreateRoleUsersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateRoleUsersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateRoleUsersCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateRoleUsersBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreateRoleUsersUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateRoleUsersForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateRoleUsersNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateRoleUsersConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCreateRoleUsersCreated creates a CreateRoleUsersCreated with default headers values
func NewCreateRoleUsersCreated() *CreateRoleUsersCreated {
	return &CreateRoleUsersCreated{}
}

/*CreateRoleUsersCreated handles this case with default header values.

Created
*/
type CreateRoleUsersCreated struct {
	Payload []*models.UserRoleScope
}

func (o *CreateRoleUsersCreated) Error() string {
	return fmt.Sprintf("[POST /roles/{id}/members/users][%d] createRoleUsersCreated  %+v", 201, o.Payload)
}

func (o *CreateRoleUsersCreated) GetPayload() []*models.UserRoleScope {
	return o.Payload
}

func (o *CreateRoleUsersCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRoleUsersBadRequest creates a CreateRoleUsersBadRequest with default headers values
func NewCreateRoleUsersBadRequest() *CreateRoleUsersBadRequest {
	return &CreateRoleUsersBadRequest{}
}

/*CreateRoleUsersBadRequest handles this case with default header values.

Invalid request
*/
type CreateRoleUsersBadRequest struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *CreateRoleUsersBadRequest) Error() string {
	return fmt.Sprintf("[POST /roles/{id}/members/users][%d] createRoleUsersBadRequest  %+v", 400, o.Payload)
}

func (o *CreateRoleUsersBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateRoleUsersBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRoleUsersUnauthorized creates a CreateRoleUsersUnauthorized with default headers values
func NewCreateRoleUsersUnauthorized() *CreateRoleUsersUnauthorized {
	return &CreateRoleUsersUnauthorized{}
}

/*CreateRoleUsersUnauthorized handles this case with default header values.

Unauthorized
*/
type CreateRoleUsersUnauthorized struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *CreateRoleUsersUnauthorized) Error() string {
	return fmt.Sprintf("[POST /roles/{id}/members/users][%d] createRoleUsersUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateRoleUsersUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateRoleUsersUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRoleUsersForbidden creates a CreateRoleUsersForbidden with default headers values
func NewCreateRoleUsersForbidden() *CreateRoleUsersForbidden {
	return &CreateRoleUsersForbidden{}
}

/*CreateRoleUsersForbidden handles this case with default header values.

Insufficient privilege to execute action
*/
type CreateRoleUsersForbidden struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *CreateRoleUsersForbidden) Error() string {
	return fmt.Sprintf("[POST /roles/{id}/members/users][%d] createRoleUsersForbidden  %+v", 403, o.Payload)
}

func (o *CreateRoleUsersForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateRoleUsersForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRoleUsersNotFound creates a CreateRoleUsersNotFound with default headers values
func NewCreateRoleUsersNotFound() *CreateRoleUsersNotFound {
	return &CreateRoleUsersNotFound{}
}

/*CreateRoleUsersNotFound handles this case with default header values.

Not found
*/
type CreateRoleUsersNotFound struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *CreateRoleUsersNotFound) Error() string {
	return fmt.Sprintf("[POST /roles/{id}/members/users][%d] createRoleUsersNotFound  %+v", 404, o.Payload)
}

func (o *CreateRoleUsersNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateRoleUsersNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRoleUsersConflict creates a CreateRoleUsersConflict with default headers values
func NewCreateRoleUsersConflict() *CreateRoleUsersConflict {
	return &CreateRoleUsersConflict{}
}

/*CreateRoleUsersConflict handles this case with default header values.

Duplicate Resource
*/
type CreateRoleUsersConflict struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *CreateRoleUsersConflict) Error() string {
	return fmt.Sprintf("[POST /roles/{id}/members/users][%d] createRoleUsersConflict  %+v", 409, o.Payload)
}

func (o *CreateRoleUsersConflict) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateRoleUsersConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
