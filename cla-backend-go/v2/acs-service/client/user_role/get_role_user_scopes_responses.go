// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package user_role

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/communitybridge/easycla/cla-backend-go/v2/acs-service/models"
)

// GetRoleUserScopesReader is a Reader for the GetRoleUserScopes structure.
type GetRoleUserScopesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRoleUserScopesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRoleUserScopesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetRoleUserScopesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetRoleUserScopesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetRoleUserScopesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRoleUserScopesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetRoleUserScopesOK creates a GetRoleUserScopesOK with default headers values
func NewGetRoleUserScopesOK() *GetRoleUserScopesOK {
	return &GetRoleUserScopesOK{}
}

/*GetRoleUserScopesOK handles this case with default header values.

Success
*/
type GetRoleUserScopesOK struct {
	Payload []*models.UserRoleScope
}

func (o *GetRoleUserScopesOK) Error() string {
	return fmt.Sprintf("[GET /roles/{id}/members/{username}/scopes][%d] getRoleUserScopesOK  %+v", 200, o.Payload)
}

func (o *GetRoleUserScopesOK) GetPayload() []*models.UserRoleScope {
	return o.Payload
}

func (o *GetRoleUserScopesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoleUserScopesBadRequest creates a GetRoleUserScopesBadRequest with default headers values
func NewGetRoleUserScopesBadRequest() *GetRoleUserScopesBadRequest {
	return &GetRoleUserScopesBadRequest{}
}

/*GetRoleUserScopesBadRequest handles this case with default header values.

Invalid request
*/
type GetRoleUserScopesBadRequest struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetRoleUserScopesBadRequest) Error() string {
	return fmt.Sprintf("[GET /roles/{id}/members/{username}/scopes][%d] getRoleUserScopesBadRequest  %+v", 400, o.Payload)
}

func (o *GetRoleUserScopesBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetRoleUserScopesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoleUserScopesUnauthorized creates a GetRoleUserScopesUnauthorized with default headers values
func NewGetRoleUserScopesUnauthorized() *GetRoleUserScopesUnauthorized {
	return &GetRoleUserScopesUnauthorized{}
}

/*GetRoleUserScopesUnauthorized handles this case with default header values.

Unauthorized
*/
type GetRoleUserScopesUnauthorized struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetRoleUserScopesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /roles/{id}/members/{username}/scopes][%d] getRoleUserScopesUnauthorized  %+v", 401, o.Payload)
}

func (o *GetRoleUserScopesUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetRoleUserScopesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoleUserScopesForbidden creates a GetRoleUserScopesForbidden with default headers values
func NewGetRoleUserScopesForbidden() *GetRoleUserScopesForbidden {
	return &GetRoleUserScopesForbidden{}
}

/*GetRoleUserScopesForbidden handles this case with default header values.

Insufficient privilege to execute action
*/
type GetRoleUserScopesForbidden struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetRoleUserScopesForbidden) Error() string {
	return fmt.Sprintf("[GET /roles/{id}/members/{username}/scopes][%d] getRoleUserScopesForbidden  %+v", 403, o.Payload)
}

func (o *GetRoleUserScopesForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetRoleUserScopesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoleUserScopesNotFound creates a GetRoleUserScopesNotFound with default headers values
func NewGetRoleUserScopesNotFound() *GetRoleUserScopesNotFound {
	return &GetRoleUserScopesNotFound{}
}

/*GetRoleUserScopesNotFound handles this case with default header values.

Not found
*/
type GetRoleUserScopesNotFound struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetRoleUserScopesNotFound) Error() string {
	return fmt.Sprintf("[GET /roles/{id}/members/{username}/scopes][%d] getRoleUserScopesNotFound  %+v", 404, o.Payload)
}

func (o *GetRoleUserScopesNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetRoleUserScopesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
