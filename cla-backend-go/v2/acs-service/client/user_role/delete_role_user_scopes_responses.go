// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package user_role

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/communitybridge/easycla/cla-backend-go/v2/acs-service/models"
)

// DeleteRoleUserScopesReader is a Reader for the DeleteRoleUserScopes structure.
type DeleteRoleUserScopesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteRoleUserScopesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteRoleUserScopesNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteRoleUserScopesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteRoleUserScopesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteRoleUserScopesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteRoleUserScopesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteRoleUserScopesNoContent creates a DeleteRoleUserScopesNoContent with default headers values
func NewDeleteRoleUserScopesNoContent() *DeleteRoleUserScopesNoContent {
	return &DeleteRoleUserScopesNoContent{}
}

/*DeleteRoleUserScopesNoContent handles this case with default header values.

An empty response
*/
type DeleteRoleUserScopesNoContent struct {
}

func (o *DeleteRoleUserScopesNoContent) Error() string {
	return fmt.Sprintf("[DELETE /roles/{id}/members/user/{username}][%d] deleteRoleUserScopesNoContent ", 204)
}

func (o *DeleteRoleUserScopesNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteRoleUserScopesBadRequest creates a DeleteRoleUserScopesBadRequest with default headers values
func NewDeleteRoleUserScopesBadRequest() *DeleteRoleUserScopesBadRequest {
	return &DeleteRoleUserScopesBadRequest{}
}

/*DeleteRoleUserScopesBadRequest handles this case with default header values.

Invalid request
*/
type DeleteRoleUserScopesBadRequest struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *DeleteRoleUserScopesBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /roles/{id}/members/user/{username}][%d] deleteRoleUserScopesBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteRoleUserScopesBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DeleteRoleUserScopesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRoleUserScopesUnauthorized creates a DeleteRoleUserScopesUnauthorized with default headers values
func NewDeleteRoleUserScopesUnauthorized() *DeleteRoleUserScopesUnauthorized {
	return &DeleteRoleUserScopesUnauthorized{}
}

/*DeleteRoleUserScopesUnauthorized handles this case with default header values.

Unauthorized
*/
type DeleteRoleUserScopesUnauthorized struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *DeleteRoleUserScopesUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /roles/{id}/members/user/{username}][%d] deleteRoleUserScopesUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteRoleUserScopesUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DeleteRoleUserScopesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRoleUserScopesForbidden creates a DeleteRoleUserScopesForbidden with default headers values
func NewDeleteRoleUserScopesForbidden() *DeleteRoleUserScopesForbidden {
	return &DeleteRoleUserScopesForbidden{}
}

/*DeleteRoleUserScopesForbidden handles this case with default header values.

Insufficient privilege to execute action
*/
type DeleteRoleUserScopesForbidden struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *DeleteRoleUserScopesForbidden) Error() string {
	return fmt.Sprintf("[DELETE /roles/{id}/members/user/{username}][%d] deleteRoleUserScopesForbidden  %+v", 403, o.Payload)
}

func (o *DeleteRoleUserScopesForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DeleteRoleUserScopesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRoleUserScopesNotFound creates a DeleteRoleUserScopesNotFound with default headers values
func NewDeleteRoleUserScopesNotFound() *DeleteRoleUserScopesNotFound {
	return &DeleteRoleUserScopesNotFound{}
}

/*DeleteRoleUserScopesNotFound handles this case with default header values.

Not found
*/
type DeleteRoleUserScopesNotFound struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *DeleteRoleUserScopesNotFound) Error() string {
	return fmt.Sprintf("[DELETE /roles/{id}/members/user/{username}][%d] deleteRoleUserScopesNotFound  %+v", 404, o.Payload)
}

func (o *DeleteRoleUserScopesNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DeleteRoleUserScopesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
