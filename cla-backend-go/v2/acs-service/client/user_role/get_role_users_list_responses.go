// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package user_role

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/communitybridge/easycla/cla-backend-go/v2/acs-service/models"
)

// GetRoleUsersListReader is a Reader for the GetRoleUsersList structure.
type GetRoleUsersListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRoleUsersListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRoleUsersListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetRoleUsersListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetRoleUsersListUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetRoleUsersListForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRoleUsersListNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetRoleUsersListOK creates a GetRoleUsersListOK with default headers values
func NewGetRoleUsersListOK() *GetRoleUsersListOK {
	return &GetRoleUsersListOK{}
}

/*GetRoleUsersListOK handles this case with default header values.

Success
*/
type GetRoleUsersListOK struct {
	Payload []*models.UserOnly
}

func (o *GetRoleUsersListOK) Error() string {
	return fmt.Sprintf("[GET /roles/{id}/members/users][%d] getRoleUsersListOK  %+v", 200, o.Payload)
}

func (o *GetRoleUsersListOK) GetPayload() []*models.UserOnly {
	return o.Payload
}

func (o *GetRoleUsersListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoleUsersListBadRequest creates a GetRoleUsersListBadRequest with default headers values
func NewGetRoleUsersListBadRequest() *GetRoleUsersListBadRequest {
	return &GetRoleUsersListBadRequest{}
}

/*GetRoleUsersListBadRequest handles this case with default header values.

Invalid request
*/
type GetRoleUsersListBadRequest struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetRoleUsersListBadRequest) Error() string {
	return fmt.Sprintf("[GET /roles/{id}/members/users][%d] getRoleUsersListBadRequest  %+v", 400, o.Payload)
}

func (o *GetRoleUsersListBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetRoleUsersListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoleUsersListUnauthorized creates a GetRoleUsersListUnauthorized with default headers values
func NewGetRoleUsersListUnauthorized() *GetRoleUsersListUnauthorized {
	return &GetRoleUsersListUnauthorized{}
}

/*GetRoleUsersListUnauthorized handles this case with default header values.

Unauthorized
*/
type GetRoleUsersListUnauthorized struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetRoleUsersListUnauthorized) Error() string {
	return fmt.Sprintf("[GET /roles/{id}/members/users][%d] getRoleUsersListUnauthorized  %+v", 401, o.Payload)
}

func (o *GetRoleUsersListUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetRoleUsersListUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoleUsersListForbidden creates a GetRoleUsersListForbidden with default headers values
func NewGetRoleUsersListForbidden() *GetRoleUsersListForbidden {
	return &GetRoleUsersListForbidden{}
}

/*GetRoleUsersListForbidden handles this case with default header values.

Insufficient privilege to execute action
*/
type GetRoleUsersListForbidden struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetRoleUsersListForbidden) Error() string {
	return fmt.Sprintf("[GET /roles/{id}/members/users][%d] getRoleUsersListForbidden  %+v", 403, o.Payload)
}

func (o *GetRoleUsersListForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetRoleUsersListForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoleUsersListNotFound creates a GetRoleUsersListNotFound with default headers values
func NewGetRoleUsersListNotFound() *GetRoleUsersListNotFound {
	return &GetRoleUsersListNotFound{}
}

/*GetRoleUsersListNotFound handles this case with default header values.

Not found
*/
type GetRoleUsersListNotFound struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetRoleUsersListNotFound) Error() string {
	return fmt.Sprintf("[GET /roles/{id}/members/users][%d] getRoleUsersListNotFound  %+v", 404, o.Payload)
}

func (o *GetRoleUsersListNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetRoleUsersListNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
