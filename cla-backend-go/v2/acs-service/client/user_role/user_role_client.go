// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package user_role

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new user role API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for user role API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateRoleUsers(params *CreateRoleUsersParams, authInfo runtime.ClientAuthInfoWriter) (*CreateRoleUsersCreated, error)

	DeleteRoleUserGrant(params *DeleteRoleUserGrantParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteRoleUserGrantNoContent, error)

	DeleteRoleUserScopes(params *DeleteRoleUserScopesParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteRoleUserScopesNoContent, error)

	GetRoleUserScopes(params *GetRoleUserScopesParams, authInfo runtime.ClientAuthInfoWriter) (*GetRoleUserScopesOK, error)

	GetRoleUsersList(params *GetRoleUsersListParams, authInfo runtime.ClientAuthInfoWriter) (*GetRoleUsersListOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateRoleUsers assigns role to users

  Assign a role and scope to the list of users.
*/
func (a *Client) CreateRoleUsers(params *CreateRoleUsersParams, authInfo runtime.ClientAuthInfoWriter) (*CreateRoleUsersCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRoleUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createRoleUsers",
		Method:             "POST",
		PathPattern:        "/roles/{id}/members/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateRoleUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRoleUsersCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRoleUsers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteRoleUserGrant deletes user grant

  Remove the role and scope associated to the user by grantID
*/
func (a *Client) DeleteRoleUserGrant(params *DeleteRoleUserGrantParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteRoleUserGrantNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRoleUserGrantParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRoleUserGrant",
		Method:             "DELETE",
		PathPattern:        "/roles/{id}/members/users/{grantId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRoleUserGrantReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRoleUserGrantNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteRoleUserGrant: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteRoleUserScopes deletes role user scopes

  Remove all user scopes associated to the role
*/
func (a *Client) DeleteRoleUserScopes(params *DeleteRoleUserScopesParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteRoleUserScopesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRoleUserScopesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRoleUserScopes",
		Method:             "DELETE",
		PathPattern:        "/roles/{id}/members/user/{username}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRoleUserScopesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRoleUserScopesNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteRoleUserScopes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRoleUserScopes gets user role scopes list

  Get list of scopes assigned to the user for a role.
*/
func (a *Client) GetRoleUserScopes(params *GetRoleUserScopesParams, authInfo runtime.ClientAuthInfoWriter) (*GetRoleUserScopesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRoleUserScopesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRoleUserScopes",
		Method:             "GET",
		PathPattern:        "/roles/{id}/members/{username}/scopes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRoleUserScopesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRoleUserScopesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRoleUserScopes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRoleUsersList gets role users list

  Get list of users assign to the role.
*/
func (a *Client) GetRoleUsersList(params *GetRoleUsersListParams, authInfo runtime.ClientAuthInfoWriter) (*GetRoleUsersListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRoleUsersListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRoleUsersList",
		Method:             "GET",
		PathPattern:        "/roles/{id}/members/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRoleUsersListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRoleUsersListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRoleUsersList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
