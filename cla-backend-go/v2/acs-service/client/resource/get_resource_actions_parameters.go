// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package resource

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetResourceActionsParams creates a new GetResourceActionsParams object
// with the default values initialized.
func NewGetResourceActionsParams() *GetResourceActionsParams {
	var ()
	return &GetResourceActionsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetResourceActionsParamsWithTimeout creates a new GetResourceActionsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetResourceActionsParamsWithTimeout(timeout time.Duration) *GetResourceActionsParams {
	var ()
	return &GetResourceActionsParams{

		timeout: timeout,
	}
}

// NewGetResourceActionsParamsWithContext creates a new GetResourceActionsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetResourceActionsParamsWithContext(ctx context.Context) *GetResourceActionsParams {
	var ()
	return &GetResourceActionsParams{

		Context: ctx,
	}
}

// NewGetResourceActionsParamsWithHTTPClient creates a new GetResourceActionsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetResourceActionsParamsWithHTTPClient(client *http.Client) *GetResourceActionsParams {
	var ()
	return &GetResourceActionsParams{
		HTTPClient: client,
	}
}

/*GetResourceActionsParams contains all the parameters to send to the API endpoint
for the get resource actions operation typically these are written to a http.Request
*/
type GetResourceActionsParams struct {

	/*EmptyHeader
	  The access control list header value encoded as base64 - assigned by the API Gateway based on user/request permissions

	*/
	EmptyHeader string
	/*XEMAIL
	  Email of the person who is requesting an access

	*/
	XEMAIL *string
	/*XREQUESTID
	  The unique request ID value - assigned/set by the API Gateway based on the login session

	*/
	XREQUESTID *string
	/*XUSERNAME
	  Username of the person who is requesting an access

	*/
	XUSERNAME *string
	/*ID
	  The resource id.

	*/
	ID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get resource actions params
func (o *GetResourceActionsParams) WithTimeout(timeout time.Duration) *GetResourceActionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get resource actions params
func (o *GetResourceActionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get resource actions params
func (o *GetResourceActionsParams) WithContext(ctx context.Context) *GetResourceActionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get resource actions params
func (o *GetResourceActionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get resource actions params
func (o *GetResourceActionsParams) WithHTTPClient(client *http.Client) *GetResourceActionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get resource actions params
func (o *GetResourceActionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEmptyHeader adds the emptyHeader to the get resource actions params
func (o *GetResourceActionsParams) WithEmptyHeader(emptyHeader string) *GetResourceActionsParams {
	o.SetEmptyHeader(emptyHeader)
	return o
}

// SetEmptyHeader adds the emptyHeader to the get resource actions params
func (o *GetResourceActionsParams) SetEmptyHeader(emptyHeader string) {
	o.EmptyHeader = emptyHeader
}

// WithXEMAIL adds the xEMAIL to the get resource actions params
func (o *GetResourceActionsParams) WithXEMAIL(xEMAIL *string) *GetResourceActionsParams {
	o.SetXEMAIL(xEMAIL)
	return o
}

// SetXEMAIL adds the xEMAIL to the get resource actions params
func (o *GetResourceActionsParams) SetXEMAIL(xEMAIL *string) {
	o.XEMAIL = xEMAIL
}

// WithXREQUESTID adds the xREQUESTID to the get resource actions params
func (o *GetResourceActionsParams) WithXREQUESTID(xREQUESTID *string) *GetResourceActionsParams {
	o.SetXREQUESTID(xREQUESTID)
	return o
}

// SetXREQUESTID adds the xREQUESTId to the get resource actions params
func (o *GetResourceActionsParams) SetXREQUESTID(xREQUESTID *string) {
	o.XREQUESTID = xREQUESTID
}

// WithXUSERNAME adds the xUSERNAME to the get resource actions params
func (o *GetResourceActionsParams) WithXUSERNAME(xUSERNAME *string) *GetResourceActionsParams {
	o.SetXUSERNAME(xUSERNAME)
	return o
}

// SetXUSERNAME adds the xUSERNAME to the get resource actions params
func (o *GetResourceActionsParams) SetXUSERNAME(xUSERNAME *string) {
	o.XUSERNAME = xUSERNAME
}

// WithID adds the id to the get resource actions params
func (o *GetResourceActionsParams) WithID(id string) *GetResourceActionsParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get resource actions params
func (o *GetResourceActionsParams) SetID(id string) {
	o.ID = id
}

// WriteToRequest writes these params to a swagger request
func (o *GetResourceActionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Empty-Header
	if err := r.SetHeaderParam("Empty-Header", o.EmptyHeader); err != nil {
		return err
	}

	if o.XEMAIL != nil {

		// header param X-EMAIL
		if err := r.SetHeaderParam("X-EMAIL", *o.XEMAIL); err != nil {
			return err
		}

	}

	if o.XREQUESTID != nil {

		// header param X-REQUEST-ID
		if err := r.SetHeaderParam("X-REQUEST-ID", *o.XREQUESTID); err != nil {
			return err
		}

	}

	if o.XUSERNAME != nil {

		// header param X-USERNAME
		if err := r.SetHeaderParam("X-USERNAME", *o.XUSERNAME); err != nil {
			return err
		}

	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
