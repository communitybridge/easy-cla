// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package resource

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/communitybridge/easycla/cla-backend-go/v2/acs-service/models"
)

// CreateResourcesReader is a Reader for the CreateResources structure.
type CreateResourcesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateResourcesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateResourcesCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateResourcesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreateResourcesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateResourcesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateResourcesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateResourcesConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCreateResourcesCreated creates a CreateResourcesCreated with default headers values
func NewCreateResourcesCreated() *CreateResourcesCreated {
	return &CreateResourcesCreated{}
}

/*CreateResourcesCreated handles this case with default header values.

Created
*/
type CreateResourcesCreated struct {
	Payload *models.Resource
}

func (o *CreateResourcesCreated) Error() string {
	return fmt.Sprintf("[POST /resources][%d] createResourcesCreated  %+v", 201, o.Payload)
}

func (o *CreateResourcesCreated) GetPayload() *models.Resource {
	return o.Payload
}

func (o *CreateResourcesCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Resource)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateResourcesBadRequest creates a CreateResourcesBadRequest with default headers values
func NewCreateResourcesBadRequest() *CreateResourcesBadRequest {
	return &CreateResourcesBadRequest{}
}

/*CreateResourcesBadRequest handles this case with default header values.

Invalid request
*/
type CreateResourcesBadRequest struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *CreateResourcesBadRequest) Error() string {
	return fmt.Sprintf("[POST /resources][%d] createResourcesBadRequest  %+v", 400, o.Payload)
}

func (o *CreateResourcesBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateResourcesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateResourcesUnauthorized creates a CreateResourcesUnauthorized with default headers values
func NewCreateResourcesUnauthorized() *CreateResourcesUnauthorized {
	return &CreateResourcesUnauthorized{}
}

/*CreateResourcesUnauthorized handles this case with default header values.

Unauthorized
*/
type CreateResourcesUnauthorized struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *CreateResourcesUnauthorized) Error() string {
	return fmt.Sprintf("[POST /resources][%d] createResourcesUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateResourcesUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateResourcesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateResourcesForbidden creates a CreateResourcesForbidden with default headers values
func NewCreateResourcesForbidden() *CreateResourcesForbidden {
	return &CreateResourcesForbidden{}
}

/*CreateResourcesForbidden handles this case with default header values.

Insufficient privilege to execute action
*/
type CreateResourcesForbidden struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *CreateResourcesForbidden) Error() string {
	return fmt.Sprintf("[POST /resources][%d] createResourcesForbidden  %+v", 403, o.Payload)
}

func (o *CreateResourcesForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateResourcesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateResourcesNotFound creates a CreateResourcesNotFound with default headers values
func NewCreateResourcesNotFound() *CreateResourcesNotFound {
	return &CreateResourcesNotFound{}
}

/*CreateResourcesNotFound handles this case with default header values.

Not found
*/
type CreateResourcesNotFound struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *CreateResourcesNotFound) Error() string {
	return fmt.Sprintf("[POST /resources][%d] createResourcesNotFound  %+v", 404, o.Payload)
}

func (o *CreateResourcesNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateResourcesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateResourcesConflict creates a CreateResourcesConflict with default headers values
func NewCreateResourcesConflict() *CreateResourcesConflict {
	return &CreateResourcesConflict{}
}

/*CreateResourcesConflict handles this case with default header values.

Duplicate Resource
*/
type CreateResourcesConflict struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *CreateResourcesConflict) Error() string {
	return fmt.Sprintf("[POST /resources][%d] createResourcesConflict  %+v", 409, o.Payload)
}

func (o *CreateResourcesConflict) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateResourcesConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
