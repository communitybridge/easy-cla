// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package resource

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/communitybridge/easycla/cla-backend-go/v2/acs-service/models"
)

// UpdateResourceReader is a Reader for the UpdateResource structure.
type UpdateResourceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateResourceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateResourceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateResourceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateResourceUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateResourceForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateResourceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateResourceOK creates a UpdateResourceOK with default headers values
func NewUpdateResourceOK() *UpdateResourceOK {
	return &UpdateResourceOK{}
}

/*UpdateResourceOK handles this case with default header values.

Success
*/
type UpdateResourceOK struct {
	Payload *models.Resource
}

func (o *UpdateResourceOK) Error() string {
	return fmt.Sprintf("[PUT /resources/{id}][%d] updateResourceOK  %+v", 200, o.Payload)
}

func (o *UpdateResourceOK) GetPayload() *models.Resource {
	return o.Payload
}

func (o *UpdateResourceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Resource)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateResourceBadRequest creates a UpdateResourceBadRequest with default headers values
func NewUpdateResourceBadRequest() *UpdateResourceBadRequest {
	return &UpdateResourceBadRequest{}
}

/*UpdateResourceBadRequest handles this case with default header values.

Invalid request
*/
type UpdateResourceBadRequest struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *UpdateResourceBadRequest) Error() string {
	return fmt.Sprintf("[PUT /resources/{id}][%d] updateResourceBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateResourceBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateResourceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateResourceUnauthorized creates a UpdateResourceUnauthorized with default headers values
func NewUpdateResourceUnauthorized() *UpdateResourceUnauthorized {
	return &UpdateResourceUnauthorized{}
}

/*UpdateResourceUnauthorized handles this case with default header values.

Unauthorized
*/
type UpdateResourceUnauthorized struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *UpdateResourceUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /resources/{id}][%d] updateResourceUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateResourceUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateResourceUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateResourceForbidden creates a UpdateResourceForbidden with default headers values
func NewUpdateResourceForbidden() *UpdateResourceForbidden {
	return &UpdateResourceForbidden{}
}

/*UpdateResourceForbidden handles this case with default header values.

Insufficient privilege to execute action
*/
type UpdateResourceForbidden struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *UpdateResourceForbidden) Error() string {
	return fmt.Sprintf("[PUT /resources/{id}][%d] updateResourceForbidden  %+v", 403, o.Payload)
}

func (o *UpdateResourceForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateResourceForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateResourceNotFound creates a UpdateResourceNotFound with default headers values
func NewUpdateResourceNotFound() *UpdateResourceNotFound {
	return &UpdateResourceNotFound{}
}

/*UpdateResourceNotFound handles this case with default header values.

Not found
*/
type UpdateResourceNotFound struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *UpdateResourceNotFound) Error() string {
	return fmt.Sprintf("[PUT /resources/{id}][%d] updateResourceNotFound  %+v", 404, o.Payload)
}

func (o *UpdateResourceNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateResourceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
