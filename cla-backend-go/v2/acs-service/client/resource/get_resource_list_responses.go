// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package resource

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/communitybridge/easycla/cla-backend-go/v2/acs-service/models"
)

// GetResourceListReader is a Reader for the GetResourceList structure.
type GetResourceListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetResourceListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetResourceListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetResourceListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetResourceListUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetResourceListForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetResourceListNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetResourceListOK creates a GetResourceListOK with default headers values
func NewGetResourceListOK() *GetResourceListOK {
	return &GetResourceListOK{}
}

/*GetResourceListOK handles this case with default header values.

Success
*/
type GetResourceListOK struct {
	Payload []*models.Resource
}

func (o *GetResourceListOK) Error() string {
	return fmt.Sprintf("[GET /resources][%d] getResourceListOK  %+v", 200, o.Payload)
}

func (o *GetResourceListOK) GetPayload() []*models.Resource {
	return o.Payload
}

func (o *GetResourceListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetResourceListBadRequest creates a GetResourceListBadRequest with default headers values
func NewGetResourceListBadRequest() *GetResourceListBadRequest {
	return &GetResourceListBadRequest{}
}

/*GetResourceListBadRequest handles this case with default header values.

Invalid request
*/
type GetResourceListBadRequest struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetResourceListBadRequest) Error() string {
	return fmt.Sprintf("[GET /resources][%d] getResourceListBadRequest  %+v", 400, o.Payload)
}

func (o *GetResourceListBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetResourceListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetResourceListUnauthorized creates a GetResourceListUnauthorized with default headers values
func NewGetResourceListUnauthorized() *GetResourceListUnauthorized {
	return &GetResourceListUnauthorized{}
}

/*GetResourceListUnauthorized handles this case with default header values.

Unauthorized
*/
type GetResourceListUnauthorized struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetResourceListUnauthorized) Error() string {
	return fmt.Sprintf("[GET /resources][%d] getResourceListUnauthorized  %+v", 401, o.Payload)
}

func (o *GetResourceListUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetResourceListUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetResourceListForbidden creates a GetResourceListForbidden with default headers values
func NewGetResourceListForbidden() *GetResourceListForbidden {
	return &GetResourceListForbidden{}
}

/*GetResourceListForbidden handles this case with default header values.

Insufficient privilege to execute action
*/
type GetResourceListForbidden struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetResourceListForbidden) Error() string {
	return fmt.Sprintf("[GET /resources][%d] getResourceListForbidden  %+v", 403, o.Payload)
}

func (o *GetResourceListForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetResourceListForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetResourceListNotFound creates a GetResourceListNotFound with default headers values
func NewGetResourceListNotFound() *GetResourceListNotFound {
	return &GetResourceListNotFound{}
}

/*GetResourceListNotFound handles this case with default header values.

Not found
*/
type GetResourceListNotFound struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetResourceListNotFound) Error() string {
	return fmt.Sprintf("[GET /resources][%d] getResourceListNotFound  %+v", 404, o.Payload)
}

func (o *GetResourceListNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetResourceListNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
