// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package resource

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/communitybridge/easycla/cla-backend-go/v2/acs-service/models"
)

// UpdateResourceActionsReader is a Reader for the UpdateResourceActions structure.
type UpdateResourceActionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateResourceActionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateResourceActionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateResourceActionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateResourceActionsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateResourceActionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateResourceActionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateResourceActionsOK creates a UpdateResourceActionsOK with default headers values
func NewUpdateResourceActionsOK() *UpdateResourceActionsOK {
	return &UpdateResourceActionsOK{}
}

/*UpdateResourceActionsOK handles this case with default header values.

Success
*/
type UpdateResourceActionsOK struct {
	Payload *models.Resource
}

func (o *UpdateResourceActionsOK) Error() string {
	return fmt.Sprintf("[PUT /resources/{id}/actions][%d] updateResourceActionsOK  %+v", 200, o.Payload)
}

func (o *UpdateResourceActionsOK) GetPayload() *models.Resource {
	return o.Payload
}

func (o *UpdateResourceActionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Resource)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateResourceActionsBadRequest creates a UpdateResourceActionsBadRequest with default headers values
func NewUpdateResourceActionsBadRequest() *UpdateResourceActionsBadRequest {
	return &UpdateResourceActionsBadRequest{}
}

/*UpdateResourceActionsBadRequest handles this case with default header values.

Invalid request
*/
type UpdateResourceActionsBadRequest struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *UpdateResourceActionsBadRequest) Error() string {
	return fmt.Sprintf("[PUT /resources/{id}/actions][%d] updateResourceActionsBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateResourceActionsBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateResourceActionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateResourceActionsUnauthorized creates a UpdateResourceActionsUnauthorized with default headers values
func NewUpdateResourceActionsUnauthorized() *UpdateResourceActionsUnauthorized {
	return &UpdateResourceActionsUnauthorized{}
}

/*UpdateResourceActionsUnauthorized handles this case with default header values.

Unauthorized
*/
type UpdateResourceActionsUnauthorized struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *UpdateResourceActionsUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /resources/{id}/actions][%d] updateResourceActionsUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateResourceActionsUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateResourceActionsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateResourceActionsForbidden creates a UpdateResourceActionsForbidden with default headers values
func NewUpdateResourceActionsForbidden() *UpdateResourceActionsForbidden {
	return &UpdateResourceActionsForbidden{}
}

/*UpdateResourceActionsForbidden handles this case with default header values.

Insufficient privilege to execute action
*/
type UpdateResourceActionsForbidden struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *UpdateResourceActionsForbidden) Error() string {
	return fmt.Sprintf("[PUT /resources/{id}/actions][%d] updateResourceActionsForbidden  %+v", 403, o.Payload)
}

func (o *UpdateResourceActionsForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateResourceActionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateResourceActionsNotFound creates a UpdateResourceActionsNotFound with default headers values
func NewUpdateResourceActionsNotFound() *UpdateResourceActionsNotFound {
	return &UpdateResourceActionsNotFound{}
}

/*UpdateResourceActionsNotFound handles this case with default header values.

Not found
*/
type UpdateResourceActionsNotFound struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *UpdateResourceActionsNotFound) Error() string {
	return fmt.Sprintf("[PUT /resources/{id}/actions][%d] updateResourceActionsNotFound  %+v", 404, o.Payload)
}

func (o *UpdateResourceActionsNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateResourceActionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
