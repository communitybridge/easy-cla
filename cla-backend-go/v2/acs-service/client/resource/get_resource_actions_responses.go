// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package resource

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/communitybridge/easycla/cla-backend-go/v2/acs-service/models"
)

// GetResourceActionsReader is a Reader for the GetResourceActions structure.
type GetResourceActionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetResourceActionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetResourceActionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetResourceActionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetResourceActionsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetResourceActionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetResourceActionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetResourceActionsOK creates a GetResourceActionsOK with default headers values
func NewGetResourceActionsOK() *GetResourceActionsOK {
	return &GetResourceActionsOK{}
}

/*GetResourceActionsOK handles this case with default header values.

Success
*/
type GetResourceActionsOK struct {
	Payload *models.ResourceAction
}

func (o *GetResourceActionsOK) Error() string {
	return fmt.Sprintf("[GET /resources/{id}/actions][%d] getResourceActionsOK  %+v", 200, o.Payload)
}

func (o *GetResourceActionsOK) GetPayload() *models.ResourceAction {
	return o.Payload
}

func (o *GetResourceActionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResourceAction)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetResourceActionsBadRequest creates a GetResourceActionsBadRequest with default headers values
func NewGetResourceActionsBadRequest() *GetResourceActionsBadRequest {
	return &GetResourceActionsBadRequest{}
}

/*GetResourceActionsBadRequest handles this case with default header values.

Invalid request
*/
type GetResourceActionsBadRequest struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetResourceActionsBadRequest) Error() string {
	return fmt.Sprintf("[GET /resources/{id}/actions][%d] getResourceActionsBadRequest  %+v", 400, o.Payload)
}

func (o *GetResourceActionsBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetResourceActionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetResourceActionsUnauthorized creates a GetResourceActionsUnauthorized with default headers values
func NewGetResourceActionsUnauthorized() *GetResourceActionsUnauthorized {
	return &GetResourceActionsUnauthorized{}
}

/*GetResourceActionsUnauthorized handles this case with default header values.

Unauthorized
*/
type GetResourceActionsUnauthorized struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetResourceActionsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /resources/{id}/actions][%d] getResourceActionsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetResourceActionsUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetResourceActionsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetResourceActionsForbidden creates a GetResourceActionsForbidden with default headers values
func NewGetResourceActionsForbidden() *GetResourceActionsForbidden {
	return &GetResourceActionsForbidden{}
}

/*GetResourceActionsForbidden handles this case with default header values.

Insufficient privilege to execute action
*/
type GetResourceActionsForbidden struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetResourceActionsForbidden) Error() string {
	return fmt.Sprintf("[GET /resources/{id}/actions][%d] getResourceActionsForbidden  %+v", 403, o.Payload)
}

func (o *GetResourceActionsForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetResourceActionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetResourceActionsNotFound creates a GetResourceActionsNotFound with default headers values
func NewGetResourceActionsNotFound() *GetResourceActionsNotFound {
	return &GetResourceActionsNotFound{}
}

/*GetResourceActionsNotFound handles this case with default header values.

Not found
*/
type GetResourceActionsNotFound struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetResourceActionsNotFound) Error() string {
	return fmt.Sprintf("[GET /resources/{id}/actions][%d] getResourceActionsNotFound  %+v", 404, o.Payload)
}

func (o *GetResourceActionsNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetResourceActionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
