// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package resource

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/communitybridge/easycla/cla-backend-go/v2/acs-service/models"
)

// DeleteResourceActionsReader is a Reader for the DeleteResourceActions structure.
type DeleteResourceActionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteResourceActionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteResourceActionsNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteResourceActionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteResourceActionsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteResourceActionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteResourceActionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteResourceActionsNoContent creates a DeleteResourceActionsNoContent with default headers values
func NewDeleteResourceActionsNoContent() *DeleteResourceActionsNoContent {
	return &DeleteResourceActionsNoContent{}
}

/*DeleteResourceActionsNoContent handles this case with default header values.

An empty response
*/
type DeleteResourceActionsNoContent struct {
}

func (o *DeleteResourceActionsNoContent) Error() string {
	return fmt.Sprintf("[DELETE /resources/{id}/actions][%d] deleteResourceActionsNoContent ", 204)
}

func (o *DeleteResourceActionsNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteResourceActionsBadRequest creates a DeleteResourceActionsBadRequest with default headers values
func NewDeleteResourceActionsBadRequest() *DeleteResourceActionsBadRequest {
	return &DeleteResourceActionsBadRequest{}
}

/*DeleteResourceActionsBadRequest handles this case with default header values.

Invalid request
*/
type DeleteResourceActionsBadRequest struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *DeleteResourceActionsBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /resources/{id}/actions][%d] deleteResourceActionsBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteResourceActionsBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DeleteResourceActionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteResourceActionsUnauthorized creates a DeleteResourceActionsUnauthorized with default headers values
func NewDeleteResourceActionsUnauthorized() *DeleteResourceActionsUnauthorized {
	return &DeleteResourceActionsUnauthorized{}
}

/*DeleteResourceActionsUnauthorized handles this case with default header values.

Unauthorized
*/
type DeleteResourceActionsUnauthorized struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *DeleteResourceActionsUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /resources/{id}/actions][%d] deleteResourceActionsUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteResourceActionsUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DeleteResourceActionsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteResourceActionsForbidden creates a DeleteResourceActionsForbidden with default headers values
func NewDeleteResourceActionsForbidden() *DeleteResourceActionsForbidden {
	return &DeleteResourceActionsForbidden{}
}

/*DeleteResourceActionsForbidden handles this case with default header values.

Insufficient privilege to execute action
*/
type DeleteResourceActionsForbidden struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *DeleteResourceActionsForbidden) Error() string {
	return fmt.Sprintf("[DELETE /resources/{id}/actions][%d] deleteResourceActionsForbidden  %+v", 403, o.Payload)
}

func (o *DeleteResourceActionsForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DeleteResourceActionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteResourceActionsNotFound creates a DeleteResourceActionsNotFound with default headers values
func NewDeleteResourceActionsNotFound() *DeleteResourceActionsNotFound {
	return &DeleteResourceActionsNotFound{}
}

/*DeleteResourceActionsNotFound handles this case with default header values.

Not found
*/
type DeleteResourceActionsNotFound struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *DeleteResourceActionsNotFound) Error() string {
	return fmt.Sprintf("[DELETE /resources/{id}/actions][%d] deleteResourceActionsNotFound  %+v", 404, o.Payload)
}

func (o *DeleteResourceActionsNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DeleteResourceActionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
