// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package resource

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new resource API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for resource API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateResources(params *CreateResourcesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateResourcesCreated, error)

	DeleteResource(params *DeleteResourceParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteResourceNoContent, error)

	DeleteResourceActions(params *DeleteResourceActionsParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteResourceActionsNoContent, error)

	GetResource(params *GetResourceParams, authInfo runtime.ClientAuthInfoWriter) (*GetResourceOK, error)

	GetResourceActions(params *GetResourceActionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetResourceActionsOK, error)

	GetResourceList(params *GetResourceListParams, authInfo runtime.ClientAuthInfoWriter) (*GetResourceListOK, error)

	UpdateResource(params *UpdateResourceParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateResourceOK, error)

	UpdateResourceActions(params *UpdateResourceActionsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateResourceActionsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateResources creates resources p r i v a t e

  Create a new resource or register a new service endpoint in the ACS. Used by `ACS-CLI`
*/
func (a *Client) CreateResources(params *CreateResourcesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateResourcesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateResourcesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createResources",
		Method:             "POST",
		PathPattern:        "/resources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateResourcesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateResourcesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createResources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteResource deletes resource p r i v a t e

  Delete an existing resource (endpoint). Used by `ACS-CLI`
*/
func (a *Client) DeleteResource(params *DeleteResourceParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteResourceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteResource",
		Method:             "DELETE",
		PathPattern:        "/resources/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteResourceNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteResource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteResourceActions deletes resource actions p r i v a t e

  Delete all the actions for an existing resource. Used by `MyAccount UI, ACS-CLI`
*/
func (a *Client) DeleteResourceActions(params *DeleteResourceActionsParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteResourceActionsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteResourceActionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteResourceActions",
		Method:             "DELETE",
		PathPattern:        "/resources/{id}/actions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteResourceActionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteResourceActionsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteResourceActions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetResource gets resource p r i v a t e

  Get a single resource (endpoint) by id. Used by `ACS-CLI`
*/
func (a *Client) GetResource(params *GetResourceParams, authInfo runtime.ClientAuthInfoWriter) (*GetResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getResource",
		Method:             "GET",
		PathPattern:        "/resources/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getResource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetResourceActions gets resource actions p r i v a t e

  Get list of the actions for a single resource. Used by `MyAccount UI, ACS-CLI`
*/
func (a *Client) GetResourceActions(params *GetResourceActionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetResourceActionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourceActionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getResourceActions",
		Method:             "GET",
		PathPattern:        "/resources/{id}/actions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetResourceActionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResourceActionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getResourceActions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetResourceList gets resource list p r i v a t e

  List the current resources (endpoints) from the ACS. Used by `ACS-CLI`
*/
func (a *Client) GetResourceList(params *GetResourceListParams, authInfo runtime.ClientAuthInfoWriter) (*GetResourceListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourceListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getResourceList",
		Method:             "GET",
		PathPattern:        "/resources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetResourceListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResourceListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getResourceList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateResource updates resource p r i v a t e

  Update an existing resource (endpoint). Used by `ACS-CLI`
*/
func (a *Client) UpdateResource(params *UpdateResourceParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateResource",
		Method:             "PUT",
		PathPattern:        "/resources/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateResourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateResource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateResourceActions creates update resource actions p r i v a t e

  Create/Update an existing actions for the resource. Used by `MyAccount UI, ACS-CLI`
*/
func (a *Client) UpdateResourceActions(params *UpdateResourceActionsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateResourceActionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateResourceActionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateResourceActions",
		Method:             "PUT",
		PathPattern:        "/resources/{id}/actions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateResourceActionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateResourceActionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateResourceActions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
