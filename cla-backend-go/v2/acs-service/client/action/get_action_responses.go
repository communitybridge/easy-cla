// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package action

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/communitybridge/easycla/cla-backend-go/v2/acs-service/models"
)

// GetActionReader is a Reader for the GetAction structure.
type GetActionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetActionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetActionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetActionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetActionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetActionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetActionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetActionOK creates a GetActionOK with default headers values
func NewGetActionOK() *GetActionOK {
	return &GetActionOK{}
}

/*GetActionOK handles this case with default header values.

Success
*/
type GetActionOK struct {
	Payload *models.Action
}

func (o *GetActionOK) Error() string {
	return fmt.Sprintf("[GET /actions/{id}][%d] getActionOK  %+v", 200, o.Payload)
}

func (o *GetActionOK) GetPayload() *models.Action {
	return o.Payload
}

func (o *GetActionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Action)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetActionBadRequest creates a GetActionBadRequest with default headers values
func NewGetActionBadRequest() *GetActionBadRequest {
	return &GetActionBadRequest{}
}

/*GetActionBadRequest handles this case with default header values.

Invalid request
*/
type GetActionBadRequest struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetActionBadRequest) Error() string {
	return fmt.Sprintf("[GET /actions/{id}][%d] getActionBadRequest  %+v", 400, o.Payload)
}

func (o *GetActionBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetActionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetActionUnauthorized creates a GetActionUnauthorized with default headers values
func NewGetActionUnauthorized() *GetActionUnauthorized {
	return &GetActionUnauthorized{}
}

/*GetActionUnauthorized handles this case with default header values.

Unauthorized
*/
type GetActionUnauthorized struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetActionUnauthorized) Error() string {
	return fmt.Sprintf("[GET /actions/{id}][%d] getActionUnauthorized  %+v", 401, o.Payload)
}

func (o *GetActionUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetActionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetActionForbidden creates a GetActionForbidden with default headers values
func NewGetActionForbidden() *GetActionForbidden {
	return &GetActionForbidden{}
}

/*GetActionForbidden handles this case with default header values.

Insufficient privilege to execute action
*/
type GetActionForbidden struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetActionForbidden) Error() string {
	return fmt.Sprintf("[GET /actions/{id}][%d] getActionForbidden  %+v", 403, o.Payload)
}

func (o *GetActionForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetActionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetActionNotFound creates a GetActionNotFound with default headers values
func NewGetActionNotFound() *GetActionNotFound {
	return &GetActionNotFound{}
}

/*GetActionNotFound handles this case with default header values.

Not found
*/
type GetActionNotFound struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetActionNotFound) Error() string {
	return fmt.Sprintf("[GET /actions/{id}][%d] getActionNotFound  %+v", 404, o.Payload)
}

func (o *GetActionNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetActionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
