// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package action

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/communitybridge/easycla/cla-backend-go/v2/acs-service/models"
)

// CreateActionReader is a Reader for the CreateAction structure.
type CreateActionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateActionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateActionCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateActionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreateActionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateActionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateActionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateActionConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCreateActionCreated creates a CreateActionCreated with default headers values
func NewCreateActionCreated() *CreateActionCreated {
	return &CreateActionCreated{}
}

/*CreateActionCreated handles this case with default header values.

Created
*/
type CreateActionCreated struct {
	Payload *models.Action
}

func (o *CreateActionCreated) Error() string {
	return fmt.Sprintf("[POST /actions][%d] createActionCreated  %+v", 201, o.Payload)
}

func (o *CreateActionCreated) GetPayload() *models.Action {
	return o.Payload
}

func (o *CreateActionCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Action)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateActionBadRequest creates a CreateActionBadRequest with default headers values
func NewCreateActionBadRequest() *CreateActionBadRequest {
	return &CreateActionBadRequest{}
}

/*CreateActionBadRequest handles this case with default header values.

Invalid request
*/
type CreateActionBadRequest struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *CreateActionBadRequest) Error() string {
	return fmt.Sprintf("[POST /actions][%d] createActionBadRequest  %+v", 400, o.Payload)
}

func (o *CreateActionBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateActionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateActionUnauthorized creates a CreateActionUnauthorized with default headers values
func NewCreateActionUnauthorized() *CreateActionUnauthorized {
	return &CreateActionUnauthorized{}
}

/*CreateActionUnauthorized handles this case with default header values.

Unauthorized
*/
type CreateActionUnauthorized struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *CreateActionUnauthorized) Error() string {
	return fmt.Sprintf("[POST /actions][%d] createActionUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateActionUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateActionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateActionForbidden creates a CreateActionForbidden with default headers values
func NewCreateActionForbidden() *CreateActionForbidden {
	return &CreateActionForbidden{}
}

/*CreateActionForbidden handles this case with default header values.

Insufficient privilege to execute action
*/
type CreateActionForbidden struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *CreateActionForbidden) Error() string {
	return fmt.Sprintf("[POST /actions][%d] createActionForbidden  %+v", 403, o.Payload)
}

func (o *CreateActionForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateActionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateActionNotFound creates a CreateActionNotFound with default headers values
func NewCreateActionNotFound() *CreateActionNotFound {
	return &CreateActionNotFound{}
}

/*CreateActionNotFound handles this case with default header values.

Not found
*/
type CreateActionNotFound struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *CreateActionNotFound) Error() string {
	return fmt.Sprintf("[POST /actions][%d] createActionNotFound  %+v", 404, o.Payload)
}

func (o *CreateActionNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateActionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateActionConflict creates a CreateActionConflict with default headers values
func NewCreateActionConflict() *CreateActionConflict {
	return &CreateActionConflict{}
}

/*CreateActionConflict handles this case with default header values.

Duplicate Resource
*/
type CreateActionConflict struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *CreateActionConflict) Error() string {
	return fmt.Sprintf("[POST /actions][%d] createActionConflict  %+v", 409, o.Payload)
}

func (o *CreateActionConflict) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *CreateActionConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
