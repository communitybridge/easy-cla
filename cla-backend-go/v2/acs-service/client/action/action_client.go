// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package action

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new action API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for action API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateAction(params *CreateActionParams, authInfo runtime.ClientAuthInfoWriter) (*CreateActionCreated, error)

	DeleteAction(params *DeleteActionParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteActionNoContent, error)

	GetAction(params *GetActionParams, authInfo runtime.ClientAuthInfoWriter) (*GetActionOK, error)

	GetActionList(params *GetActionListParams, authInfo runtime.ClientAuthInfoWriter) (*GetActionListOK, error)

	UpdateAction(params *UpdateActionParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateActionOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateAction creates action p r i v a t e

  Create a new action for the resource. e.g. Create, Update, Remove. Used by `ACS-CLI`
*/
func (a *Client) CreateAction(params *CreateActionParams, authInfo runtime.ClientAuthInfoWriter) (*CreateActionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateActionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createAction",
		Method:             "POST",
		PathPattern:        "/actions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateActionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateActionCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createAction: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAction deletes action p r i v a t e

  Delete an existing action. Used by `ACS-CLI`
*/
func (a *Client) DeleteAction(params *DeleteActionParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteActionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteActionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAction",
		Method:             "DELETE",
		PathPattern:        "/actions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteActionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteActionNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteAction: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAction gets action p r i v a t e

  Get a single action by id. Used by `ACS-CLI`
*/
func (a *Client) GetAction(params *GetActionParams, authInfo runtime.ClientAuthInfoWriter) (*GetActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetActionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAction",
		Method:             "GET",
		PathPattern:        "/actions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetActionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetActionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAction: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetActionList gets action list p r i v a t e

  List the current actions. Used by `ACS-CLI`
*/
func (a *Client) GetActionList(params *GetActionListParams, authInfo runtime.ClientAuthInfoWriter) (*GetActionListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetActionListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getActionList",
		Method:             "GET",
		PathPattern:        "/actions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetActionListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetActionListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getActionList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateAction updates action p r i v a t e

  Update an existing action. Used by `ACS-CLI`
*/
func (a *Client) UpdateAction(params *UpdateActionParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateActionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateAction",
		Method:             "PUT",
		PathPattern:        "/actions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateActionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateActionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateAction: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
