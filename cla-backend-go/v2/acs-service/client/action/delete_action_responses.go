// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package action

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/communitybridge/easycla/cla-backend-go/v2/acs-service/models"
)

// DeleteActionReader is a Reader for the DeleteAction structure.
type DeleteActionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteActionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteActionNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteActionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteActionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteActionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteActionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteActionNoContent creates a DeleteActionNoContent with default headers values
func NewDeleteActionNoContent() *DeleteActionNoContent {
	return &DeleteActionNoContent{}
}

/*DeleteActionNoContent handles this case with default header values.

An empty response
*/
type DeleteActionNoContent struct {
}

func (o *DeleteActionNoContent) Error() string {
	return fmt.Sprintf("[DELETE /actions/{id}][%d] deleteActionNoContent ", 204)
}

func (o *DeleteActionNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteActionBadRequest creates a DeleteActionBadRequest with default headers values
func NewDeleteActionBadRequest() *DeleteActionBadRequest {
	return &DeleteActionBadRequest{}
}

/*DeleteActionBadRequest handles this case with default header values.

Invalid request
*/
type DeleteActionBadRequest struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *DeleteActionBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /actions/{id}][%d] deleteActionBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteActionBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DeleteActionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteActionUnauthorized creates a DeleteActionUnauthorized with default headers values
func NewDeleteActionUnauthorized() *DeleteActionUnauthorized {
	return &DeleteActionUnauthorized{}
}

/*DeleteActionUnauthorized handles this case with default header values.

Unauthorized
*/
type DeleteActionUnauthorized struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *DeleteActionUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /actions/{id}][%d] deleteActionUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteActionUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DeleteActionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteActionForbidden creates a DeleteActionForbidden with default headers values
func NewDeleteActionForbidden() *DeleteActionForbidden {
	return &DeleteActionForbidden{}
}

/*DeleteActionForbidden handles this case with default header values.

Insufficient privilege to execute action
*/
type DeleteActionForbidden struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *DeleteActionForbidden) Error() string {
	return fmt.Sprintf("[DELETE /actions/{id}][%d] deleteActionForbidden  %+v", 403, o.Payload)
}

func (o *DeleteActionForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DeleteActionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteActionNotFound creates a DeleteActionNotFound with default headers values
func NewDeleteActionNotFound() *DeleteActionNotFound {
	return &DeleteActionNotFound{}
}

/*DeleteActionNotFound handles this case with default header values.

Not found
*/
type DeleteActionNotFound struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *DeleteActionNotFound) Error() string {
	return fmt.Sprintf("[DELETE /actions/{id}][%d] deleteActionNotFound  %+v", 404, o.Payload)
}

func (o *DeleteActionNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DeleteActionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
