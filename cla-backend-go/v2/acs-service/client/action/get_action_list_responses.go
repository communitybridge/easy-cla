// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package action

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/communitybridge/easycla/cla-backend-go/v2/acs-service/models"
)

// GetActionListReader is a Reader for the GetActionList structure.
type GetActionListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetActionListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetActionListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetActionListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetActionListUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetActionListForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetActionListNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetActionListOK creates a GetActionListOK with default headers values
func NewGetActionListOK() *GetActionListOK {
	return &GetActionListOK{}
}

/*GetActionListOK handles this case with default header values.

Success
*/
type GetActionListOK struct {
	Payload []*models.Action
}

func (o *GetActionListOK) Error() string {
	return fmt.Sprintf("[GET /actions][%d] getActionListOK  %+v", 200, o.Payload)
}

func (o *GetActionListOK) GetPayload() []*models.Action {
	return o.Payload
}

func (o *GetActionListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetActionListBadRequest creates a GetActionListBadRequest with default headers values
func NewGetActionListBadRequest() *GetActionListBadRequest {
	return &GetActionListBadRequest{}
}

/*GetActionListBadRequest handles this case with default header values.

Invalid request
*/
type GetActionListBadRequest struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetActionListBadRequest) Error() string {
	return fmt.Sprintf("[GET /actions][%d] getActionListBadRequest  %+v", 400, o.Payload)
}

func (o *GetActionListBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetActionListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetActionListUnauthorized creates a GetActionListUnauthorized with default headers values
func NewGetActionListUnauthorized() *GetActionListUnauthorized {
	return &GetActionListUnauthorized{}
}

/*GetActionListUnauthorized handles this case with default header values.

Unauthorized
*/
type GetActionListUnauthorized struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetActionListUnauthorized) Error() string {
	return fmt.Sprintf("[GET /actions][%d] getActionListUnauthorized  %+v", 401, o.Payload)
}

func (o *GetActionListUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetActionListUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetActionListForbidden creates a GetActionListForbidden with default headers values
func NewGetActionListForbidden() *GetActionListForbidden {
	return &GetActionListForbidden{}
}

/*GetActionListForbidden handles this case with default header values.

Insufficient privilege to execute action
*/
type GetActionListForbidden struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetActionListForbidden) Error() string {
	return fmt.Sprintf("[GET /actions][%d] getActionListForbidden  %+v", 403, o.Payload)
}

func (o *GetActionListForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetActionListForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetActionListNotFound creates a GetActionListNotFound with default headers values
func NewGetActionListNotFound() *GetActionListNotFound {
	return &GetActionListNotFound{}
}

/*GetActionListNotFound handles this case with default header values.

Not found
*/
type GetActionListNotFound struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetActionListNotFound) Error() string {
	return fmt.Sprintf("[GET /actions][%d] getActionListNotFound  %+v", 404, o.Payload)
}

func (o *GetActionListNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetActionListNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
