// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package action

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/communitybridge/easycla/cla-backend-go/v2/acs-service/models"
)

// UpdateActionReader is a Reader for the UpdateAction structure.
type UpdateActionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateActionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateActionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateActionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateActionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateActionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateActionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateActionOK creates a UpdateActionOK with default headers values
func NewUpdateActionOK() *UpdateActionOK {
	return &UpdateActionOK{}
}

/*UpdateActionOK handles this case with default header values.

Success
*/
type UpdateActionOK struct {
	Payload *models.Action
}

func (o *UpdateActionOK) Error() string {
	return fmt.Sprintf("[PUT /actions/{id}][%d] updateActionOK  %+v", 200, o.Payload)
}

func (o *UpdateActionOK) GetPayload() *models.Action {
	return o.Payload
}

func (o *UpdateActionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Action)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateActionBadRequest creates a UpdateActionBadRequest with default headers values
func NewUpdateActionBadRequest() *UpdateActionBadRequest {
	return &UpdateActionBadRequest{}
}

/*UpdateActionBadRequest handles this case with default header values.

Invalid request
*/
type UpdateActionBadRequest struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *UpdateActionBadRequest) Error() string {
	return fmt.Sprintf("[PUT /actions/{id}][%d] updateActionBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateActionBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateActionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateActionUnauthorized creates a UpdateActionUnauthorized with default headers values
func NewUpdateActionUnauthorized() *UpdateActionUnauthorized {
	return &UpdateActionUnauthorized{}
}

/*UpdateActionUnauthorized handles this case with default header values.

Unauthorized
*/
type UpdateActionUnauthorized struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *UpdateActionUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /actions/{id}][%d] updateActionUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateActionUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateActionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateActionForbidden creates a UpdateActionForbidden with default headers values
func NewUpdateActionForbidden() *UpdateActionForbidden {
	return &UpdateActionForbidden{}
}

/*UpdateActionForbidden handles this case with default header values.

Insufficient privilege to execute action
*/
type UpdateActionForbidden struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *UpdateActionForbidden) Error() string {
	return fmt.Sprintf("[PUT /actions/{id}][%d] updateActionForbidden  %+v", 403, o.Payload)
}

func (o *UpdateActionForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateActionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateActionNotFound creates a UpdateActionNotFound with default headers values
func NewUpdateActionNotFound() *UpdateActionNotFound {
	return &UpdateActionNotFound{}
}

/*UpdateActionNotFound handles this case with default header values.

Not found
*/
type UpdateActionNotFound struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *UpdateActionNotFound) Error() string {
	return fmt.Sprintf("[PUT /actions/{id}][%d] updateActionNotFound  %+v", 404, o.Payload)
}

func (o *UpdateActionNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateActionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
