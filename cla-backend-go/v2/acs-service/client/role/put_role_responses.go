// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package role

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/communitybridge/easycla/cla-backend-go/v2/acs-service/models"
)

// PutRoleReader is a Reader for the PutRole structure.
type PutRoleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRoleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutRoleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutRoleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPutRoleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutRoleForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutRoleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPutRoleOK creates a PutRoleOK with default headers values
func NewPutRoleOK() *PutRoleOK {
	return &PutRoleOK{}
}

/*PutRoleOK handles this case with default header values.

Success
*/
type PutRoleOK struct {
	Payload *models.Role
}

func (o *PutRoleOK) Error() string {
	return fmt.Sprintf("[PUT /roles/{id}][%d] putRoleOK  %+v", 200, o.Payload)
}

func (o *PutRoleOK) GetPayload() *models.Role {
	return o.Payload
}

func (o *PutRoleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Role)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRoleBadRequest creates a PutRoleBadRequest with default headers values
func NewPutRoleBadRequest() *PutRoleBadRequest {
	return &PutRoleBadRequest{}
}

/*PutRoleBadRequest handles this case with default header values.

Invalid request
*/
type PutRoleBadRequest struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *PutRoleBadRequest) Error() string {
	return fmt.Sprintf("[PUT /roles/{id}][%d] putRoleBadRequest  %+v", 400, o.Payload)
}

func (o *PutRoleBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PutRoleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRoleUnauthorized creates a PutRoleUnauthorized with default headers values
func NewPutRoleUnauthorized() *PutRoleUnauthorized {
	return &PutRoleUnauthorized{}
}

/*PutRoleUnauthorized handles this case with default header values.

Unauthorized
*/
type PutRoleUnauthorized struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *PutRoleUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /roles/{id}][%d] putRoleUnauthorized  %+v", 401, o.Payload)
}

func (o *PutRoleUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PutRoleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRoleForbidden creates a PutRoleForbidden with default headers values
func NewPutRoleForbidden() *PutRoleForbidden {
	return &PutRoleForbidden{}
}

/*PutRoleForbidden handles this case with default header values.

Insufficient privilege to execute action
*/
type PutRoleForbidden struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *PutRoleForbidden) Error() string {
	return fmt.Sprintf("[PUT /roles/{id}][%d] putRoleForbidden  %+v", 403, o.Payload)
}

func (o *PutRoleForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PutRoleForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutRoleNotFound creates a PutRoleNotFound with default headers values
func NewPutRoleNotFound() *PutRoleNotFound {
	return &PutRoleNotFound{}
}

/*PutRoleNotFound handles this case with default header values.

Not found
*/
type PutRoleNotFound struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *PutRoleNotFound) Error() string {
	return fmt.Sprintf("[PUT /roles/{id}][%d] putRoleNotFound  %+v", 404, o.Payload)
}

func (o *PutRoleNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PutRoleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
