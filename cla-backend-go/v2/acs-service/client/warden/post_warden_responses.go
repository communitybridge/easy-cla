// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package warden

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/communitybridge/easycla/cla-backend-go/v2/acs-service/models"
)

// PostWardenReader is a Reader for the PostWarden structure.
type PostWardenReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostWardenReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostWardenOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostWardenBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostWardenUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostWardenForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostWardenNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPostWardenConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostWardenOK creates a PostWardenOK with default headers values
func NewPostWardenOK() *PostWardenOK {
	return &PostWardenOK{}
}

/*PostWardenOK handles this case with default header values.

Success
*/
type PostWardenOK struct {
	Payload *models.Permissions
}

func (o *PostWardenOK) Error() string {
	return fmt.Sprintf("[POST /warden/subjects/authorize][%d] postWardenOK  %+v", 200, o.Payload)
}

func (o *PostWardenOK) GetPayload() *models.Permissions {
	return o.Payload
}

func (o *PostWardenOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Permissions)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostWardenBadRequest creates a PostWardenBadRequest with default headers values
func NewPostWardenBadRequest() *PostWardenBadRequest {
	return &PostWardenBadRequest{}
}

/*PostWardenBadRequest handles this case with default header values.

Invalid request
*/
type PostWardenBadRequest struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *PostWardenBadRequest) Error() string {
	return fmt.Sprintf("[POST /warden/subjects/authorize][%d] postWardenBadRequest  %+v", 400, o.Payload)
}

func (o *PostWardenBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PostWardenBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostWardenUnauthorized creates a PostWardenUnauthorized with default headers values
func NewPostWardenUnauthorized() *PostWardenUnauthorized {
	return &PostWardenUnauthorized{}
}

/*PostWardenUnauthorized handles this case with default header values.

Unauthorized
*/
type PostWardenUnauthorized struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *PostWardenUnauthorized) Error() string {
	return fmt.Sprintf("[POST /warden/subjects/authorize][%d] postWardenUnauthorized  %+v", 401, o.Payload)
}

func (o *PostWardenUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PostWardenUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostWardenForbidden creates a PostWardenForbidden with default headers values
func NewPostWardenForbidden() *PostWardenForbidden {
	return &PostWardenForbidden{}
}

/*PostWardenForbidden handles this case with default header values.

Insufficient privilege to execute action
*/
type PostWardenForbidden struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *PostWardenForbidden) Error() string {
	return fmt.Sprintf("[POST /warden/subjects/authorize][%d] postWardenForbidden  %+v", 403, o.Payload)
}

func (o *PostWardenForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PostWardenForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostWardenNotFound creates a PostWardenNotFound with default headers values
func NewPostWardenNotFound() *PostWardenNotFound {
	return &PostWardenNotFound{}
}

/*PostWardenNotFound handles this case with default header values.

Not found
*/
type PostWardenNotFound struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *PostWardenNotFound) Error() string {
	return fmt.Sprintf("[POST /warden/subjects/authorize][%d] postWardenNotFound  %+v", 404, o.Payload)
}

func (o *PostWardenNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PostWardenNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostWardenConflict creates a PostWardenConflict with default headers values
func NewPostWardenConflict() *PostWardenConflict {
	return &PostWardenConflict{}
}

/*PostWardenConflict handles this case with default header values.

Duplicate Resource
*/
type PostWardenConflict struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *PostWardenConflict) Error() string {
	return fmt.Sprintf("[POST /warden/subjects/authorize][%d] postWardenConflict  %+v", 409, o.Payload)
}

func (o *PostWardenConflict) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PostWardenConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
