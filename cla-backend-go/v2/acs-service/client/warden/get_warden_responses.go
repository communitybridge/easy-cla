// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package warden

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/communitybridge/easycla/cla-backend-go/v2/acs-service/models"
)

// GetWardenReader is a Reader for the GetWarden structure.
type GetWardenReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetWardenReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetWardenOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetWardenBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetWardenUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetWardenForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetWardenNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetWardenOK creates a GetWardenOK with default headers values
func NewGetWardenOK() *GetWardenOK {
	return &GetWardenOK{}
}

/*GetWardenOK handles this case with default header values.

Success
*/
type GetWardenOK struct {
	Payload *models.AuthorizationResponseList
}

func (o *GetWardenOK) Error() string {
	return fmt.Sprintf("[GET /warden/subjects/authorize][%d] getWardenOK  %+v", 200, o.Payload)
}

func (o *GetWardenOK) GetPayload() *models.AuthorizationResponseList {
	return o.Payload
}

func (o *GetWardenOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AuthorizationResponseList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWardenBadRequest creates a GetWardenBadRequest with default headers values
func NewGetWardenBadRequest() *GetWardenBadRequest {
	return &GetWardenBadRequest{}
}

/*GetWardenBadRequest handles this case with default header values.

Invalid request
*/
type GetWardenBadRequest struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetWardenBadRequest) Error() string {
	return fmt.Sprintf("[GET /warden/subjects/authorize][%d] getWardenBadRequest  %+v", 400, o.Payload)
}

func (o *GetWardenBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetWardenBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWardenUnauthorized creates a GetWardenUnauthorized with default headers values
func NewGetWardenUnauthorized() *GetWardenUnauthorized {
	return &GetWardenUnauthorized{}
}

/*GetWardenUnauthorized handles this case with default header values.

Unauthorized
*/
type GetWardenUnauthorized struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetWardenUnauthorized) Error() string {
	return fmt.Sprintf("[GET /warden/subjects/authorize][%d] getWardenUnauthorized  %+v", 401, o.Payload)
}

func (o *GetWardenUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetWardenUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWardenForbidden creates a GetWardenForbidden with default headers values
func NewGetWardenForbidden() *GetWardenForbidden {
	return &GetWardenForbidden{}
}

/*GetWardenForbidden handles this case with default header values.

Insufficient privilege to execute action
*/
type GetWardenForbidden struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetWardenForbidden) Error() string {
	return fmt.Sprintf("[GET /warden/subjects/authorize][%d] getWardenForbidden  %+v", 403, o.Payload)
}

func (o *GetWardenForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetWardenForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWardenNotFound creates a GetWardenNotFound with default headers values
func NewGetWardenNotFound() *GetWardenNotFound {
	return &GetWardenNotFound{}
}

/*GetWardenNotFound handles this case with default header values.

Not found
*/
type GetWardenNotFound struct {
	/*Unique request ID to help in tracing and debugging
	 */
	XREQUESTID string

	Payload *models.ErrorResponse
}

func (o *GetWardenNotFound) Error() string {
	return fmt.Sprintf("[GET /warden/subjects/authorize][%d] getWardenNotFound  %+v", 404, o.Payload)
}

func (o *GetWardenNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetWardenNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-REQUEST-ID
	o.XREQUESTID = response.GetHeader("X-REQUEST-ID")

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
