// Code generated by go-swagger; DO NOT EDIT.

// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

package warden

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetWardenParams creates a new GetWardenParams object
// with the default values initialized.
func NewGetWardenParams() *GetWardenParams {
	var ()
	return &GetWardenParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetWardenParamsWithTimeout creates a new GetWardenParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetWardenParamsWithTimeout(timeout time.Duration) *GetWardenParams {
	var ()
	return &GetWardenParams{

		timeout: timeout,
	}
}

// NewGetWardenParamsWithContext creates a new GetWardenParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetWardenParamsWithContext(ctx context.Context) *GetWardenParams {
	var ()
	return &GetWardenParams{

		Context: ctx,
	}
}

// NewGetWardenParamsWithHTTPClient creates a new GetWardenParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetWardenParamsWithHTTPClient(client *http.Client) *GetWardenParams {
	var ()
	return &GetWardenParams{
		HTTPClient: client,
	}
}

/*GetWardenParams contains all the parameters to send to the API endpoint
for the get warden operation typically these are written to a http.Request
*/
type GetWardenParams struct {

	/*EmptyHeader
	  The access control list header value encoded as base64 - assigned by the API Gateway based on user/request permissions

	*/
	EmptyHeader string
	/*XEMAIL
	  Email of the person who is requesting an access

	*/
	XEMAIL *string
	/*XREQUESTID
	  The unique request ID value - assigned/set by the API Gateway based on the login session

	*/
	XREQUESTID *string
	/*XUSERNAME
	  Username of the person who is requesting an access

	*/
	XUSERNAME *string
	/*Actions*/
	Actions []string
	/*Resource*/
	Resource *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get warden params
func (o *GetWardenParams) WithTimeout(timeout time.Duration) *GetWardenParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get warden params
func (o *GetWardenParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get warden params
func (o *GetWardenParams) WithContext(ctx context.Context) *GetWardenParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get warden params
func (o *GetWardenParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get warden params
func (o *GetWardenParams) WithHTTPClient(client *http.Client) *GetWardenParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get warden params
func (o *GetWardenParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEmptyHeader adds the emptyHeader to the get warden params
func (o *GetWardenParams) WithEmptyHeader(emptyHeader string) *GetWardenParams {
	o.SetEmptyHeader(emptyHeader)
	return o
}

// SetEmptyHeader adds the emptyHeader to the get warden params
func (o *GetWardenParams) SetEmptyHeader(emptyHeader string) {
	o.EmptyHeader = emptyHeader
}

// WithXEMAIL adds the xEMAIL to the get warden params
func (o *GetWardenParams) WithXEMAIL(xEMAIL *string) *GetWardenParams {
	o.SetXEMAIL(xEMAIL)
	return o
}

// SetXEMAIL adds the xEMAIL to the get warden params
func (o *GetWardenParams) SetXEMAIL(xEMAIL *string) {
	o.XEMAIL = xEMAIL
}

// WithXREQUESTID adds the xREQUESTID to the get warden params
func (o *GetWardenParams) WithXREQUESTID(xREQUESTID *string) *GetWardenParams {
	o.SetXREQUESTID(xREQUESTID)
	return o
}

// SetXREQUESTID adds the xREQUESTId to the get warden params
func (o *GetWardenParams) SetXREQUESTID(xREQUESTID *string) {
	o.XREQUESTID = xREQUESTID
}

// WithXUSERNAME adds the xUSERNAME to the get warden params
func (o *GetWardenParams) WithXUSERNAME(xUSERNAME *string) *GetWardenParams {
	o.SetXUSERNAME(xUSERNAME)
	return o
}

// SetXUSERNAME adds the xUSERNAME to the get warden params
func (o *GetWardenParams) SetXUSERNAME(xUSERNAME *string) {
	o.XUSERNAME = xUSERNAME
}

// WithActions adds the actions to the get warden params
func (o *GetWardenParams) WithActions(actions []string) *GetWardenParams {
	o.SetActions(actions)
	return o
}

// SetActions adds the actions to the get warden params
func (o *GetWardenParams) SetActions(actions []string) {
	o.Actions = actions
}

// WithResource adds the resource to the get warden params
func (o *GetWardenParams) WithResource(resource *string) *GetWardenParams {
	o.SetResource(resource)
	return o
}

// SetResource adds the resource to the get warden params
func (o *GetWardenParams) SetResource(resource *string) {
	o.Resource = resource
}

// WriteToRequest writes these params to a swagger request
func (o *GetWardenParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Empty-Header
	if err := r.SetHeaderParam("Empty-Header", o.EmptyHeader); err != nil {
		return err
	}

	if o.XEMAIL != nil {

		// header param X-EMAIL
		if err := r.SetHeaderParam("X-EMAIL", *o.XEMAIL); err != nil {
			return err
		}

	}

	if o.XREQUESTID != nil {

		// header param X-REQUEST-ID
		if err := r.SetHeaderParam("X-REQUEST-ID", *o.XREQUESTID); err != nil {
			return err
		}

	}

	if o.XUSERNAME != nil {

		// header param X-USERNAME
		if err := r.SetHeaderParam("X-USERNAME", *o.XUSERNAME); err != nil {
			return err
		}

	}

	valuesActions := o.Actions

	joinedActions := swag.JoinByFormat(valuesActions, "")
	// query array param actions
	if err := r.SetQueryParam("actions", joinedActions...); err != nil {
		return err
	}

	if o.Resource != nil {

		// query param resource
		var qrResource string
		if o.Resource != nil {
			qrResource = *o.Resource
		}
		qResource := qrResource
		if qResource != "" {
			if err := r.SetQueryParam("resource", qResource); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
