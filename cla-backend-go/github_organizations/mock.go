// Copyright The Linux Foundation and each contributor to CommunityBridge.
// SPDX-License-Identifier: MIT
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/communitybridge/easycla/cla-backend-go/github_organizations (interfaces: Repository)

// Package github_organizations is a generated GoMock package.
package github_organizations

import (
	context "context"
	reflect "reflect"

	models "github.com/communitybridge/easycla/cla-backend-go/gen/v1/models"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddGitHubOrganization mocks base method
func (m *MockRepository) AddGitHubOrganization(arg0 context.Context, arg1, arg2 string, arg3 *models.GithubCreateOrganization) (*models.GithubOrganization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddGitHubOrganization", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*models.GithubOrganization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddGithubOrganization indicates an expected call of AddGithubOrganization
func (mr *MockRepositoryMockRecorder) AddGithubOrganization(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGitHubOrganization", reflect.TypeOf((*MockRepository)(nil).AddGitHubOrganization), arg0, arg1, arg2, arg3)
}

// DeleteGitHubOrganization mocks base method
func (m *MockRepository) DeleteGitHubOrganization(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGitHubOrganization", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGithubOrganization indicates an expected call of DeleteGithubOrganization
func (mr *MockRepositoryMockRecorder) DeleteGithubOrganization(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGitHubOrganization", reflect.TypeOf((*MockRepository)(nil).DeleteGitHubOrganization), arg0, arg1, arg2)
}

// DeleteGithubOrganizationByParent mocks base method
func (m *MockRepository) DeleteGitHubOrganizationByParent(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGitHubOrganizationByParent", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGithubOrganizationByParent indicates an expected call of DeleteGithubOrganizationByParent
func (mr *MockRepositoryMockRecorder) DeleteGithubOrganizationByParent(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGitHubOrganizationByParent", reflect.TypeOf((*MockRepository)(nil).DeleteGitHubOrganizationByParent), arg0, arg1, arg2)
}

// GetGithubOrganization mocks base method
func (m *MockRepository) GetGitHubOrganization(arg0 context.Context, arg1 string) (*models.GithubOrganization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitHubOrganization", arg0, arg1)
	ret0, _ := ret[0].(*models.GithubOrganization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGithubOrganization indicates an expected call of GetGithubOrganization
func (mr *MockRepositoryMockRecorder) GetGithubOrganization(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitHubOrganization", reflect.TypeOf((*MockRepository)(nil).GetGitHubOrganization), arg0, arg1)
}

// GetGitHubOrganizationByName mocks base method
func (m *MockRepository) GetGitHubOrganizationByName(arg0 context.Context, arg1 string) (*models.GithubOrganizations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitHubOrganizationByName", arg0, arg1)
	ret0, _ := ret[0].(*models.GithubOrganizations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGithubOrganizationByName indicates an expected call of GetGithubOrganizationByName
func (mr *MockRepositoryMockRecorder) GetGithubOrganizationByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitHubOrganizationByName", reflect.TypeOf((*MockRepository)(nil).GetGitHubOrganizationByName), arg0, arg1)
}

// GetGitHubOrganizations mocks base method
func (m *MockRepository) GetGitHubOrganizations(arg0 context.Context, arg1 string) (*models.GithubOrganizations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitHubOrganizations", arg0, arg1)
	ret0, _ := ret[0].(*models.GithubOrganizations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGithubOrganizations indicates an expected call of GetGithubOrganizations
func (mr *MockRepositoryMockRecorder) GetGithubOrganizations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitHubOrganizations", reflect.TypeOf((*MockRepository)(nil).GetGitHubOrganizations), arg0, arg1)
}

// GetGitHubOrganizationsByParent mocks base method
func (m *MockRepository) GetGitHubOrganizationsByParent(arg0 context.Context, arg1 string) (*models.GithubOrganizations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitHubOrganizationsByParent", arg0, arg1)
	ret0, _ := ret[0].(*models.GithubOrganizations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGithubOrganizationsByParent indicates an expected call of GetGithubOrganizationsByParent
func (mr *MockRepositoryMockRecorder) GetGithubOrganizationsByParent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitHubOrganizationsByParent", reflect.TypeOf((*MockRepository)(nil).GetGitHubOrganizationsByParent), arg0, arg1)
}

// UpdateGitHubOrganization mocks base method
func (m *MockRepository) UpdateGitHubOrganization(arg0 context.Context, arg1, arg2 string, arg3 bool, arg4 string, arg5 bool, arg6 *bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGitHubOrganization", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGithubOrganization indicates an expected call of UpdateGithubOrganization
func (mr *MockRepositoryMockRecorder) UpdateGithubOrganization(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGitHubOrganization", reflect.TypeOf((*MockRepository)(nil).UpdateGitHubOrganization), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}
