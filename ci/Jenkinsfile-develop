node {
  properties([disableConcurrentBuilds(), parameters([string(defaultValue: '', description: 'The git sha you wish to build', name: 'SHA')]), pipelineTriggers([])])

  // Wipe the workspace so we are building completely clean
  sh "sudo rm -rf *"

  stage ("Checkout") {
    git credentialsId: 'd78c94c4-9179-4765-9851-9907b5ef2cc4', url: "git@github.linuxfoundation.org:Engineering/project-management-console.git", branch: "develop"
    sh "git checkout ${params.SHA}"
  }

  try {

    stage ("Generating Docker Build Artifact") {
      docker.withRegistry("https://433610389961.dkr.ecr.us-west-2.amazonaws.com", "ecr:us-west-2:jenkins-aws-user") {
        sh "docker build -t pmc/sandbox/${params.SHA} --build-arg build_number=${env.BUILD_NUMBER} --build-arg git_hash=${params.SHA} ."
        sh "docker tag pmc/sandbox/${params.SHA} 433610389961.dkr.ecr.us-west-2.amazonaws.com/pmc/sandbox:${env.BUILD_NUMBER}"
        sh "docker push 433610389961.dkr.ecr.us-west-2.amazonaws.com/pmc/sandbox:${env.BUILD_NUMBER}"
      }
    }

    stage ("Updating Sandbox") {
      sh "/home/centos/.local/bin/lfs update --project=pmc --name=sandbox --newrelic -d -y"
    }

    sh "curl -s https://workflow.engineering.tux.rocks/api/slack/channel-msg -d '{\
          \"color\": \"#008000\",\
          \"message\": \"PMC Sandbox has been updated to `${params.SHA}`\",\
          \"channel\": \"#integration\"}'"
  } catch(err) {
    sh "curl -s https://workflow.engineering.tux.rocks/api/slack/channel-msg -d '{\
          \"color\": \"#cc0000\",\
          \"message\": \"PMC Sandbox has fail to update. <${env.BUILD_URL}>\",\
          \"channel\": \"#integration\"}'"
    throw err
  }

}

